
Autonomous_car_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007234  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080073c0  080073c0  000173c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007458  08007458  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007458  08007458  00017458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007460  08007460  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007460  08007460  00017460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007464  08007464  00017464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  20000088  080074ec  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  080074ec  0002072c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012297  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000231e  00000000  00000000  0003234b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001200  00000000  00000000  00034670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001120  00000000  00000000  00035870  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020237  00000000  00000000  00036990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc9b  00000000  00000000  00056bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c43c9  00000000  00000000  00063862  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00127c2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005124  00000000  00000000  00127ca8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080073a4 	.word	0x080073a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	080073a4 	.word	0x080073a4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b972 	b.w	8000edc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <ftoa>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b08b      	sub	sp, #44	; 0x2c
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	ed87 0b02 	vstr	d0, [r7, #8]
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	char * ptr = buf;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	2b0a      	cmp	r3, #10
 8000efa:	dd01      	ble.n	8000f00 <ftoa+0x20>
		precision = MAX_PRECISION;
 8000efc:	230a      	movs	r3, #10
 8000efe:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f0c:	f7ff fd92 	bl	8000a34 <__aeabi_dcmplt>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d00a      	beq.n	8000f2c <ftoa+0x4c>
	{
		f = -f;
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000f20:	60fb      	str	r3, [r7, #12]
		*ptr++ = '-';
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	627a      	str	r2, [r7, #36]	; 0x24
 8000f28:	222d      	movs	r2, #45	; 0x2d
 8000f2a:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	da4f      	bge.n	8000fd2 <ftoa+0xf2>
	{
		if (f < 1.0) precision = 6;
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	4b80      	ldr	r3, [pc, #512]	; (8001138 <ftoa+0x258>)
 8000f38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f3c:	f7ff fd7a 	bl	8000a34 <__aeabi_dcmplt>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d002      	beq.n	8000f4c <ftoa+0x6c>
 8000f46:	2306      	movs	r3, #6
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	e042      	b.n	8000fd2 <ftoa+0xf2>
		else if (f < 10.0) precision = 5;
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	4b7a      	ldr	r3, [pc, #488]	; (800113c <ftoa+0x25c>)
 8000f52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f56:	f7ff fd6d 	bl	8000a34 <__aeabi_dcmplt>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <ftoa+0x86>
 8000f60:	2305      	movs	r3, #5
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	e035      	b.n	8000fd2 <ftoa+0xf2>
		else if (f < 100.0) precision = 4;
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	4b75      	ldr	r3, [pc, #468]	; (8001140 <ftoa+0x260>)
 8000f6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f70:	f7ff fd60 	bl	8000a34 <__aeabi_dcmplt>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d002      	beq.n	8000f80 <ftoa+0xa0>
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	e028      	b.n	8000fd2 <ftoa+0xf2>
		else if (f < 1000.0) precision = 3;
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	4b6f      	ldr	r3, [pc, #444]	; (8001144 <ftoa+0x264>)
 8000f86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f8a:	f7ff fd53 	bl	8000a34 <__aeabi_dcmplt>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d002      	beq.n	8000f9a <ftoa+0xba>
 8000f94:	2303      	movs	r3, #3
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	e01b      	b.n	8000fd2 <ftoa+0xf2>
		else if (f < 10000.0) precision = 2;
 8000f9a:	a363      	add	r3, pc, #396	; (adr r3, 8001128 <ftoa+0x248>)
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fa4:	f7ff fd46 	bl	8000a34 <__aeabi_dcmplt>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <ftoa+0xd4>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	603b      	str	r3, [r7, #0]
 8000fb2:	e00e      	b.n	8000fd2 <ftoa+0xf2>
		else if (f < 100000.0) precision = 1;
 8000fb4:	a35e      	add	r3, pc, #376	; (adr r3, 8001130 <ftoa+0x250>)
 8000fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fbe:	f7ff fd39 	bl	8000a34 <__aeabi_dcmplt>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <ftoa+0xee>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	e001      	b.n	8000fd2 <ftoa+0xf2>
		else precision = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00f      	beq.n	8000ff8 <ftoa+0x118>
		f += rounders[precision];
 8000fd8:	4a5b      	ldr	r2, [pc, #364]	; (8001148 <ftoa+0x268>)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	4413      	add	r3, r2
 8000fe0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fec:	f7ff f8fa 	bl	80001e4 <__adddf3>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	460c      	mov	r4, r1
 8000ff4:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// integer part...
	intPart = f;
 8000ff8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ffc:	f7ff fd58 	bl	8000ab0 <__aeabi_d2iz>
 8001000:	4603      	mov	r3, r0
 8001002:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 8001004:	69f8      	ldr	r0, [r7, #28]
 8001006:	f7ff fa39 	bl	800047c <__aeabi_i2d>
 800100a:	4603      	mov	r3, r0
 800100c:	460c      	mov	r4, r1
 800100e:	461a      	mov	r2, r3
 8001010:	4623      	mov	r3, r4
 8001012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001016:	f7ff f8e3 	bl	80001e0 <__aeabi_dsub>
 800101a:	4603      	mov	r3, r0
 800101c:	460c      	mov	r4, r1
 800101e:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (!intPart)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d105      	bne.n	8001034 <ftoa+0x154>
		*ptr++ = '0';
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	627a      	str	r2, [r7, #36]	; 0x24
 800102e:	2230      	movs	r2, #48	; 0x30
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	e038      	b.n	80010a6 <ftoa+0x1c6>
	else
	{
		// save start pointer
		p = ptr;
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 8001038:	e01a      	b.n	8001070 <ftoa+0x190>
		{
			*p++ = '0' + intPart % 10;
 800103a:	69fa      	ldr	r2, [r7, #28]
 800103c:	4b43      	ldr	r3, [pc, #268]	; (800114c <ftoa+0x26c>)
 800103e:	fb83 1302 	smull	r1, r3, r3, r2
 8001042:	1099      	asrs	r1, r3, #2
 8001044:	17d3      	asrs	r3, r2, #31
 8001046:	1ac9      	subs	r1, r1, r3
 8001048:	460b      	mov	r3, r1
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	1ad1      	subs	r1, r2, r3
 8001052:	b2ca      	uxtb	r2, r1
 8001054:	6a3b      	ldr	r3, [r7, #32]
 8001056:	1c59      	adds	r1, r3, #1
 8001058:	6239      	str	r1, [r7, #32]
 800105a:	3230      	adds	r2, #48	; 0x30
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	4a3a      	ldr	r2, [pc, #232]	; (800114c <ftoa+0x26c>)
 8001064:	fb82 1203 	smull	r1, r2, r2, r3
 8001068:	1092      	asrs	r2, r2, #2
 800106a:	17db      	asrs	r3, r3, #31
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	61fb      	str	r3, [r7, #28]
		while (intPart)
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1e1      	bne.n	800103a <ftoa+0x15a>
		}

		// save end pos
		p1 = p;
 8001076:	6a3b      	ldr	r3, [r7, #32]
 8001078:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 800107a:	e00e      	b.n	800109a <ftoa+0x1ba>
		{
			c = *--p;
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	3b01      	subs	r3, #1
 8001080:	623b      	str	r3, [r7, #32]
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	6a3b      	ldr	r3, [r7, #32]
 800108e:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	627a      	str	r2, [r7, #36]	; 0x24
 8001096:	7dfa      	ldrb	r2, [r7, #23]
 8001098:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 800109a:	6a3a      	ldr	r2, [r7, #32]
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	429a      	cmp	r2, r3
 80010a0:	d8ec      	bhi.n	800107c <ftoa+0x19c>
		}

		// restore end pos
		ptr = p1;
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d032      	beq.n	8001112 <ftoa+0x232>
	{
		// place decimal point
		*ptr++ = '.';
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	627a      	str	r2, [r7, #36]	; 0x24
 80010b2:	222e      	movs	r2, #46	; 0x2e
 80010b4:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 80010b6:	e027      	b.n	8001108 <ftoa+0x228>
		{
			f *= 10.0;
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <ftoa+0x25c>)
 80010be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010c2:	f7ff fa45 	bl	8000550 <__aeabi_dmul>
 80010c6:	4603      	mov	r3, r0
 80010c8:	460c      	mov	r4, r1
 80010ca:	e9c7 3402 	strd	r3, r4, [r7, #8]
			c = f;
 80010ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010d2:	f7ff fd15 	bl	8000b00 <__aeabi_d2uiz>
 80010d6:	4603      	mov	r3, r0
 80010d8:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	627a      	str	r2, [r7, #36]	; 0x24
 80010e0:	7dfa      	ldrb	r2, [r7, #23]
 80010e2:	3230      	adds	r2, #48	; 0x30
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	701a      	strb	r2, [r3, #0]
			f -= c;
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f9c6 	bl	800047c <__aeabi_i2d>
 80010f0:	4603      	mov	r3, r0
 80010f2:	460c      	mov	r4, r1
 80010f4:	461a      	mov	r2, r3
 80010f6:	4623      	mov	r3, r4
 80010f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010fc:	f7ff f870 	bl	80001e0 <__aeabi_dsub>
 8001100:	4603      	mov	r3, r0
 8001102:	460c      	mov	r4, r1
 8001104:	e9c7 3402 	strd	r3, r4, [r7, #8]
		while (precision--)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	1e5a      	subs	r2, r3, #1
 800110c:	603a      	str	r2, [r7, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1d2      	bne.n	80010b8 <ftoa+0x1d8>
		}
	}

	// terminating zero
	*ptr = 0;
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]

	return buf;
 8001118:	687b      	ldr	r3, [r7, #4]
}
 800111a:	4618      	mov	r0, r3
 800111c:	372c      	adds	r7, #44	; 0x2c
 800111e:	46bd      	mov	sp, r7
 8001120:	bd90      	pop	{r4, r7, pc}
 8001122:	bf00      	nop
 8001124:	f3af 8000 	nop.w
 8001128:	00000000 	.word	0x00000000
 800112c:	40c38800 	.word	0x40c38800
 8001130:	00000000 	.word	0x00000000
 8001134:	40f86a00 	.word	0x40f86a00
 8001138:	3ff00000 	.word	0x3ff00000
 800113c:	40240000 	.word	0x40240000
 8001140:	40590000 	.word	0x40590000
 8001144:	408f4000 	.word	0x408f4000
 8001148:	080073d8 	.word	0x080073d8
 800114c:	66666667 	.word	0x66666667

08001150 <init_MPU>:
    HAL_I2C_Init(handler);
}

/******************************************End HAL_BUSY************************************************************/

char init_MPU(){
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b08d      	sub	sp, #52	; 0x34
 8001154:	af02      	add	r7, sp, #8
    char status = 1;
 8001156:	2301      	movs	r3, #1
 8001158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 800115c:	23d0      	movs	r3, #208	; 0xd0
 800115e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t magnet_address = MAG_ADRRESS;
 8001162:	2318      	movs	r3, #24
 8001164:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25




  	char rx_data[25];
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 8001168:	e014      	b.n	8001194 <init_MPU+0x44>
    	if(HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) == HAL_BUSY){
 800116a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800116e:	b299      	uxth	r1, r3
 8001170:	2302      	movs	r3, #2
 8001172:	2203      	movs	r2, #3
 8001174:	4888      	ldr	r0, [pc, #544]	; (8001398 <init_MPU+0x248>)
 8001176:	f003 fa9b 	bl	80046b0 <HAL_I2C_IsDeviceReady>
 800117a:	4603      	mov	r3, r0
 800117c:	2b02      	cmp	r3, #2
 800117e:	d104      	bne.n	800118a <init_MPU+0x3a>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001184:	4885      	ldr	r0, [pc, #532]	; (800139c <init_MPU+0x24c>)
 8001186:	f002 fe1c 	bl	8003dc2 <HAL_GPIO_TogglePin>

    	}
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800118a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118e:	4884      	ldr	r0, [pc, #528]	; (80013a0 <init_MPU+0x250>)
 8001190:	f002 fe17 	bl	8003dc2 <HAL_GPIO_TogglePin>
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 8001194:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001198:	b299      	uxth	r1, r3
 800119a:	2302      	movs	r3, #2
 800119c:	2203      	movs	r2, #3
 800119e:	487e      	ldr	r0, [pc, #504]	; (8001398 <init_MPU+0x248>)
 80011a0:	f003 fa86 	bl	80046b0 <HAL_I2C_IsDeviceReady>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1df      	bne.n	800116a <init_MPU+0x1a>
      }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b0:	487b      	ldr	r0, [pc, #492]	; (80013a0 <init_MPU+0x250>)
 80011b2:	f002 fded 	bl	8003d90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011bc:	4878      	ldr	r0, [pc, #480]	; (80013a0 <init_MPU+0x250>)
 80011be:	f002 fde7 	bl	8003d90 <HAL_GPIO_WritePin>

//    HAL_UART_Transmit(&huart3,rx_data, strlen(rx_data),1000);

	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 80011c2:	236b      	movs	r3, #107	; 0x6b
 80011c4:	f887 3020 	strb.w	r3, [r7, #32]
    d[1] = 1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 80011ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011d2:	b299      	uxth	r1, r3
 80011d4:	f107 0220 	add.w	r2, r7, #32
 80011d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2302      	movs	r3, #2
 80011e0:	486d      	ldr	r0, [pc, #436]	; (8001398 <init_MPU+0x248>)
 80011e2:	f002 ff41 	bl	8004068 <HAL_I2C_Master_Transmit>

	}

	/* Set data sample rate */

	d[0] = SAMPLE_RATE;
 80011e6:	2319      	movs	r3, #25
 80011e8:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = sample_1khz;
 80011ec:	2307      	movs	r3, #7
 80011ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80011f2:	bf00      	nop
 80011f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011f8:	b299      	uxth	r1, r3
 80011fa:	f107 0220 	add.w	r2, r7, #32
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2302      	movs	r3, #2
 8001206:	4864      	ldr	r0, [pc, #400]	; (8001398 <init_MPU+0x248>)
 8001208:	f002 ff2e 	bl	8004068 <HAL_I2C_Master_Transmit>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <init_MPU+0xa4>

	d[0] = CONFIG;
 8001212:	231a      	movs	r3, #26
 8001214:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = lpf;
 8001218:	2301      	movs	r3, #1
 800121a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800121e:	bf00      	nop
 8001220:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001224:	b299      	uxth	r1, r3
 8001226:	f107 0220 	add.w	r2, r7, #32
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2302      	movs	r3, #2
 8001232:	4859      	ldr	r0, [pc, #356]	; (8001398 <init_MPU+0x248>)
 8001234:	f002 ff18 	bl	8004068 <HAL_I2C_Master_Transmit>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f0      	bne.n	8001220 <init_MPU+0xd0>

	d[0] = GYRO_CONFIG;
 800123e:	231b      	movs	r3, #27
 8001240:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = gyro_con;
 8001244:	2318      	movs	r3, #24
 8001246:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800124a:	bf00      	nop
 800124c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001250:	b299      	uxth	r1, r3
 8001252:	f107 0220 	add.w	r2, r7, #32
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2302      	movs	r3, #2
 800125e:	484e      	ldr	r0, [pc, #312]	; (8001398 <init_MPU+0x248>)
 8001260:	f002 ff02 	bl	8004068 <HAL_I2C_Master_Transmit>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f0      	bne.n	800124c <init_MPU+0xfc>

	d[0] = ACCEL_CONFIG;
 800126a:	231c      	movs	r3, #28
 800126c:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = 0x00;
 8001270:	2300      	movs	r3, #0
 8001272:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001276:	bf00      	nop
 8001278:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800127c:	b299      	uxth	r1, r3
 800127e:	f107 0220 	add.w	r2, r7, #32
 8001282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2302      	movs	r3, #2
 800128a:	4843      	ldr	r0, [pc, #268]	; (8001398 <init_MPU+0x248>)
 800128c:	f002 feec 	bl	8004068 <HAL_I2C_Master_Transmit>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f0      	bne.n	8001278 <init_MPU+0x128>

	d[0] = ACCEL_CONFIG2;
 8001296:	231d      	movs	r3, #29
 8001298:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = 0x02;
 800129c:	2302      	movs	r3, #2
 800129e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80012a2:	bf00      	nop
 80012a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012a8:	b299      	uxth	r1, r3
 80012aa:	f107 0220 	add.w	r2, r7, #32
 80012ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2302      	movs	r3, #2
 80012b6:	4838      	ldr	r0, [pc, #224]	; (8001398 <init_MPU+0x248>)
 80012b8:	f002 fed6 	bl	8004068 <HAL_I2C_Master_Transmit>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <init_MPU+0x154>


	d[0] = INIT_ENB;
 80012c2:	2338      	movs	r3, #56	; 0x38
 80012c4:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = inter;
 80012c8:	2301      	movs	r3, #1
 80012ca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80012ce:	bf00      	nop
 80012d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012d4:	b299      	uxth	r1, r3
 80012d6:	f107 0220 	add.w	r2, r7, #32
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2302      	movs	r3, #2
 80012e2:	482d      	ldr	r0, [pc, #180]	; (8001398 <init_MPU+0x248>)
 80012e4:	f002 fec0 	bl	8004068 <HAL_I2C_Master_Transmit>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <init_MPU+0x180>

	d[0] = USER_CTRL;
 80012ee:	236a      	movs	r3, #106	; 0x6a
 80012f0:	f887 3020 	strb.w	r3, [r7, #32]
    d[1] = zero;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80012fa:	bf00      	nop
 80012fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001300:	b299      	uxth	r1, r3
 8001302:	f107 0220 	add.w	r2, r7, #32
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2302      	movs	r3, #2
 800130e:	4822      	ldr	r0, [pc, #136]	; (8001398 <init_MPU+0x248>)
 8001310:	f002 feaa 	bl	8004068 <HAL_I2C_Master_Transmit>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <init_MPU+0x1ac>

	d[0] = INT_BYPASS;
 800131a:	2337      	movs	r3, #55	; 0x37
 800131c:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = stop_i2c_master;
 8001320:	2322      	movs	r3, #34	; 0x22
 8001322:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001326:	bf00      	nop
 8001328:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800132c:	b299      	uxth	r1, r3
 800132e:	f107 0220 	add.w	r2, r7, #32
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2302      	movs	r3, #2
 800133a:	4817      	ldr	r0, [pc, #92]	; (8001398 <init_MPU+0x248>)
 800133c:	f002 fe94 	bl	8004068 <HAL_I2C_Master_Transmit>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <init_MPU+0x1d8>

	if (HAL_I2C_IsDeviceReady(&hi2c1, magnet_address, 3, 200) != HAL_OK) {
 8001346:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800134a:	b299      	uxth	r1, r3
 800134c:	23c8      	movs	r3, #200	; 0xc8
 800134e:	2203      	movs	r2, #3
 8001350:	4811      	ldr	r0, [pc, #68]	; (8001398 <init_MPU+0x248>)
 8001352:	f003 f9ad 	bl	80046b0 <HAL_I2C_IsDeviceReady>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d025      	beq.n	80013a8 <init_MPU+0x258>
	    	strcpy( rx_data, "No Device \r \n");
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <init_MPU+0x254>)
 8001360:	461c      	mov	r4, r3
 8001362:	4613      	mov	r3, r2
 8001364:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001366:	c407      	stmia	r4!, {r0, r1, r2}
 8001368:	8023      	strh	r3, [r4, #0]
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001370:	480b      	ldr	r0, [pc, #44]	; (80013a0 <init_MPU+0x250>)
 8001372:	f002 fd0d 	bl	8003d90 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800137c:	4808      	ldr	r0, [pc, #32]	; (80013a0 <init_MPU+0x250>)
 800137e:	f002 fd07 	bl	8003d90 <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 8001382:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001386:	f001 ff61 	bl	800324c <HAL_Delay>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001390:	4803      	ldr	r0, [pc, #12]	; (80013a0 <init_MPU+0x250>)
 8001392:	f002 fcfd 	bl	8003d90 <HAL_GPIO_WritePin>
 8001396:	e0e0      	b.n	800155a <init_MPU+0x40a>
 8001398:	2000012c 	.word	0x2000012c
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020400 	.word	0x40020400
 80013a4:	080073c0 	.word	0x080073c0
	      }
	      else{
	    	    d[0] = CNTL1_AD;
 80013a8:	230a      	movs	r3, #10
 80013aa:	f887 3020 	strb.w	r3, [r7, #32]
	    	  	d[1] = ROM_MODE;
 80013ae:	231f      	movs	r3, #31
 80013b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    	  	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t) magnet_address,(uint8_t *)d,2,2)!=HAL_OK);
 80013b4:	bf00      	nop
 80013b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013ba:	b299      	uxth	r1, r3
 80013bc:	f107 0220 	add.w	r2, r7, #32
 80013c0:	2302      	movs	r3, #2
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2302      	movs	r3, #2
 80013c6:	4868      	ldr	r0, [pc, #416]	; (8001568 <init_MPU+0x418>)
 80013c8:	f002 fe4e 	bl	8004068 <HAL_I2C_Master_Transmit>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f1      	bne.n	80013b6 <init_MPU+0x266>

	    	  	HAL_Delay(100);
 80013d2:	2064      	movs	r0, #100	; 0x64
 80013d4:	f001 ff3a 	bl	800324c <HAL_Delay>


	    	  	uint8_t sensitive = ASAX_AD;
 80013d8:	2310      	movs	r3, #16
 80013da:	70fb      	strb	r3, [r7, #3]
	    	  	uint8_t asa [3];
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &sensitive, 1, 1000) != HAL_OK);
 80013dc:	bf00      	nop
 80013de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013e2:	b299      	uxth	r1, r3
 80013e4:	1cfa      	adds	r2, r7, #3
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2301      	movs	r3, #1
 80013ee:	485e      	ldr	r0, [pc, #376]	; (8001568 <init_MPU+0x418>)
 80013f0:	f002 fe3a 	bl	8004068 <HAL_I2C_Master_Transmit>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f1      	bne.n	80013de <init_MPU+0x28e>
	    	      while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, (uint8_t *)asa,(uint16_t) 3, 1000) != HAL_OK);
 80013fa:	bf00      	nop
 80013fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001400:	b299      	uxth	r1, r3
 8001402:	463a      	mov	r2, r7
 8001404:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2303      	movs	r3, #3
 800140c:	4856      	ldr	r0, [pc, #344]	; (8001568 <init_MPU+0x418>)
 800140e:	f002 ff29 	bl	8004264 <HAL_I2C_Master_Receive>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f1      	bne.n	80013fc <init_MPU+0x2ac>

	    	      asax = (asa[0]-128)*0.5/128+1;
 8001418:	783b      	ldrb	r3, [r7, #0]
 800141a:	3b80      	subs	r3, #128	; 0x80
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f82d 	bl	800047c <__aeabi_i2d>
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	4b51      	ldr	r3, [pc, #324]	; (800156c <init_MPU+0x41c>)
 8001428:	f7ff f892 	bl	8000550 <__aeabi_dmul>
 800142c:	4603      	mov	r3, r0
 800142e:	460c      	mov	r4, r1
 8001430:	4618      	mov	r0, r3
 8001432:	4621      	mov	r1, r4
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	4b4d      	ldr	r3, [pc, #308]	; (8001570 <init_MPU+0x420>)
 800143a:	f7ff f9b3 	bl	80007a4 <__aeabi_ddiv>
 800143e:	4603      	mov	r3, r0
 8001440:	460c      	mov	r4, r1
 8001442:	4618      	mov	r0, r3
 8001444:	4621      	mov	r1, r4
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	4b4a      	ldr	r3, [pc, #296]	; (8001574 <init_MPU+0x424>)
 800144c:	f7fe feca 	bl	80001e4 <__adddf3>
 8001450:	4603      	mov	r3, r0
 8001452:	460c      	mov	r4, r1
 8001454:	4618      	mov	r0, r3
 8001456:	4621      	mov	r1, r4
 8001458:	f7ff fb72 	bl	8000b40 <__aeabi_d2f>
 800145c:	4602      	mov	r2, r0
 800145e:	4b46      	ldr	r3, [pc, #280]	; (8001578 <init_MPU+0x428>)
 8001460:	601a      	str	r2, [r3, #0]
	    	      asay = (asa[1]-128)*0.5/128+1;
 8001462:	787b      	ldrb	r3, [r7, #1]
 8001464:	3b80      	subs	r3, #128	; 0x80
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f808 	bl	800047c <__aeabi_i2d>
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	4b3e      	ldr	r3, [pc, #248]	; (800156c <init_MPU+0x41c>)
 8001472:	f7ff f86d 	bl	8000550 <__aeabi_dmul>
 8001476:	4603      	mov	r3, r0
 8001478:	460c      	mov	r4, r1
 800147a:	4618      	mov	r0, r3
 800147c:	4621      	mov	r1, r4
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <init_MPU+0x420>)
 8001484:	f7ff f98e 	bl	80007a4 <__aeabi_ddiv>
 8001488:	4603      	mov	r3, r0
 800148a:	460c      	mov	r4, r1
 800148c:	4618      	mov	r0, r3
 800148e:	4621      	mov	r1, r4
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	4b37      	ldr	r3, [pc, #220]	; (8001574 <init_MPU+0x424>)
 8001496:	f7fe fea5 	bl	80001e4 <__adddf3>
 800149a:	4603      	mov	r3, r0
 800149c:	460c      	mov	r4, r1
 800149e:	4618      	mov	r0, r3
 80014a0:	4621      	mov	r1, r4
 80014a2:	f7ff fb4d 	bl	8000b40 <__aeabi_d2f>
 80014a6:	4602      	mov	r2, r0
 80014a8:	4b34      	ldr	r3, [pc, #208]	; (800157c <init_MPU+0x42c>)
 80014aa:	601a      	str	r2, [r3, #0]
	    	      asaz = (asa[2]-128)*0.5/128+1;
 80014ac:	78bb      	ldrb	r3, [r7, #2]
 80014ae:	3b80      	subs	r3, #128	; 0x80
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe ffe3 	bl	800047c <__aeabi_i2d>
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	4b2c      	ldr	r3, [pc, #176]	; (800156c <init_MPU+0x41c>)
 80014bc:	f7ff f848 	bl	8000550 <__aeabi_dmul>
 80014c0:	4603      	mov	r3, r0
 80014c2:	460c      	mov	r4, r1
 80014c4:	4618      	mov	r0, r3
 80014c6:	4621      	mov	r1, r4
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b28      	ldr	r3, [pc, #160]	; (8001570 <init_MPU+0x420>)
 80014ce:	f7ff f969 	bl	80007a4 <__aeabi_ddiv>
 80014d2:	4603      	mov	r3, r0
 80014d4:	460c      	mov	r4, r1
 80014d6:	4618      	mov	r0, r3
 80014d8:	4621      	mov	r1, r4
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <init_MPU+0x424>)
 80014e0:	f7fe fe80 	bl	80001e4 <__adddf3>
 80014e4:	4603      	mov	r3, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	4618      	mov	r0, r3
 80014ea:	4621      	mov	r1, r4
 80014ec:	f7ff fb28 	bl	8000b40 <__aeabi_d2f>
 80014f0:	4602      	mov	r2, r0
 80014f2:	4b23      	ldr	r3, [pc, #140]	; (8001580 <init_MPU+0x430>)
 80014f4:	601a      	str	r2, [r3, #0]

	    	      d[0] = CNTL1_AD;
 80014f6:	230a      	movs	r3, #10
 80014f8:	f887 3020 	strb.w	r3, [r7, #32]
	    	      d[1] = zero;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001502:	bf00      	nop
 8001504:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001508:	b299      	uxth	r1, r3
 800150a:	f107 0220 	add.w	r2, r7, #32
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2302      	movs	r3, #2
 8001516:	4814      	ldr	r0, [pc, #80]	; (8001568 <init_MPU+0x418>)
 8001518:	f002 fda6 	bl	8004068 <HAL_I2C_Master_Transmit>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <init_MPU+0x3b4>

	    	      HAL_Delay(100);
 8001522:	2064      	movs	r0, #100	; 0x64
 8001524:	f001 fe92 	bl	800324c <HAL_Delay>

	    	      d[0] = CNTL1_AD;
 8001528:	230a      	movs	r3, #10
 800152a:	f887 3020 	strb.w	r3, [r7, #32]
	    	      d[1] = 0x16;
 800152e:	2316      	movs	r3, #22
 8001530:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001534:	bf00      	nop
 8001536:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800153a:	b299      	uxth	r1, r3
 800153c:	f107 0220 	add.w	r2, r7, #32
 8001540:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2302      	movs	r3, #2
 8001548:	4807      	ldr	r0, [pc, #28]	; (8001568 <init_MPU+0x418>)
 800154a:	f002 fd8d 	bl	8004068 <HAL_I2C_Master_Transmit>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <init_MPU+0x3e6>
	    	      HAL_Delay(100);
 8001554:	2064      	movs	r0, #100	; 0x64
 8001556:	f001 fe79 	bl	800324c <HAL_Delay>
	      }


  return status;
 800155a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800155e:	4618      	mov	r0, r3
 8001560:	372c      	adds	r7, #44	; 0x2c
 8001562:	46bd      	mov	sp, r7
 8001564:	bd90      	pop	{r4, r7, pc}
 8001566:	bf00      	nop
 8001568:	2000012c 	.word	0x2000012c
 800156c:	3fe00000 	.word	0x3fe00000
 8001570:	40600000 	.word	0x40600000
 8001574:	3ff00000 	.word	0x3ff00000
 8001578:	200006d8 	.word	0x200006d8
 800157c:	2000037c 	.word	0x2000037c
 8001580:	200006d0 	.word	0x200006d0
 8001584:	00000000 	.word	0x00000000

08001588 <process_MPU>:
	  Acc_y_  = 0;
	  Acc_z_  = 0;

}

IMU_data process_MPU(uint8_t EKF, uint8_t LPF){
 8001588:	b5b0      	push	{r4, r5, r7, lr}
 800158a:	b090      	sub	sp, #64	; 0x40
 800158c:	af02      	add	r7, sp, #8
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	70fb      	strb	r3, [r7, #3]
 8001594:	4613      	mov	r3, r2
 8001596:	70bb      	strb	r3, [r7, #2]
	IMU_data data_raw;
	uint8_t data[13];

	uint8_t reg = ACCEL_XOUT_H;
 8001598:	233b      	movs	r3, #59	; 0x3b
 800159a:	72fb      	strb	r3, [r7, #11]
	uint8_t device_address = MPU_ADDRESS;
 800159c:	23d0      	movs	r3, #208	; 0xd0
 800159e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK){
 80015a2:	bf00      	nop
 80015a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015a8:	b299      	uxth	r1, r3
 80015aa:	f107 020b 	add.w	r2, r7, #11
 80015ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2301      	movs	r3, #1
 80015b6:	489a      	ldr	r0, [pc, #616]	; (8001820 <process_MPU+0x298>)
 80015b8:	f002 fd56 	bl	8004068 <HAL_I2C_Master_Transmit>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <process_MPU+0x1c>
//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
//			I2C_ClearBusyFlagErratum(&i2c, 10);
//	    }
//	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	}
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK){
 80015c2:	bf00      	nop
 80015c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015c8:	b299      	uxth	r1, r3
 80015ca:	f107 020c 	add.w	r2, r7, #12
 80015ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	230e      	movs	r3, #14
 80015d6:	4892      	ldr	r0, [pc, #584]	; (8001820 <process_MPU+0x298>)
 80015d8:	f002 fe44 	bl	8004264 <HAL_I2C_Master_Receive>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <process_MPU+0x3c>
//					I2C_ClearBusyFlagErratum(&i2c, 10);
//			    }
//			    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	}

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 80015e2:	7b3b      	ldrb	r3, [r7, #12]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	b21a      	sxth	r2, r3
 80015e8:	7b7b      	ldrb	r3, [r7, #13]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f8:	4b8a      	ldr	r3, [pc, #552]	; (8001824 <process_MPU+0x29c>)
 80015fa:	edc3 7a00 	vstr	s15, [r3]
	Acc_y= (int16_t)(data[2] << 8 | data[3]);
 80015fe:	7bbb      	ldrb	r3, [r7, #14]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b21a      	sxth	r2, r3
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	b21b      	sxth	r3, r3
 8001608:	4313      	orrs	r3, r2
 800160a:	b21b      	sxth	r3, r3
 800160c:	ee07 3a90 	vmov	s15, r3
 8001610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001614:	4b84      	ldr	r3, [pc, #528]	; (8001828 <process_MPU+0x2a0>)
 8001616:	edc3 7a00 	vstr	s15, [r3]
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 800161a:	7c3b      	ldrb	r3, [r7, #16]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	b21a      	sxth	r2, r3
 8001620:	7c7b      	ldrb	r3, [r7, #17]
 8001622:	b21b      	sxth	r3, r3
 8001624:	4313      	orrs	r3, r2
 8001626:	b21b      	sxth	r3, r3
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001630:	4b7e      	ldr	r3, [pc, #504]	; (800182c <process_MPU+0x2a4>)
 8001632:	edc3 7a00 	vstr	s15, [r3]

    temp = (int16_t)(data[6] << 8 | data[7]);
 8001636:	7cbb      	ldrb	r3, [r7, #18]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b21a      	sxth	r2, r3
 800163c:	7cfb      	ldrb	r3, [r7, #19]
 800163e:	b21b      	sxth	r3, r3
 8001640:	4313      	orrs	r3, r2
 8001642:	b21b      	sxth	r3, r3
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164c:	4b78      	ldr	r3, [pc, #480]	; (8001830 <process_MPU+0x2a8>)
 800164e:	edc3 7a00 	vstr	s15, [r3]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 8001652:	7d3b      	ldrb	r3, [r7, #20]
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
 8001658:	7d7b      	ldrb	r3, [r7, #21]
 800165a:	b21b      	sxth	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b21b      	sxth	r3, r3
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001668:	4b72      	ldr	r3, [pc, #456]	; (8001834 <process_MPU+0x2ac>)
 800166a:	edc3 7a00 	vstr	s15, [r3]
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 800166e:	7dbb      	ldrb	r3, [r7, #22]
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	b21a      	sxth	r2, r3
 8001674:	7dfb      	ldrb	r3, [r7, #23]
 8001676:	b21b      	sxth	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b21b      	sxth	r3, r3
 800167c:	ee07 3a90 	vmov	s15, r3
 8001680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001684:	4b6c      	ldr	r3, [pc, #432]	; (8001838 <process_MPU+0x2b0>)
 8001686:	edc3 7a00 	vstr	s15, [r3]
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 800168a:	7e3b      	ldrb	r3, [r7, #24]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b21a      	sxth	r2, r3
 8001690:	7e7b      	ldrb	r3, [r7, #25]
 8001692:	b21b      	sxth	r3, r3
 8001694:	4313      	orrs	r3, r2
 8001696:	b21b      	sxth	r3, r3
 8001698:	ee07 3a90 	vmov	s15, r3
 800169c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a0:	4b66      	ldr	r3, [pc, #408]	; (800183c <process_MPU+0x2b4>)
 80016a2:	edc3 7a00 	vstr	s15, [r3]

	Acc_x= (Acc_x)/16384.0 - bAx ;
 80016a6:	4b5f      	ldr	r3, [pc, #380]	; (8001824 <process_MPU+0x29c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe fef8 	bl	80004a0 <__aeabi_f2d>
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b62      	ldr	r3, [pc, #392]	; (8001840 <process_MPU+0x2b8>)
 80016b6:	f7ff f875 	bl	80007a4 <__aeabi_ddiv>
 80016ba:	4603      	mov	r3, r0
 80016bc:	460c      	mov	r4, r1
 80016be:	4618      	mov	r0, r3
 80016c0:	4621      	mov	r1, r4
 80016c2:	4b60      	ldr	r3, [pc, #384]	; (8001844 <process_MPU+0x2bc>)
 80016c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4623      	mov	r3, r4
 80016cc:	f7fe fd88 	bl	80001e0 <__aeabi_dsub>
 80016d0:	4603      	mov	r3, r0
 80016d2:	460c      	mov	r4, r1
 80016d4:	4618      	mov	r0, r3
 80016d6:	4621      	mov	r1, r4
 80016d8:	f7ff fa32 	bl	8000b40 <__aeabi_d2f>
 80016dc:	4602      	mov	r2, r0
 80016de:	4b51      	ldr	r3, [pc, #324]	; (8001824 <process_MPU+0x29c>)
 80016e0:	601a      	str	r2, [r3, #0]
	Acc_y = (Acc_y)/16384.0 - bAy;
 80016e2:	4b51      	ldr	r3, [pc, #324]	; (8001828 <process_MPU+0x2a0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe feda 	bl	80004a0 <__aeabi_f2d>
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	4b53      	ldr	r3, [pc, #332]	; (8001840 <process_MPU+0x2b8>)
 80016f2:	f7ff f857 	bl	80007a4 <__aeabi_ddiv>
 80016f6:	4603      	mov	r3, r0
 80016f8:	460c      	mov	r4, r1
 80016fa:	4618      	mov	r0, r3
 80016fc:	4621      	mov	r1, r4
 80016fe:	4b52      	ldr	r3, [pc, #328]	; (8001848 <process_MPU+0x2c0>)
 8001700:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001704:	461a      	mov	r2, r3
 8001706:	4623      	mov	r3, r4
 8001708:	f7fe fd6a 	bl	80001e0 <__aeabi_dsub>
 800170c:	4603      	mov	r3, r0
 800170e:	460c      	mov	r4, r1
 8001710:	4618      	mov	r0, r3
 8001712:	4621      	mov	r1, r4
 8001714:	f7ff fa14 	bl	8000b40 <__aeabi_d2f>
 8001718:	4602      	mov	r2, r0
 800171a:	4b43      	ldr	r3, [pc, #268]	; (8001828 <process_MPU+0x2a0>)
 800171c:	601a      	str	r2, [r3, #0]
	Acc_z = (Acc_z)/16384.0 + bAz;
 800171e:	4b43      	ldr	r3, [pc, #268]	; (800182c <process_MPU+0x2a4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe febc 	bl	80004a0 <__aeabi_f2d>
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	4b44      	ldr	r3, [pc, #272]	; (8001840 <process_MPU+0x2b8>)
 800172e:	f7ff f839 	bl	80007a4 <__aeabi_ddiv>
 8001732:	4603      	mov	r3, r0
 8001734:	460c      	mov	r4, r1
 8001736:	4618      	mov	r0, r3
 8001738:	4621      	mov	r1, r4
 800173a:	4b44      	ldr	r3, [pc, #272]	; (800184c <process_MPU+0x2c4>)
 800173c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001740:	461a      	mov	r2, r3
 8001742:	4623      	mov	r3, r4
 8001744:	f7fe fd4e 	bl	80001e4 <__adddf3>
 8001748:	4603      	mov	r3, r0
 800174a:	460c      	mov	r4, r1
 800174c:	4618      	mov	r0, r3
 800174e:	4621      	mov	r1, r4
 8001750:	f7ff f9f6 	bl	8000b40 <__aeabi_d2f>
 8001754:	4602      	mov	r2, r0
 8001756:	4b35      	ldr	r3, [pc, #212]	; (800182c <process_MPU+0x2a4>)
 8001758:	601a      	str	r2, [r3, #0]
    if(!EKF){
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d17d      	bne.n	800185c <process_MPU+0x2d4>
	Gyro_x = (Gyro_x )/16.4- bGx;
 8001760:	4b34      	ldr	r3, [pc, #208]	; (8001834 <process_MPU+0x2ac>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fe9b 	bl	80004a0 <__aeabi_f2d>
 800176a:	a32b      	add	r3, pc, #172	; (adr r3, 8001818 <process_MPU+0x290>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	f7ff f818 	bl	80007a4 <__aeabi_ddiv>
 8001774:	4603      	mov	r3, r0
 8001776:	460c      	mov	r4, r1
 8001778:	4618      	mov	r0, r3
 800177a:	4621      	mov	r1, r4
 800177c:	4b34      	ldr	r3, [pc, #208]	; (8001850 <process_MPU+0x2c8>)
 800177e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001782:	461a      	mov	r2, r3
 8001784:	4623      	mov	r3, r4
 8001786:	f7fe fd2b 	bl	80001e0 <__aeabi_dsub>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	4618      	mov	r0, r3
 8001790:	4621      	mov	r1, r4
 8001792:	f7ff f9d5 	bl	8000b40 <__aeabi_d2f>
 8001796:	4602      	mov	r2, r0
 8001798:	4b26      	ldr	r3, [pc, #152]	; (8001834 <process_MPU+0x2ac>)
 800179a:	601a      	str	r2, [r3, #0]
	Gyro_y = (Gyro_y)/16.4- bGy;
 800179c:	4b26      	ldr	r3, [pc, #152]	; (8001838 <process_MPU+0x2b0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fe7d 	bl	80004a0 <__aeabi_f2d>
 80017a6:	a31c      	add	r3, pc, #112	; (adr r3, 8001818 <process_MPU+0x290>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7fe fffa 	bl	80007a4 <__aeabi_ddiv>
 80017b0:	4603      	mov	r3, r0
 80017b2:	460c      	mov	r4, r1
 80017b4:	4618      	mov	r0, r3
 80017b6:	4621      	mov	r1, r4
 80017b8:	4b26      	ldr	r3, [pc, #152]	; (8001854 <process_MPU+0x2cc>)
 80017ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017be:	461a      	mov	r2, r3
 80017c0:	4623      	mov	r3, r4
 80017c2:	f7fe fd0d 	bl	80001e0 <__aeabi_dsub>
 80017c6:	4603      	mov	r3, r0
 80017c8:	460c      	mov	r4, r1
 80017ca:	4618      	mov	r0, r3
 80017cc:	4621      	mov	r1, r4
 80017ce:	f7ff f9b7 	bl	8000b40 <__aeabi_d2f>
 80017d2:	4602      	mov	r2, r0
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <process_MPU+0x2b0>)
 80017d6:	601a      	str	r2, [r3, #0]
	Gyro_z = (Gyro_z )/16.4- bGz;
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <process_MPU+0x2b4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fe5f 	bl	80004a0 <__aeabi_f2d>
 80017e2:	a30d      	add	r3, pc, #52	; (adr r3, 8001818 <process_MPU+0x290>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7fe ffdc 	bl	80007a4 <__aeabi_ddiv>
 80017ec:	4603      	mov	r3, r0
 80017ee:	460c      	mov	r4, r1
 80017f0:	4618      	mov	r0, r3
 80017f2:	4621      	mov	r1, r4
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <process_MPU+0x2d0>)
 80017f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017fa:	461a      	mov	r2, r3
 80017fc:	4623      	mov	r3, r4
 80017fe:	f7fe fcef 	bl	80001e0 <__aeabi_dsub>
 8001802:	4603      	mov	r3, r0
 8001804:	460c      	mov	r4, r1
 8001806:	4618      	mov	r0, r3
 8001808:	4621      	mov	r1, r4
 800180a:	f7ff f999 	bl	8000b40 <__aeabi_d2f>
 800180e:	4602      	mov	r2, r0
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <process_MPU+0x2b4>)
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e05b      	b.n	80018ce <process_MPU+0x346>
 8001816:	bf00      	nop
 8001818:	66666666 	.word	0x66666666
 800181c:	40306666 	.word	0x40306666
 8001820:	2000012c 	.word	0x2000012c
 8001824:	2000031c 	.word	0x2000031c
 8001828:	200001bc 	.word	0x200001bc
 800182c:	200000bc 	.word	0x200000bc
 8001830:	200001e8 	.word	0x200001e8
 8001834:	200000d0 	.word	0x200000d0
 8001838:	20000680 	.word	0x20000680
 800183c:	200002c0 	.word	0x200002c0
 8001840:	40d00000 	.word	0x40d00000
 8001844:	200005c8 	.word	0x200005c8
 8001848:	20000328 	.word	0x20000328
 800184c:	200006b0 	.word	0x200006b0
 8001850:	200003d0 	.word	0x200003d0
 8001854:	20000188 	.word	0x20000188
 8001858:	200006b8 	.word	0x200006b8
    }
    else{
    	Gyro_x = (Gyro_x )/16.4;
 800185c:	4b30      	ldr	r3, [pc, #192]	; (8001920 <process_MPU+0x398>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fe1d 	bl	80004a0 <__aeabi_f2d>
 8001866:	a32c      	add	r3, pc, #176	; (adr r3, 8001918 <process_MPU+0x390>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe ff9a 	bl	80007a4 <__aeabi_ddiv>
 8001870:	4603      	mov	r3, r0
 8001872:	460c      	mov	r4, r1
 8001874:	4618      	mov	r0, r3
 8001876:	4621      	mov	r1, r4
 8001878:	f7ff f962 	bl	8000b40 <__aeabi_d2f>
 800187c:	4602      	mov	r2, r0
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <process_MPU+0x398>)
 8001880:	601a      	str	r2, [r3, #0]
    	Gyro_y = (Gyro_y )/16.4;
 8001882:	4b28      	ldr	r3, [pc, #160]	; (8001924 <process_MPU+0x39c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fe0a 	bl	80004a0 <__aeabi_f2d>
 800188c:	a322      	add	r3, pc, #136	; (adr r3, 8001918 <process_MPU+0x390>)
 800188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001892:	f7fe ff87 	bl	80007a4 <__aeabi_ddiv>
 8001896:	4603      	mov	r3, r0
 8001898:	460c      	mov	r4, r1
 800189a:	4618      	mov	r0, r3
 800189c:	4621      	mov	r1, r4
 800189e:	f7ff f94f 	bl	8000b40 <__aeabi_d2f>
 80018a2:	4602      	mov	r2, r0
 80018a4:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <process_MPU+0x39c>)
 80018a6:	601a      	str	r2, [r3, #0]
    	Gyro_z = (Gyro_z )/16.4;
 80018a8:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <process_MPU+0x3a0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fdf7 	bl	80004a0 <__aeabi_f2d>
 80018b2:	a319      	add	r3, pc, #100	; (adr r3, 8001918 <process_MPU+0x390>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f7fe ff74 	bl	80007a4 <__aeabi_ddiv>
 80018bc:	4603      	mov	r3, r0
 80018be:	460c      	mov	r4, r1
 80018c0:	4618      	mov	r0, r3
 80018c2:	4621      	mov	r1, r4
 80018c4:	f7ff f93c 	bl	8000b40 <__aeabi_d2f>
 80018c8:	4602      	mov	r2, r0
 80018ca:	4b17      	ldr	r3, [pc, #92]	; (8001928 <process_MPU+0x3a0>)
 80018cc:	601a      	str	r2, [r3, #0]
    }

    if(!LPF){
 80018ce:	78bb      	ldrb	r3, [r7, #2]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d111      	bne.n	80018f8 <process_MPU+0x370>
		data_raw.Gyro_x = Gyro_x;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <process_MPU+0x398>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	61fb      	str	r3, [r7, #28]
		data_raw.Gyro_y = Gyro_y;
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <process_MPU+0x39c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	623b      	str	r3, [r7, #32]
		data_raw.Gyro_z = Gyro_z;
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <process_MPU+0x3a0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
		data_raw.Acc_x = Acc_x;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <process_MPU+0x3a4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
		data_raw.Acc_y = Acc_y;
 80018ec:	4b10      	ldr	r3, [pc, #64]	; (8001930 <process_MPU+0x3a8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		data_raw.Acc_z = Acc_z;
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <process_MPU+0x3ac>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
    }

    return data_raw;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	461d      	mov	r5, r3
 80018fc:	f107 041c 	add.w	r4, r7, #28
 8001900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001904:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001908:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	3738      	adds	r7, #56	; 0x38
 8001910:	46bd      	mov	sp, r7
 8001912:	bdb0      	pop	{r4, r5, r7, pc}
 8001914:	f3af 8000 	nop.w
 8001918:	66666666 	.word	0x66666666
 800191c:	40306666 	.word	0x40306666
 8001920:	200000d0 	.word	0x200000d0
 8001924:	20000680 	.word	0x20000680
 8001928:	200002c0 	.word	0x200002c0
 800192c:	2000031c 	.word	0x2000031c
 8001930:	200001bc 	.word	0x200001bc
 8001934:	200000bc 	.word	0x200000bc

08001938 <magnet_get_raw>:


MAG_data magnet_get_raw(){
 8001938:	b580      	push	{r7, lr}
 800193a:	b090      	sub	sp, #64	; 0x40
 800193c:	af02      	add	r7, sp, #8
	MAG_data temp;
	uint8_t mag_data[7];

	uint8_t status;
	uint8_t reg = ACCEL_XOUT_H;
 800193e:	233b      	movs	r3, #59	; 0x3b
 8001940:	74bb      	strb	r3, [r7, #18]
	uint8_t magnet_address = MAG_ADRRESS;
 8001942:	2318      	movs	r3, #24
 8001944:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 reg = 0x02;
 8001948:	2302      	movs	r3, #2
 800194a:	74bb      	strb	r3, [r7, #18]
		while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &reg, 1, 1000) != HAL_OK);
 800194c:	bf00      	nop
 800194e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001952:	b299      	uxth	r1, r3
 8001954:	f107 0212 	add.w	r2, r7, #18
 8001958:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2301      	movs	r3, #1
 8001960:	4843      	ldr	r0, [pc, #268]	; (8001a70 <magnet_get_raw+0x138>)
 8001962:	f002 fb81 	bl	8004068 <HAL_I2C_Master_Transmit>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f0      	bne.n	800194e <magnet_get_raw+0x16>
		while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &status,1, 1000) != HAL_OK);
 800196c:	bf00      	nop
 800196e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001972:	b299      	uxth	r1, r3
 8001974:	f107 0213 	add.w	r2, r7, #19
 8001978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2301      	movs	r3, #1
 8001980:	483b      	ldr	r0, [pc, #236]	; (8001a70 <magnet_get_raw+0x138>)
 8001982:	f002 fc6f 	bl	8004264 <HAL_I2C_Master_Receive>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f0      	bne.n	800196e <magnet_get_raw+0x36>
	    if(status == 3){
 800198c:	7cfb      	ldrb	r3, [r7, #19]
 800198e:	2b03      	cmp	r3, #3
 8001990:	d14b      	bne.n	8001a2a <magnet_get_raw+0xf2>
	    	reg = 0x03;
 8001992:	2303      	movs	r3, #3
 8001994:	74bb      	strb	r3, [r7, #18]
	    	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &reg, 1, 1000) != HAL_OK);
 8001996:	bf00      	nop
 8001998:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800199c:	b299      	uxth	r1, r3
 800199e:	f107 0212 	add.w	r2, r7, #18
 80019a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2301      	movs	r3, #1
 80019aa:	4831      	ldr	r0, [pc, #196]	; (8001a70 <magnet_get_raw+0x138>)
 80019ac:	f002 fb5c 	bl	8004068 <HAL_I2C_Master_Transmit>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <magnet_get_raw+0x60>
	    	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, (uint8_t *)mag_data,7, 1000) != HAL_OK);
 80019b6:	bf00      	nop
 80019b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80019bc:	b299      	uxth	r1, r3
 80019be:	f107 0214 	add.w	r2, r7, #20
 80019c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2307      	movs	r3, #7
 80019ca:	4829      	ldr	r0, [pc, #164]	; (8001a70 <magnet_get_raw+0x138>)
 80019cc:	f002 fc4a 	bl	8004264 <HAL_I2C_Master_Receive>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <magnet_get_raw+0x80>
	//    	if(!(mag_data[6]|MAGIC_OVERFLOW_MASK)){
	    		Mag_x = (int16_t)(mag_data[0] | (mag_data[1]<<8));
 80019d6:	7d3b      	ldrb	r3, [r7, #20]
 80019d8:	b21a      	sxth	r2, r3
 80019da:	7d7b      	ldrb	r3, [r7, #21]
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	b21b      	sxth	r3, r3
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <magnet_get_raw+0x13c>)
 80019ee:	edc3 7a00 	vstr	s15, [r3]
	    		Mag_y = (int16_t)(mag_data[2] | (mag_data[3]<<8));
 80019f2:	7dbb      	ldrb	r3, [r7, #22]
 80019f4:	b21a      	sxth	r2, r3
 80019f6:	7dfb      	ldrb	r3, [r7, #23]
 80019f8:	021b      	lsls	r3, r3, #8
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b21b      	sxth	r3, r3
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <magnet_get_raw+0x140>)
 8001a0a:	edc3 7a00 	vstr	s15, [r3]
	    		Mag_z = (int16_t)(mag_data[4] | (mag_data[5]<<8));
 8001a0e:	7e3b      	ldrb	r3, [r7, #24]
 8001a10:	b21a      	sxth	r2, r3
 8001a12:	7e7b      	ldrb	r3, [r7, #25]
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	b21b      	sxth	r3, r3
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	ee07 3a90 	vmov	s15, r3
 8001a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <magnet_get_raw+0x144>)
 8001a26:	edc3 7a00 	vstr	s15, [r3]
	}
	    temp.Mag_x = Mag_x;
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <magnet_get_raw+0x13c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	61fb      	str	r3, [r7, #28]
	    temp.Mag_y = Mag_y;
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <magnet_get_raw+0x140>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	623b      	str	r3, [r7, #32]
	    temp.Mag_z = Mag_z;
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <magnet_get_raw+0x144>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
	    return temp;
 8001a3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a40:	f107 021c 	add.w	r2, r7, #28
 8001a44:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a50:	ee06 1a90 	vmov	s13, r1
 8001a54:	ee07 2a10 	vmov	s14, r2
 8001a58:	ee07 3a90 	vmov	s15, r3
}
 8001a5c:	eeb0 0a66 	vmov.f32	s0, s13
 8001a60:	eef0 0a47 	vmov.f32	s1, s14
 8001a64:	eeb0 1a67 	vmov.f32	s2, s15
 8001a68:	3738      	adds	r7, #56	; 0x38
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	2000012c 	.word	0x2000012c
 8001a74:	200002d0 	.word	0x200002d0
 8001a78:	20000430 	.word	0x20000430
 8001a7c:	200002a4 	.word	0x200002a4

08001a80 <calibration_IMU>:
		angle_e.roll = r*RAD2DEC;
		angle_e.pitch = p*RAD2DEC;
		angle_e.yaw = y*RAD2DEC;
		return angle_e;
}
IMU_calib_data calibration_IMU(){
 8001a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a82:	b099      	sub	sp, #100	; 0x64
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	6078      	str	r0, [r7, #4]
	    IMU_calib_data data_;
    /*This function is performed when the sensor is fully stationary, we assume that MPU has been inited*/
//	    print_msg("Calibrating the sensor....\n");
		uint8_t data[13];
		uint8_t reg = ACCEL_XOUT_H;
 8001a88:	233b      	movs	r3, #59	; 0x3b
 8001a8a:	73fb      	strb	r3, [r7, #15]
		uint8_t device_address = MPU_ADDRESS;
 8001a8c:	23d0      	movs	r3, #208	; 0xd0
 8001a8e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        for(int i = 0; i<200; i++){
 8001a92:	2300      	movs	r3, #0
 8001a94:	657b      	str	r3, [r7, #84]	; 0x54
 8001a96:	e137      	b.n	8001d08 <calibration_IMU+0x288>

		while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 8001a98:	bf00      	nop
 8001a9a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001a9e:	b299      	uxth	r1, r3
 8001aa0:	f107 020f 	add.w	r2, r7, #15
 8001aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	48b0      	ldr	r0, [pc, #704]	; (8001d70 <calibration_IMU+0x2f0>)
 8001aae:	f002 fadb 	bl	8004068 <HAL_I2C_Master_Transmit>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f0      	bne.n	8001a9a <calibration_IMU+0x1a>
		while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 8001ab8:	bf00      	nop
 8001aba:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001abe:	b299      	uxth	r1, r3
 8001ac0:	f107 0210 	add.w	r2, r7, #16
 8001ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	230e      	movs	r3, #14
 8001acc:	48a8      	ldr	r0, [pc, #672]	; (8001d70 <calibration_IMU+0x2f0>)
 8001ace:	f002 fbc9 	bl	8004264 <HAL_I2C_Master_Receive>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1f0      	bne.n	8001aba <calibration_IMU+0x3a>

		Acc_x = (int16_t)(data[0] << 8 | data[1])/accel_factor;
 8001ad8:	7c3b      	ldrb	r3, [r7, #16]
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	b21a      	sxth	r2, r3
 8001ade:	7c7b      	ldrb	r3, [r7, #17]
 8001ae0:	b21b      	sxth	r3, r3
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	b21b      	sxth	r3, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fcc8 	bl	800047c <__aeabi_i2d>
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	4ba0      	ldr	r3, [pc, #640]	; (8001d74 <calibration_IMU+0x2f4>)
 8001af2:	f7fe fe57 	bl	80007a4 <__aeabi_ddiv>
 8001af6:	4603      	mov	r3, r0
 8001af8:	460c      	mov	r4, r1
 8001afa:	4618      	mov	r0, r3
 8001afc:	4621      	mov	r1, r4
 8001afe:	f7ff f81f 	bl	8000b40 <__aeabi_d2f>
 8001b02:	4602      	mov	r2, r0
 8001b04:	4b9c      	ldr	r3, [pc, #624]	; (8001d78 <calibration_IMU+0x2f8>)
 8001b06:	601a      	str	r2, [r3, #0]
		Acc_y = (int16_t)(data[2] << 8 | data[3])/accel_factor;
 8001b08:	7cbb      	ldrb	r3, [r7, #18]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	7cfb      	ldrb	r3, [r7, #19]
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	4313      	orrs	r3, r2
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fcb0 	bl	800047c <__aeabi_i2d>
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	4b94      	ldr	r3, [pc, #592]	; (8001d74 <calibration_IMU+0x2f4>)
 8001b22:	f7fe fe3f 	bl	80007a4 <__aeabi_ddiv>
 8001b26:	4603      	mov	r3, r0
 8001b28:	460c      	mov	r4, r1
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	f7ff f807 	bl	8000b40 <__aeabi_d2f>
 8001b32:	4602      	mov	r2, r0
 8001b34:	4b91      	ldr	r3, [pc, #580]	; (8001d7c <calibration_IMU+0x2fc>)
 8001b36:	601a      	str	r2, [r3, #0]
		Acc_z = (int16_t)(data[4] << 8 | data[5])/accel_factor;
 8001b38:	7d3b      	ldrb	r3, [r7, #20]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	b21a      	sxth	r2, r3
 8001b3e:	7d7b      	ldrb	r3, [r7, #21]
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fc98 	bl	800047c <__aeabi_i2d>
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	4b88      	ldr	r3, [pc, #544]	; (8001d74 <calibration_IMU+0x2f4>)
 8001b52:	f7fe fe27 	bl	80007a4 <__aeabi_ddiv>
 8001b56:	4603      	mov	r3, r0
 8001b58:	460c      	mov	r4, r1
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	f7fe ffef 	bl	8000b40 <__aeabi_d2f>
 8001b62:	4602      	mov	r2, r0
 8001b64:	4b86      	ldr	r3, [pc, #536]	; (8001d80 <calibration_IMU+0x300>)
 8001b66:	601a      	str	r2, [r3, #0]

	    temp = (int16_t)(data[6] << 8 | data[7]);
 8001b68:	7dbb      	ldrb	r3, [r7, #22]
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	b21b      	sxth	r3, r3
 8001b72:	4313      	orrs	r3, r2
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7e:	4b81      	ldr	r3, [pc, #516]	; (8001d84 <calibration_IMU+0x304>)
 8001b80:	edc3 7a00 	vstr	s15, [r3]

	    Gyro_x = (int16_t)(data[8] << 8 | data[9])/gyro_factor;
 8001b84:	7e3b      	ldrb	r3, [r7, #24]
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	b21a      	sxth	r2, r3
 8001b8a:	7e7b      	ldrb	r3, [r7, #25]
 8001b8c:	b21b      	sxth	r3, r3
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fc72 	bl	800047c <__aeabi_i2d>
 8001b98:	a373      	add	r3, pc, #460	; (adr r3, 8001d68 <calibration_IMU+0x2e8>)
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	f7fe fe01 	bl	80007a4 <__aeabi_ddiv>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	460c      	mov	r4, r1
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	4621      	mov	r1, r4
 8001baa:	f7fe ffc9 	bl	8000b40 <__aeabi_d2f>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	4b75      	ldr	r3, [pc, #468]	; (8001d88 <calibration_IMU+0x308>)
 8001bb2:	601a      	str	r2, [r3, #0]
	    Gyro_y = (int16_t)(data[10] << 8 | data[11])/gyro_factor;
 8001bb4:	7ebb      	ldrb	r3, [r7, #26]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	b21a      	sxth	r2, r3
 8001bba:	7efb      	ldrb	r3, [r7, #27]
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	b21b      	sxth	r3, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fc5a 	bl	800047c <__aeabi_i2d>
 8001bc8:	a367      	add	r3, pc, #412	; (adr r3, 8001d68 <calibration_IMU+0x2e8>)
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	f7fe fde9 	bl	80007a4 <__aeabi_ddiv>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	460c      	mov	r4, r1
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	4621      	mov	r1, r4
 8001bda:	f7fe ffb1 	bl	8000b40 <__aeabi_d2f>
 8001bde:	4602      	mov	r2, r0
 8001be0:	4b6a      	ldr	r3, [pc, #424]	; (8001d8c <calibration_IMU+0x30c>)
 8001be2:	601a      	str	r2, [r3, #0]
	    Gyro_z = (int16_t)(data[12] << 8 | data[13])/gyro_factor;
 8001be4:	7f3b      	ldrb	r3, [r7, #28]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	7f7b      	ldrb	r3, [r7, #29]
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fc42 	bl	800047c <__aeabi_i2d>
 8001bf8:	a35b      	add	r3, pc, #364	; (adr r3, 8001d68 <calibration_IMU+0x2e8>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	f7fe fdd1 	bl	80007a4 <__aeabi_ddiv>
 8001c02:	4603      	mov	r3, r0
 8001c04:	460c      	mov	r4, r1
 8001c06:	4618      	mov	r0, r3
 8001c08:	4621      	mov	r1, r4
 8001c0a:	f7fe ff99 	bl	8000b40 <__aeabi_d2f>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	4b5f      	ldr	r3, [pc, #380]	; (8001d90 <calibration_IMU+0x310>)
 8001c12:	601a      	str	r2, [r3, #0]

	    bAx += Acc_x;
 8001c14:	4b58      	ldr	r3, [pc, #352]	; (8001d78 <calibration_IMU+0x2f8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc41 	bl	80004a0 <__aeabi_f2d>
 8001c1e:	4b5d      	ldr	r3, [pc, #372]	; (8001d94 <calibration_IMU+0x314>)
 8001c20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4623      	mov	r3, r4
 8001c28:	f7fe fadc 	bl	80001e4 <__adddf3>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	460c      	mov	r4, r1
 8001c30:	4a58      	ldr	r2, [pc, #352]	; (8001d94 <calibration_IMU+0x314>)
 8001c32:	e9c2 3400 	strd	r3, r4, [r2]
	    bAy += Acc_y;
 8001c36:	4b51      	ldr	r3, [pc, #324]	; (8001d7c <calibration_IMU+0x2fc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc30 	bl	80004a0 <__aeabi_f2d>
 8001c40:	4b55      	ldr	r3, [pc, #340]	; (8001d98 <calibration_IMU+0x318>)
 8001c42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c46:	461a      	mov	r2, r3
 8001c48:	4623      	mov	r3, r4
 8001c4a:	f7fe facb 	bl	80001e4 <__adddf3>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460c      	mov	r4, r1
 8001c52:	4a51      	ldr	r2, [pc, #324]	; (8001d98 <calibration_IMU+0x318>)
 8001c54:	e9c2 3400 	strd	r3, r4, [r2]
	    bAz += Acc_z;
 8001c58:	4b49      	ldr	r3, [pc, #292]	; (8001d80 <calibration_IMU+0x300>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc1f 	bl	80004a0 <__aeabi_f2d>
 8001c62:	4b4e      	ldr	r3, [pc, #312]	; (8001d9c <calibration_IMU+0x31c>)
 8001c64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	f7fe faba 	bl	80001e4 <__adddf3>
 8001c70:	4603      	mov	r3, r0
 8001c72:	460c      	mov	r4, r1
 8001c74:	4a49      	ldr	r2, [pc, #292]	; (8001d9c <calibration_IMU+0x31c>)
 8001c76:	e9c2 3400 	strd	r3, r4, [r2]

	    bGx += Gyro_x;
 8001c7a:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <calibration_IMU+0x308>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fc0e 	bl	80004a0 <__aeabi_f2d>
 8001c84:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <calibration_IMU+0x320>)
 8001c86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4623      	mov	r3, r4
 8001c8e:	f7fe faa9 	bl	80001e4 <__adddf3>
 8001c92:	4603      	mov	r3, r0
 8001c94:	460c      	mov	r4, r1
 8001c96:	4a42      	ldr	r2, [pc, #264]	; (8001da0 <calibration_IMU+0x320>)
 8001c98:	e9c2 3400 	strd	r3, r4, [r2]
	    bGy += Gyro_y;
 8001c9c:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <calibration_IMU+0x30c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fbfd 	bl	80004a0 <__aeabi_f2d>
 8001ca6:	4b3f      	ldr	r3, [pc, #252]	; (8001da4 <calibration_IMU+0x324>)
 8001ca8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4623      	mov	r3, r4
 8001cb0:	f7fe fa98 	bl	80001e4 <__adddf3>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	460c      	mov	r4, r1
 8001cb8:	4a3a      	ldr	r2, [pc, #232]	; (8001da4 <calibration_IMU+0x324>)
 8001cba:	e9c2 3400 	strd	r3, r4, [r2]
	    bGz += Gyro_z;
 8001cbe:	4b34      	ldr	r3, [pc, #208]	; (8001d90 <calibration_IMU+0x310>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fbec 	bl	80004a0 <__aeabi_f2d>
 8001cc8:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <calibration_IMU+0x328>)
 8001cca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4623      	mov	r3, r4
 8001cd2:	f7fe fa87 	bl	80001e4 <__adddf3>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460c      	mov	r4, r1
 8001cda:	4a33      	ldr	r2, [pc, #204]	; (8001da8 <calibration_IMU+0x328>)
 8001cdc:	e9c2 3400 	strd	r3, r4, [r2]
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001ce0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ce4:	4831      	ldr	r0, [pc, #196]	; (8001dac <calibration_IMU+0x32c>)
 8001ce6:	f002 f86c 	bl	8003dc2 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001cea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cee:	482f      	ldr	r0, [pc, #188]	; (8001dac <calibration_IMU+0x32c>)
 8001cf0:	f002 f867 	bl	8003dc2 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	482d      	ldr	r0, [pc, #180]	; (8001dac <calibration_IMU+0x32c>)
 8001cf8:	f002 f863 	bl	8003dc2 <HAL_GPIO_TogglePin>
	    HAL_Delay(30);
 8001cfc:	201e      	movs	r0, #30
 8001cfe:	f001 faa5 	bl	800324c <HAL_Delay>
        for(int i = 0; i<200; i++){
 8001d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d04:	3301      	adds	r3, #1
 8001d06:	657b      	str	r3, [r7, #84]	; 0x54
 8001d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0a:	2bc7      	cmp	r3, #199	; 0xc7
 8001d0c:	f77f aec4 	ble.w	8001a98 <calibration_IMU+0x18>
        }

     bAx /= 200;
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <calibration_IMU+0x314>)
 8001d12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <calibration_IMU+0x330>)
 8001d1c:	f7fe fd42 	bl	80007a4 <__aeabi_ddiv>
 8001d20:	4603      	mov	r3, r0
 8001d22:	460c      	mov	r4, r1
 8001d24:	4a1b      	ldr	r2, [pc, #108]	; (8001d94 <calibration_IMU+0x314>)
 8001d26:	e9c2 3400 	strd	r3, r4, [r2]
     bAy /= 200;
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <calibration_IMU+0x318>)
 8001d2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <calibration_IMU+0x330>)
 8001d36:	f7fe fd35 	bl	80007a4 <__aeabi_ddiv>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	460c      	mov	r4, r1
 8001d3e:	4a16      	ldr	r2, [pc, #88]	; (8001d98 <calibration_IMU+0x318>)
 8001d40:	e9c2 3400 	strd	r3, r4, [r2]
     bAz /= 200;
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <calibration_IMU+0x31c>)
 8001d46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <calibration_IMU+0x330>)
 8001d50:	f7fe fd28 	bl	80007a4 <__aeabi_ddiv>
 8001d54:	4603      	mov	r3, r0
 8001d56:	460c      	mov	r4, r1
 8001d58:	4a10      	ldr	r2, [pc, #64]	; (8001d9c <calibration_IMU+0x31c>)
 8001d5a:	e9c2 3400 	strd	r3, r4, [r2]
     g = sqrt(bAx*bAx + bAy*bAy + bAz*bAz);
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <calibration_IMU+0x314>)
 8001d60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <calibration_IMU+0x314>)
 8001d66:	e025      	b.n	8001db4 <calibration_IMU+0x334>
 8001d68:	66666666 	.word	0x66666666
 8001d6c:	40306666 	.word	0x40306666
 8001d70:	2000012c 	.word	0x2000012c
 8001d74:	40d00000 	.word	0x40d00000
 8001d78:	2000031c 	.word	0x2000031c
 8001d7c:	200001bc 	.word	0x200001bc
 8001d80:	200000bc 	.word	0x200000bc
 8001d84:	200001e8 	.word	0x200001e8
 8001d88:	200000d0 	.word	0x200000d0
 8001d8c:	20000680 	.word	0x20000680
 8001d90:	200002c0 	.word	0x200002c0
 8001d94:	200005c8 	.word	0x200005c8
 8001d98:	20000328 	.word	0x20000328
 8001d9c:	200006b0 	.word	0x200006b0
 8001da0:	200003d0 	.word	0x200003d0
 8001da4:	20000188 	.word	0x20000188
 8001da8:	200006b8 	.word	0x200006b8
 8001dac:	40020400 	.word	0x40020400
 8001db0:	40690000 	.word	0x40690000
 8001db4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4623      	mov	r3, r4
 8001dbc:	f7fe fbc8 	bl	8000550 <__aeabi_dmul>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	460c      	mov	r4, r1
 8001dc4:	461d      	mov	r5, r3
 8001dc6:	4626      	mov	r6, r4
 8001dc8:	4b7d      	ldr	r3, [pc, #500]	; (8001fc0 <calibration_IMU+0x540>)
 8001dca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dce:	4b7c      	ldr	r3, [pc, #496]	; (8001fc0 <calibration_IMU+0x540>)
 8001dd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	f7fe fbba 	bl	8000550 <__aeabi_dmul>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	460c      	mov	r4, r1
 8001de0:	461a      	mov	r2, r3
 8001de2:	4623      	mov	r3, r4
 8001de4:	4628      	mov	r0, r5
 8001de6:	4631      	mov	r1, r6
 8001de8:	f7fe f9fc 	bl	80001e4 <__adddf3>
 8001dec:	4603      	mov	r3, r0
 8001dee:	460c      	mov	r4, r1
 8001df0:	461d      	mov	r5, r3
 8001df2:	4626      	mov	r6, r4
 8001df4:	4b73      	ldr	r3, [pc, #460]	; (8001fc4 <calibration_IMU+0x544>)
 8001df6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dfa:	4b72      	ldr	r3, [pc, #456]	; (8001fc4 <calibration_IMU+0x544>)
 8001dfc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4623      	mov	r3, r4
 8001e04:	f7fe fba4 	bl	8000550 <__aeabi_dmul>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	460c      	mov	r4, r1
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4623      	mov	r3, r4
 8001e10:	4628      	mov	r0, r5
 8001e12:	4631      	mov	r1, r6
 8001e14:	f7fe f9e6 	bl	80001e4 <__adddf3>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	460c      	mov	r4, r1
 8001e1c:	ec44 3b17 	vmov	d7, r3, r4
 8001e20:	eeb0 0a47 	vmov.f32	s0, s14
 8001e24:	eef0 0a67 	vmov.f32	s1, s15
 8001e28:	f005 f9b0 	bl	800718c <sqrt>
 8001e2c:	eeb0 7a40 	vmov.f32	s14, s0
 8001e30:	eef0 7a60 	vmov.f32	s15, s1
 8001e34:	4b64      	ldr	r3, [pc, #400]	; (8001fc8 <calibration_IMU+0x548>)
 8001e36:	ed83 7b00 	vstr	d7, [r3]
     bAz = 1 - bAz;
 8001e3a:	4b62      	ldr	r3, [pc, #392]	; (8001fc4 <calibration_IMU+0x544>)
 8001e3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4623      	mov	r3, r4
 8001e44:	f04f 0000 	mov.w	r0, #0
 8001e48:	4960      	ldr	r1, [pc, #384]	; (8001fcc <calibration_IMU+0x54c>)
 8001e4a:	f7fe f9c9 	bl	80001e0 <__aeabi_dsub>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	460c      	mov	r4, r1
 8001e52:	4a5c      	ldr	r2, [pc, #368]	; (8001fc4 <calibration_IMU+0x544>)
 8001e54:	e9c2 3400 	strd	r3, r4, [r2]
     bGx /= 200;
 8001e58:	4b5d      	ldr	r3, [pc, #372]	; (8001fd0 <calibration_IMU+0x550>)
 8001e5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	4b5c      	ldr	r3, [pc, #368]	; (8001fd4 <calibration_IMU+0x554>)
 8001e64:	f7fe fc9e 	bl	80007a4 <__aeabi_ddiv>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	460c      	mov	r4, r1
 8001e6c:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <calibration_IMU+0x550>)
 8001e6e:	e9c2 3400 	strd	r3, r4, [r2]
     bGy /= 200;
 8001e72:	4b59      	ldr	r3, [pc, #356]	; (8001fd8 <calibration_IMU+0x558>)
 8001e74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	4b55      	ldr	r3, [pc, #340]	; (8001fd4 <calibration_IMU+0x554>)
 8001e7e:	f7fe fc91 	bl	80007a4 <__aeabi_ddiv>
 8001e82:	4603      	mov	r3, r0
 8001e84:	460c      	mov	r4, r1
 8001e86:	4a54      	ldr	r2, [pc, #336]	; (8001fd8 <calibration_IMU+0x558>)
 8001e88:	e9c2 3400 	strd	r3, r4, [r2]
     bGz /= 200;
 8001e8c:	4b53      	ldr	r3, [pc, #332]	; (8001fdc <calibration_IMU+0x55c>)
 8001e8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	4b4f      	ldr	r3, [pc, #316]	; (8001fd4 <calibration_IMU+0x554>)
 8001e98:	f7fe fc84 	bl	80007a4 <__aeabi_ddiv>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	460c      	mov	r4, r1
 8001ea0:	4a4e      	ldr	r2, [pc, #312]	; (8001fdc <calibration_IMU+0x55c>)
 8001ea2:	e9c2 3400 	strd	r3, r4, [r2]

     data_.bAx = bAx;
 8001ea6:	4b4e      	ldr	r3, [pc, #312]	; (8001fe0 <calibration_IMU+0x560>)
 8001ea8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001eac:	4618      	mov	r0, r3
 8001eae:	4621      	mov	r1, r4
 8001eb0:	f7fe fe46 	bl	8000b40 <__aeabi_d2f>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
     data_.bAy = bAy;
 8001eb8:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <calibration_IMU+0x540>)
 8001eba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	f7fe fe3d 	bl	8000b40 <__aeabi_d2f>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	633b      	str	r3, [r7, #48]	; 0x30
     data_.bAz = bAz;
 8001eca:	4b3e      	ldr	r3, [pc, #248]	; (8001fc4 <calibration_IMU+0x544>)
 8001ecc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	f7fe fe34 	bl	8000b40 <__aeabi_d2f>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34

     data_.bGx = bGx;
 8001edc:	4b3c      	ldr	r3, [pc, #240]	; (8001fd0 <calibration_IMU+0x550>)
 8001ede:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	f7fe fe2b 	bl	8000b40 <__aeabi_d2f>
 8001eea:	4603      	mov	r3, r0
 8001eec:	623b      	str	r3, [r7, #32]
     data_.bGy = bGy;
 8001eee:	4b3a      	ldr	r3, [pc, #232]	; (8001fd8 <calibration_IMU+0x558>)
 8001ef0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	f7fe fe22 	bl	8000b40 <__aeabi_d2f>
 8001efc:	4603      	mov	r3, r0
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
     data_.bGz = bGz;
 8001f00:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <calibration_IMU+0x55c>)
 8001f02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f06:	4618      	mov	r0, r3
 8001f08:	4621      	mov	r1, r4
 8001f0a:	f7fe fe19 	bl	8000b40 <__aeabi_d2f>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28

     data_.data[0] = bAx;
 8001f12:	4b33      	ldr	r3, [pc, #204]	; (8001fe0 <calibration_IMU+0x560>)
 8001f14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	4621      	mov	r1, r4
 8001f1c:	f7fe fe10 	bl	8000b40 <__aeabi_d2f>
 8001f20:	4603      	mov	r3, r0
 8001f22:	63bb      	str	r3, [r7, #56]	; 0x38
     data_.data[1] = bAy;
 8001f24:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <calibration_IMU+0x540>)
 8001f26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	f7fe fe07 	bl	8000b40 <__aeabi_d2f>
 8001f32:	4603      	mov	r3, r0
 8001f34:	63fb      	str	r3, [r7, #60]	; 0x3c
     data_.data[2] = bAz;
 8001f36:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <calibration_IMU+0x544>)
 8001f38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	4621      	mov	r1, r4
 8001f40:	f7fe fdfe 	bl	8000b40 <__aeabi_d2f>
 8001f44:	4603      	mov	r3, r0
 8001f46:	643b      	str	r3, [r7, #64]	; 0x40

     data_.data[3] = bGx;
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <calibration_IMU+0x550>)
 8001f4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	4621      	mov	r1, r4
 8001f52:	f7fe fdf5 	bl	8000b40 <__aeabi_d2f>
 8001f56:	4603      	mov	r3, r0
 8001f58:	647b      	str	r3, [r7, #68]	; 0x44
     data_.data[4] = bGy;
 8001f5a:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <calibration_IMU+0x558>)
 8001f5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f60:	4618      	mov	r0, r3
 8001f62:	4621      	mov	r1, r4
 8001f64:	f7fe fdec 	bl	8000b40 <__aeabi_d2f>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	64bb      	str	r3, [r7, #72]	; 0x48
     data_.data[5] = bGz;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <calibration_IMU+0x55c>)
 8001f6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f72:	4618      	mov	r0, r3
 8001f74:	4621      	mov	r1, r4
 8001f76:	f7fe fde3 	bl	8000b40 <__aeabi_d2f>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	64fb      	str	r3, [r7, #76]	; 0x4c

	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f84:	4817      	ldr	r0, [pc, #92]	; (8001fe4 <calibration_IMU+0x564>)
 8001f86:	f001 ff03 	bl	8003d90 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f90:	4814      	ldr	r0, [pc, #80]	; (8001fe4 <calibration_IMU+0x564>)
 8001f92:	f001 fefd 	bl	8003d90 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2104      	movs	r1, #4
 8001f9a:	4812      	ldr	r0, [pc, #72]	; (8001fe4 <calibration_IMU+0x564>)
 8001f9c:	f001 fef8 	bl	8003d90 <HAL_GPIO_WritePin>
	 return data_;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	461d      	mov	r5, r3
 8001fa4:	f107 0420 	add.w	r4, r7, #32
 8001fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001faa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fb4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	375c      	adds	r7, #92	; 0x5c
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc0:	20000328 	.word	0x20000328
 8001fc4:	200006b0 	.word	0x200006b0
 8001fc8:	200001b0 	.word	0x200001b0
 8001fcc:	3ff00000 	.word	0x3ff00000
 8001fd0:	200003d0 	.word	0x200003d0
 8001fd4:	40690000 	.word	0x40690000
 8001fd8:	20000188 	.word	0x20000188
 8001fdc:	200006b8 	.word	0x200006b8
 8001fe0:	200005c8 	.word	0x200005c8
 8001fe4:	40020400 	.word	0x40020400

08001fe8 <print_magnet>:
         	HAL_UART_Transmit(&huart1,(uint8_t*)buffer, strlen(buffer),1000);

}


void print_magnet(MAG_data data_raw){
 8001fe8:	b5b0      	push	{r4, r5, r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	eef0 6a40 	vmov.f32	s13, s0
 8001ff2:	eeb0 7a60 	vmov.f32	s14, s1
 8001ff6:	eef0 7a41 	vmov.f32	s15, s2
 8001ffa:	edc7 6a01 	vstr	s13, [r7, #4]
 8001ffe:	ed87 7a02 	vstr	s14, [r7, #8]
 8002002:	edc7 7a03 	vstr	s15, [r7, #12]
//
// 	ftoa(data_raw.Mag_y, buffer, 2);
// 	strcat(buffer," ");
// 	HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);

 	ftoa(data_raw.Mag_z, buffer, 2);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fa49 	bl	80004a0 <__aeabi_f2d>
 800200e:	4604      	mov	r4, r0
 8002010:	460d      	mov	r5, r1
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	2102      	movs	r1, #2
 8002018:	4618      	mov	r0, r3
 800201a:	ec45 4b10 	vmov	d0, r4, r5
 800201e:	f7fe ff5f 	bl	8000ee0 <ftoa>
 	strcat(buffer,"\n");
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe f8ce 	bl	80001c8 <strlen>
 800202c:	4603      	mov	r3, r0
 800202e:	461a      	mov	r2, r3
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	4413      	add	r3, r2
 8002036:	490b      	ldr	r1, [pc, #44]	; (8002064 <print_magnet+0x7c>)
 8002038:	461a      	mov	r2, r3
 800203a:	460b      	mov	r3, r1
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	8013      	strh	r3, [r2, #0]
 	HAL_UART_Transmit(&huart3,(uint8_t*) buffer, strlen(buffer),1000);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe f8bf 	bl	80001c8 <strlen>
 800204a:	4603      	mov	r3, r0
 800204c:	b29a      	uxth	r2, r3
 800204e:	f107 0114 	add.w	r1, r7, #20
 8002052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002056:	4804      	ldr	r0, [pc, #16]	; (8002068 <print_magnet+0x80>)
 8002058:	f004 fc07 	bl	800686a <HAL_UART_Transmit>
}
 800205c:	bf00      	nop
 800205e:	3720      	adds	r7, #32
 8002060:	46bd      	mov	sp, r7
 8002062:	bdb0      	pop	{r4, r5, r7, pc}
 8002064:	080073d4 	.word	0x080073d4
 8002068:	200000d4 	.word	0x200000d4

0800206c <Motor1>:
float Kd = 0.7;
float T = 0.01;


void Motor1(int pulse_width)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	if(pulse_width<0){
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	da0c      	bge.n	8002094 <Motor1+0x28>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET);
 800207a:	2201      	movs	r2, #1
 800207c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002080:	480b      	ldr	r0, [pc, #44]	; (80020b0 <Motor1+0x44>)
 8002082:	f001 fe85 	bl	8003d90 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 999 + pulse_width);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <Motor1+0x48>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
	else{
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
	}

}
 8002092:	e009      	b.n	80020a8 <Motor1+0x3c>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 8002094:	2200      	movs	r2, #0
 8002096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800209a:	4805      	ldr	r0, [pc, #20]	; (80020b0 <Motor1+0x44>)
 800209c:	f001 fe78 	bl	8003d90 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <Motor1+0x48>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40020000 	.word	0x40020000
 80020b4:	2000038c 	.word	0x2000038c

080020b8 <Motor2>:

void Motor2(int pulse_width)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	if(pulse_width<0){
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	da0c      	bge.n	80020e0 <Motor2+0x28>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_SET);
 80020c6:	2201      	movs	r2, #1
 80020c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020cc:	480b      	ldr	r0, [pc, #44]	; (80020fc <Motor2+0x44>)
 80020ce:	f001 fe5f 	bl	8003d90 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 999 + pulse_width);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <Motor2+0x48>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	635a      	str	r2, [r3, #52]	; 0x34
	else{
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_width);
	}

}
 80020de:	e009      	b.n	80020f4 <Motor2+0x3c>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020e6:	4805      	ldr	r0, [pc, #20]	; (80020fc <Motor2+0x44>)
 80020e8:	f001 fe52 	bl	8003d90 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_width);
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <Motor2+0x48>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40020000 	.word	0x40020000
 8002100:	2000038c 	.word	0x2000038c

08002104 <PID>:



void PID(float setpoint, float input, int velocity){
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	ed87 0a03 	vstr	s0, [r7, #12]
 800210e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002112:	6078      	str	r0, [r7, #4]
		Error = setpoint - input;
 8002114:	ed97 7a03 	vldr	s14, [r7, #12]
 8002118:	edd7 7a02 	vldr	s15, [r7, #8]
 800211c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002120:	4b41      	ldr	r3, [pc, #260]	; (8002228 <PID+0x124>)
 8002122:	edc3 7a00 	vstr	s15, [r3]
		P_part = Kp*(Error);
 8002126:	4b41      	ldr	r3, [pc, #260]	; (800222c <PID+0x128>)
 8002128:	ed93 7a00 	vldr	s14, [r3]
 800212c:	4b3e      	ldr	r3, [pc, #248]	; (8002228 <PID+0x124>)
 800212e:	edd3 7a00 	vldr	s15, [r3]
 8002132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002136:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <PID+0x12c>)
 8002138:	edc3 7a00 	vstr	s15, [r3]
		I_part += Ki*T*Error;
 800213c:	4b3d      	ldr	r3, [pc, #244]	; (8002234 <PID+0x130>)
 800213e:	ed93 7a00 	vldr	s14, [r3]
 8002142:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <PID+0x134>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800214c:	4b36      	ldr	r3, [pc, #216]	; (8002228 <PID+0x124>)
 800214e:	edd3 7a00 	vldr	s15, [r3]
 8002152:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002156:	4b39      	ldr	r3, [pc, #228]	; (800223c <PID+0x138>)
 8002158:	edd3 7a00 	vldr	s15, [r3]
 800215c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002160:	4b36      	ldr	r3, [pc, #216]	; (800223c <PID+0x138>)
 8002162:	edc3 7a00 	vstr	s15, [r3]
		if(I_part > 300){
 8002166:	4b35      	ldr	r3, [pc, #212]	; (800223c <PID+0x138>)
 8002168:	edd3 7a00 	vldr	s15, [r3]
 800216c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002240 <PID+0x13c>
 8002170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002178:	dd02      	ble.n	8002180 <PID+0x7c>
			I_part = 300;
 800217a:	4b30      	ldr	r3, [pc, #192]	; (800223c <PID+0x138>)
 800217c:	4a31      	ldr	r2, [pc, #196]	; (8002244 <PID+0x140>)
 800217e:	601a      	str	r2, [r3, #0]
		}
		D_part = Kd*(Error - pre_Error)/T;
 8002180:	4b29      	ldr	r3, [pc, #164]	; (8002228 <PID+0x124>)
 8002182:	ed93 7a00 	vldr	s14, [r3]
 8002186:	4b30      	ldr	r3, [pc, #192]	; (8002248 <PID+0x144>)
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002190:	4b2e      	ldr	r3, [pc, #184]	; (800224c <PID+0x148>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ee67 6a27 	vmul.f32	s13, s14, s15
 800219a:	4b27      	ldr	r3, [pc, #156]	; (8002238 <PID+0x134>)
 800219c:	ed93 7a00 	vldr	s14, [r3]
 80021a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021a4:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <PID+0x14c>)
 80021a6:	edc3 7a00 	vstr	s15, [r3]
		Out = P_part + I_part + D_part ;
 80021aa:	4b21      	ldr	r3, [pc, #132]	; (8002230 <PID+0x12c>)
 80021ac:	ed93 7a00 	vldr	s14, [r3]
 80021b0:	4b22      	ldr	r3, [pc, #136]	; (800223c <PID+0x138>)
 80021b2:	edd3 7a00 	vldr	s15, [r3]
 80021b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ba:	4b25      	ldr	r3, [pc, #148]	; (8002250 <PID+0x14c>)
 80021bc:	edd3 7a00 	vldr	s15, [r3]
 80021c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c4:	4b23      	ldr	r3, [pc, #140]	; (8002254 <PID+0x150>)
 80021c6:	edc3 7a00 	vstr	s15, [r3]
		pre_Error = Error;
 80021ca:	4b17      	ldr	r3, [pc, #92]	; (8002228 <PID+0x124>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a1e      	ldr	r2, [pc, #120]	; (8002248 <PID+0x144>)
 80021d0:	6013      	str	r3, [r2, #0]
		pre_out = Out;
 80021d2:	4b20      	ldr	r3, [pc, #128]	; (8002254 <PID+0x150>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a20      	ldr	r2, [pc, #128]	; (8002258 <PID+0x154>)
 80021d8:	6013      	str	r3, [r2, #0]

		Motor2( velocity - round_pid(Out));
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <PID+0x150>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe f95e 	bl	80004a0 <__aeabi_f2d>
 80021e4:	4603      	mov	r3, r0
 80021e6:	460c      	mov	r4, r1
 80021e8:	ec44 3b10 	vmov	d0, r3, r4
 80021ec:	f000 f838 	bl	8002260 <round_pid>
 80021f0:	4602      	mov	r2, r0
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff ff5e 	bl	80020b8 <Motor2>
		Motor1( velocity + round_pid(Out));
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <PID+0x150>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe f94d 	bl	80004a0 <__aeabi_f2d>
 8002206:	4603      	mov	r3, r0
 8002208:	460c      	mov	r4, r1
 800220a:	ec44 3b10 	vmov	d0, r3, r4
 800220e:	f000 f827 	bl	8002260 <round_pid>
 8002212:	4602      	mov	r2, r0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff27 	bl	800206c <Motor1>


	 	return Out;
 800221e:	bf00      	nop
}
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	bd90      	pop	{r4, r7, pc}
 8002226:	bf00      	nop
 8002228:	20000434 	.word	0x20000434
 800222c:	20000000 	.word	0x20000000
 8002230:	200005d0 	.word	0x200005d0
 8002234:	20000004 	.word	0x20000004
 8002238:	2000000c 	.word	0x2000000c
 800223c:	2000036c 	.word	0x2000036c
 8002240:	43960000 	.word	0x43960000
 8002244:	43960000 	.word	0x43960000
 8002248:	200005c4 	.word	0x200005c4
 800224c:	20000008 	.word	0x20000008
 8002250:	200002c8 	.word	0x200002c8
 8002254:	20000180 	.word	0x20000180
 8002258:	20000320 	.word	0x20000320
 800225c:	00000000 	.word	0x00000000

08002260 <round_pid>:
int round_pid(double x)
	{
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	ed87 0b00 	vstr	d0, [r7]
	    if (x < 0.0)
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002276:	f7fe fbdd 	bl	8000a34 <__aeabi_dcmplt>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01a      	beq.n	80022b6 <round_pid+0x56>
	    	if(x > -500){
 8002280:	a320      	add	r3, pc, #128	; (adr r3, 8002304 <round_pid+0xa4>)
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	e9d7 0100 	ldrd	r0, r1, [r7]
 800228a:	f7fe fbf1 	bl	8000a70 <__aeabi_dcmpgt>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00e      	beq.n	80022b2 <round_pid+0x52>
	        return (int)(x - 0.5);
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <round_pid+0x98>)
 800229a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800229e:	f7fd ff9f 	bl	80001e0 <__aeabi_dsub>
 80022a2:	4603      	mov	r3, r0
 80022a4:	460c      	mov	r4, r1
 80022a6:	4618      	mov	r0, r3
 80022a8:	4621      	mov	r1, r4
 80022aa:	f7fe fc01 	bl	8000ab0 <__aeabi_d2iz>
 80022ae:	4603      	mov	r3, r0
 80022b0:	e01c      	b.n	80022ec <round_pid+0x8c>
	    	}
	    	else{
	    		return -500;
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <round_pid+0x9c>)
 80022b4:	e01a      	b.n	80022ec <round_pid+0x8c>
	    	}
	    else
	    	if(x < 500){
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	4b11      	ldr	r3, [pc, #68]	; (8002300 <round_pid+0xa0>)
 80022bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022c0:	f7fe fbb8 	bl	8000a34 <__aeabi_dcmplt>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00e      	beq.n	80022e8 <round_pid+0x88>
		        return (int)(x + 0.5);
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <round_pid+0x98>)
 80022d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022d4:	f7fd ff86 	bl	80001e4 <__adddf3>
 80022d8:	4603      	mov	r3, r0
 80022da:	460c      	mov	r4, r1
 80022dc:	4618      	mov	r0, r3
 80022de:	4621      	mov	r1, r4
 80022e0:	f7fe fbe6 	bl	8000ab0 <__aeabi_d2iz>
 80022e4:	4603      	mov	r3, r0
 80022e6:	e001      	b.n	80022ec <round_pid+0x8c>
	    	}
	    	else{
	    		return 500;
 80022e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	    	}
	}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd90      	pop	{r4, r7, pc}
 80022f4:	f3af 8000 	nop.w
 80022f8:	3fe00000 	.word	0x3fe00000
 80022fc:	fffffe0c 	.word	0xfffffe0c
 8002300:	407f4000 	.word	0x407f4000
 8002304:	00000000 	.word	0x00000000
 8002308:	c07f4000 	.word	0xc07f4000

0800230c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08c      	sub	sp, #48	; 0x30
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002312:	f000 ff59 	bl	80031c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002316:	f000 f849 	bl	80023ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800231a:	f000 fa95 	bl	8002848 <MX_GPIO_Init>
  MX_DMA_Init();
 800231e:	f000 fa73 	bl	8002808 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002322:	f000 fa47 	bl	80027b4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002326:	f000 f8bf 	bl	80024a8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800232a:	f000 f921 	bl	8002570 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800232e:	f000 fa17 	bl	8002760 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8002332:	f000 f8a5 	bl	8002480 <MX_CRC_Init>
  MX_SPI1_Init();
 8002336:	f000 f8e5 	bl	8002504 <MX_SPI1_Init>
  MX_TIM2_Init();
 800233a:	f000 f9c5 	bl	80026c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  init_MPU();
 800233e:	f7fe ff07 	bl	8001150 <init_MPU>
  calibration_IMU();
 8002342:	463b      	mov	r3, r7
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fb9b 	bl	8001a80 <calibration_IMU>


  yaw_com = 0;
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <main+0x8c>)
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
//  HAL_UART_Receive_IT(&huart1, (uint8_t *) Rx_data, 1);

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002352:	2100      	movs	r1, #0
 8002354:	4811      	ldr	r0, [pc, #68]	; (800239c <main+0x90>)
 8002356:	f003 fb5d 	bl	8005a14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800235a:	210c      	movs	r1, #12
 800235c:	480f      	ldr	r0, [pc, #60]	; (800239c <main+0x90>)
 800235e:	f003 fb59 	bl	8005a14 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8002362:	480f      	ldr	r0, [pc, #60]	; (80023a0 <main+0x94>)
 8002364:	f003 fafd 	bl	8005962 <HAL_TIM_Base_Start_IT>
//	    Motor1(i);
//		Motor2(i);
//		HAL_Delay(10);
//	  }
//	      mag_raw.Mag_x = set_point;
	      mag_raw.Mag_z = yaw_gyro;
 8002368:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <main+0x98>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <main+0x9c>)
 800236e:	6093      	str	r3, [r2, #8]
//	  	  mag_raw.Mag_z = imu_data.Gyro_z;
	  	  print_magnet(mag_raw);
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <main+0x9c>)
 8002372:	edd3 6a00 	vldr	s13, [r3]
 8002376:	ed93 7a01 	vldr	s14, [r3, #4]
 800237a:	edd3 7a02 	vldr	s15, [r3, #8]
 800237e:	eeb0 0a66 	vmov.f32	s0, s13
 8002382:	eef0 0a47 	vmov.f32	s1, s14
 8002386:	eeb0 1a67 	vmov.f32	s2, s15
 800238a:	f7ff fe2d 	bl	8001fe8 <print_magnet>
	  	  HAL_Delay(100);
 800238e:	2064      	movs	r0, #100	; 0x64
 8002390:	f000 ff5c 	bl	800324c <HAL_Delay>
	      mag_raw.Mag_z = yaw_gyro;
 8002394:	e7e8      	b.n	8002368 <main+0x5c>
 8002396:	bf00      	nop
 8002398:	2000068c 	.word	0x2000068c
 800239c:	2000038c 	.word	0x2000038c
 80023a0:	20000630 	.word	0x20000630
 80023a4:	200000a8 	.word	0x200000a8
 80023a8:	200002a8 	.word	0x200002a8

080023ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b094      	sub	sp, #80	; 0x50
 80023b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023b2:	f107 0320 	add.w	r3, r7, #32
 80023b6:	2230      	movs	r2, #48	; 0x30
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f004 fede 	bl	800717c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d0:	2300      	movs	r3, #0
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	4b28      	ldr	r3, [pc, #160]	; (8002478 <SystemClock_Config+0xcc>)
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	4a27      	ldr	r2, [pc, #156]	; (8002478 <SystemClock_Config+0xcc>)
 80023da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023de:	6413      	str	r3, [r2, #64]	; 0x40
 80023e0:	4b25      	ldr	r3, [pc, #148]	; (8002478 <SystemClock_Config+0xcc>)
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ec:	2300      	movs	r3, #0
 80023ee:	607b      	str	r3, [r7, #4]
 80023f0:	4b22      	ldr	r3, [pc, #136]	; (800247c <SystemClock_Config+0xd0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a21      	ldr	r2, [pc, #132]	; (800247c <SystemClock_Config+0xd0>)
 80023f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4b1f      	ldr	r3, [pc, #124]	; (800247c <SystemClock_Config+0xd0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002408:	2301      	movs	r3, #1
 800240a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800240c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002412:	2302      	movs	r3, #2
 8002414:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002416:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800241a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800241c:	2306      	movs	r3, #6
 800241e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002420:	23a8      	movs	r3, #168	; 0xa8
 8002422:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002424:	2302      	movs	r3, #2
 8002426:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002428:	2304      	movs	r3, #4
 800242a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800242c:	f107 0320 	add.w	r3, r7, #32
 8002430:	4618      	mov	r0, r3
 8002432:	f002 fd99 	bl	8004f68 <HAL_RCC_OscConfig>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800243c:	f000 fb0a 	bl	8002a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002440:	230f      	movs	r3, #15
 8002442:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002444:	2302      	movs	r3, #2
 8002446:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800244c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002450:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002456:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002458:	f107 030c 	add.w	r3, r7, #12
 800245c:	2105      	movs	r1, #5
 800245e:	4618      	mov	r0, r3
 8002460:	f002 fff2 	bl	8005448 <HAL_RCC_ClockConfig>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800246a:	f000 faf3 	bl	8002a54 <Error_Handler>
  }
}
 800246e:	bf00      	nop
 8002470:	3750      	adds	r7, #80	; 0x50
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	40007000 	.word	0x40007000

08002480 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <MX_CRC_Init+0x20>)
 8002486:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <MX_CRC_Init+0x24>)
 8002488:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800248a:	4805      	ldr	r0, [pc, #20]	; (80024a0 <MX_CRC_Init+0x20>)
 800248c:	f000 ffe2 	bl	8003454 <HAL_CRC_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002496:	f000 fadd 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000190 	.word	0x20000190
 80024a4:	40023000 	.word	0x40023000

080024a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <MX_I2C1_Init+0x50>)
 80024ae:	4a13      	ldr	r2, [pc, #76]	; (80024fc <MX_I2C1_Init+0x54>)
 80024b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <MX_I2C1_Init+0x50>)
 80024b4:	4a12      	ldr	r2, [pc, #72]	; (8002500 <MX_I2C1_Init+0x58>)
 80024b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <MX_I2C1_Init+0x50>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <MX_I2C1_Init+0x50>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <MX_I2C1_Init+0x50>)
 80024c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <MX_I2C1_Init+0x50>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <MX_I2C1_Init+0x50>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024d8:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <MX_I2C1_Init+0x50>)
 80024da:	2200      	movs	r2, #0
 80024dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <MX_I2C1_Init+0x50>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024e4:	4804      	ldr	r0, [pc, #16]	; (80024f8 <MX_I2C1_Init+0x50>)
 80024e6:	f001 fc87 	bl	8003df8 <HAL_I2C_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024f0:	f000 fab0 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	2000012c 	.word	0x2000012c
 80024fc:	40005400 	.word	0x40005400
 8002500:	00061a80 	.word	0x00061a80

08002504 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002508:	4b17      	ldr	r3, [pc, #92]	; (8002568 <MX_SPI1_Init+0x64>)
 800250a:	4a18      	ldr	r2, [pc, #96]	; (800256c <MX_SPI1_Init+0x68>)
 800250c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800250e:	4b16      	ldr	r3, [pc, #88]	; (8002568 <MX_SPI1_Init+0x64>)
 8002510:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002514:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <MX_SPI1_Init+0x64>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <MX_SPI1_Init+0x64>)
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <MX_SPI1_Init+0x64>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <MX_SPI1_Init+0x64>)
 800252a:	2200      	movs	r2, #0
 800252c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <MX_SPI1_Init+0x64>)
 8002530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002534:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <MX_SPI1_Init+0x64>)
 8002538:	2210      	movs	r2, #16
 800253a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <MX_SPI1_Init+0x64>)
 800253e:	2200      	movs	r2, #0
 8002540:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <MX_SPI1_Init+0x64>)
 8002544:	2200      	movs	r2, #0
 8002546:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002548:	4b07      	ldr	r3, [pc, #28]	; (8002568 <MX_SPI1_Init+0x64>)
 800254a:	2200      	movs	r2, #0
 800254c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <MX_SPI1_Init+0x64>)
 8002550:	220a      	movs	r2, #10
 8002552:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002554:	4804      	ldr	r0, [pc, #16]	; (8002568 <MX_SPI1_Init+0x64>)
 8002556:	f003 f975 	bl	8005844 <HAL_SPI_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002560:	f000 fa78 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	200005d8 	.word	0x200005d8
 800256c:	40013000 	.word	0x40013000

08002570 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b096      	sub	sp, #88	; 0x58
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002576:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002584:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800258e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]
 800259c:	611a      	str	r2, [r3, #16]
 800259e:	615a      	str	r2, [r3, #20]
 80025a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	2220      	movs	r2, #32
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f004 fde7 	bl	800717c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025ae:	4b44      	ldr	r3, [pc, #272]	; (80026c0 <MX_TIM1_Init+0x150>)
 80025b0:	4a44      	ldr	r2, [pc, #272]	; (80026c4 <MX_TIM1_Init+0x154>)
 80025b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 80025b4:	4b42      	ldr	r3, [pc, #264]	; (80026c0 <MX_TIM1_Init+0x150>)
 80025b6:	2203      	movs	r2, #3
 80025b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ba:	4b41      	ldr	r3, [pc, #260]	; (80026c0 <MX_TIM1_Init+0x150>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80025c0:	4b3f      	ldr	r3, [pc, #252]	; (80026c0 <MX_TIM1_Init+0x150>)
 80025c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c8:	4b3d      	ldr	r3, [pc, #244]	; (80026c0 <MX_TIM1_Init+0x150>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025ce:	4b3c      	ldr	r3, [pc, #240]	; (80026c0 <MX_TIM1_Init+0x150>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d4:	4b3a      	ldr	r3, [pc, #232]	; (80026c0 <MX_TIM1_Init+0x150>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025da:	4839      	ldr	r0, [pc, #228]	; (80026c0 <MX_TIM1_Init+0x150>)
 80025dc:	f003 f996 	bl	800590c <HAL_TIM_Base_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80025e6:	f000 fa35 	bl	8002a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025f4:	4619      	mov	r1, r3
 80025f6:	4832      	ldr	r0, [pc, #200]	; (80026c0 <MX_TIM1_Init+0x150>)
 80025f8:	f003 fc18 	bl	8005e2c <HAL_TIM_ConfigClockSource>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002602:	f000 fa27 	bl	8002a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002606:	482e      	ldr	r0, [pc, #184]	; (80026c0 <MX_TIM1_Init+0x150>)
 8002608:	f003 f9cf 	bl	80059aa <HAL_TIM_PWM_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002612:	f000 fa1f 	bl	8002a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800261e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002622:	4619      	mov	r1, r3
 8002624:	4826      	ldr	r0, [pc, #152]	; (80026c0 <MX_TIM1_Init+0x150>)
 8002626:	f003 fff1 	bl	800660c <HAL_TIMEx_MasterConfigSynchronization>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002630:	f000 fa10 	bl	8002a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002634:	2360      	movs	r3, #96	; 0x60
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800263c:	2300      	movs	r3, #0
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002640:	2300      	movs	r3, #0
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002648:	2300      	movs	r3, #0
 800264a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800264c:	2300      	movs	r3, #0
 800264e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002654:	2200      	movs	r2, #0
 8002656:	4619      	mov	r1, r3
 8002658:	4819      	ldr	r0, [pc, #100]	; (80026c0 <MX_TIM1_Init+0x150>)
 800265a:	f003 fb21 	bl	8005ca0 <HAL_TIM_PWM_ConfigChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002664:	f000 f9f6 	bl	8002a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266c:	220c      	movs	r2, #12
 800266e:	4619      	mov	r1, r3
 8002670:	4813      	ldr	r0, [pc, #76]	; (80026c0 <MX_TIM1_Init+0x150>)
 8002672:	f003 fb15 	bl	8005ca0 <HAL_TIM_PWM_ConfigChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800267c:	f000 f9ea 	bl	8002a54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002684:	2300      	movs	r3, #0
 8002686:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002698:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800269a:	2300      	movs	r3, #0
 800269c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	4619      	mov	r1, r3
 80026a2:	4807      	ldr	r0, [pc, #28]	; (80026c0 <MX_TIM1_Init+0x150>)
 80026a4:	f004 f82e 	bl	8006704 <HAL_TIMEx_ConfigBreakDeadTime>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80026ae:	f000 f9d1 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80026b2:	4803      	ldr	r0, [pc, #12]	; (80026c0 <MX_TIM1_Init+0x150>)
 80026b4:	f000 faec 	bl	8002c90 <HAL_TIM_MspPostInit>

}
 80026b8:	bf00      	nop
 80026ba:	3758      	adds	r7, #88	; 0x58
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	2000038c 	.word	0x2000038c
 80026c4:	40010000 	.word	0x40010000

080026c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026dc:	463b      	mov	r3, r7
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <MX_TIM2_Init+0x94>)
 80026e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <MX_TIM2_Init+0x94>)
 80026ee:	2253      	movs	r2, #83	; 0x53
 80026f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f2:	4b1a      	ldr	r3, [pc, #104]	; (800275c <MX_TIM2_Init+0x94>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80026f8:	4b18      	ldr	r3, [pc, #96]	; (800275c <MX_TIM2_Init+0x94>)
 80026fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80026fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002700:	4b16      	ldr	r3, [pc, #88]	; (800275c <MX_TIM2_Init+0x94>)
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <MX_TIM2_Init+0x94>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800270c:	4813      	ldr	r0, [pc, #76]	; (800275c <MX_TIM2_Init+0x94>)
 800270e:	f003 f8fd 	bl	800590c <HAL_TIM_Base_Init>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002718:	f000 f99c 	bl	8002a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800271c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002720:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002722:	f107 0308 	add.w	r3, r7, #8
 8002726:	4619      	mov	r1, r3
 8002728:	480c      	ldr	r0, [pc, #48]	; (800275c <MX_TIM2_Init+0x94>)
 800272a:	f003 fb7f 	bl	8005e2c <HAL_TIM_ConfigClockSource>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002734:	f000 f98e 	bl	8002a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002738:	2300      	movs	r3, #0
 800273a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002740:	463b      	mov	r3, r7
 8002742:	4619      	mov	r1, r3
 8002744:	4805      	ldr	r0, [pc, #20]	; (800275c <MX_TIM2_Init+0x94>)
 8002746:	f003 ff61 	bl	800660c <HAL_TIMEx_MasterConfigSynchronization>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002750:	f000 f980 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002754:	bf00      	nop
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000630 	.word	0x20000630

08002760 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002764:	4b11      	ldr	r3, [pc, #68]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 8002766:	4a12      	ldr	r2, [pc, #72]	; (80027b0 <MX_USART1_UART_Init+0x50>)
 8002768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 800276c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 8002786:	220c      	movs	r2, #12
 8002788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002796:	4805      	ldr	r0, [pc, #20]	; (80027ac <MX_USART1_UART_Init+0x4c>)
 8002798:	f004 f81a 	bl	80067d0 <HAL_UART_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027a2:	f000 f957 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200002dc 	.word	0x200002dc
 80027b0:	40011000 	.word	0x40011000

080027b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <MX_USART3_UART_Init+0x4c>)
 80027ba:	4a12      	ldr	r2, [pc, #72]	; (8002804 <MX_USART3_UART_Init+0x50>)
 80027bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <MX_USART3_UART_Init+0x4c>)
 80027c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027c6:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <MX_USART3_UART_Init+0x4c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <MX_USART3_UART_Init+0x4c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <MX_USART3_UART_Init+0x4c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <MX_USART3_UART_Init+0x4c>)
 80027da:	220c      	movs	r2, #12
 80027dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <MX_USART3_UART_Init+0x4c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <MX_USART3_UART_Init+0x4c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027ea:	4805      	ldr	r0, [pc, #20]	; (8002800 <MX_USART3_UART_Init+0x4c>)
 80027ec:	f003 fff0 	bl	80067d0 <HAL_UART_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80027f6:	f000 f92d 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200000d4 	.word	0x200000d4
 8002804:	40004800 	.word	0x40004800

08002808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <MX_DMA_Init+0x3c>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <MX_DMA_Init+0x3c>)
 8002818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <MX_DMA_Init+0x3c>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800282a:	2200      	movs	r2, #0
 800282c:	2105      	movs	r1, #5
 800282e:	200e      	movs	r0, #14
 8002830:	f000 fde6 	bl	8003400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002834:	200e      	movs	r0, #14
 8002836:	f000 fdff 	bl	8003438 <HAL_NVIC_EnableIRQ>

}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800

08002848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	; 0x28
 800284c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	60da      	str	r2, [r3, #12]
 800285c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	4b3b      	ldr	r3, [pc, #236]	; (8002950 <MX_GPIO_Init+0x108>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4a3a      	ldr	r2, [pc, #232]	; (8002950 <MX_GPIO_Init+0x108>)
 8002868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
 800286e:	4b38      	ldr	r3, [pc, #224]	; (8002950 <MX_GPIO_Init+0x108>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	4b34      	ldr	r3, [pc, #208]	; (8002950 <MX_GPIO_Init+0x108>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	4a33      	ldr	r2, [pc, #204]	; (8002950 <MX_GPIO_Init+0x108>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6313      	str	r3, [r2, #48]	; 0x30
 800288a:	4b31      	ldr	r3, [pc, #196]	; (8002950 <MX_GPIO_Init+0x108>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <MX_GPIO_Init+0x108>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	4a2c      	ldr	r2, [pc, #176]	; (8002950 <MX_GPIO_Init+0x108>)
 80028a0:	f043 0304 	orr.w	r3, r3, #4
 80028a4:	6313      	str	r3, [r2, #48]	; 0x30
 80028a6:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <MX_GPIO_Init+0x108>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	4b26      	ldr	r3, [pc, #152]	; (8002950 <MX_GPIO_Init+0x108>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4a25      	ldr	r2, [pc, #148]	; (8002950 <MX_GPIO_Init+0x108>)
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	6313      	str	r3, [r2, #48]	; 0x30
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <MX_GPIO_Init+0x108>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80028ce:	2200      	movs	r2, #0
 80028d0:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80028d4:	481f      	ldr	r0, [pc, #124]	; (8002954 <MX_GPIO_Init+0x10c>)
 80028d6:	f001 fa5b 	bl	8003d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80028da:	2200      	movs	r2, #0
 80028dc:	2130      	movs	r1, #48	; 0x30
 80028de:	481e      	ldr	r0, [pc, #120]	; (8002958 <MX_GPIO_Init+0x110>)
 80028e0:	f001 fa56 	bl	8003d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80028e4:	2200      	movs	r2, #0
 80028e6:	f243 0104 	movw	r1, #12292	; 0x3004
 80028ea:	481c      	ldr	r0, [pc, #112]	; (800295c <MX_GPIO_Init+0x114>)
 80028ec:	f001 fa50 	bl	8003d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10;
 80028f0:	f44f 63c2 	mov.w	r3, #1552	; 0x610
 80028f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f6:	2301      	movs	r3, #1
 80028f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fe:	2300      	movs	r3, #0
 8002900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	4619      	mov	r1, r3
 8002908:	4812      	ldr	r0, [pc, #72]	; (8002954 <MX_GPIO_Init+0x10c>)
 800290a:	f001 f8a7 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800290e:	2330      	movs	r3, #48	; 0x30
 8002910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002912:	2301      	movs	r3, #1
 8002914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	4619      	mov	r1, r3
 8002924:	480c      	ldr	r0, [pc, #48]	; (8002958 <MX_GPIO_Init+0x110>)
 8002926:	f001 f899 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 800292a:	f243 0304 	movw	r3, #12292	; 0x3004
 800292e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002930:	2301      	movs	r3, #1
 8002932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002938:	2300      	movs	r3, #0
 800293a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4619      	mov	r1, r3
 8002942:	4806      	ldr	r0, [pc, #24]	; (800295c <MX_GPIO_Init+0x114>)
 8002944:	f001 f88a 	bl	8003a5c <HAL_GPIO_Init>

}
 8002948:	bf00      	nop
 800294a:	3728      	adds	r7, #40	; 0x28
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	40020000 	.word	0x40020000
 8002958:	40020800 	.word	0x40020800
 800295c:	40020400 	.word	0x40020400

08002960 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002960:	b5b0      	push	{r4, r5, r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a32      	ldr	r2, [pc, #200]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002972:	f000 fc4b 	bl	800320c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
    if (htim->Instance == TIM2) {
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297e:	d151      	bne.n	8002a24 <HAL_TIM_PeriodElapsedCallback+0xc4>
    		if(!calib_mode){
 8002980:	4b2e      	ldr	r3, [pc, #184]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d12f      	bne.n	80029e8 <HAL_TIM_PeriodElapsedCallback+0x88>
    		   imu_data = process_MPU(0,0);
 8002988:	4c2d      	ldr	r4, [pc, #180]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800298a:	463b      	mov	r3, r7
 800298c:	2200      	movs	r2, #0
 800298e:	2100      	movs	r1, #0
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe fdf9 	bl	8001588 <process_MPU>
 8002996:	4625      	mov	r5, r4
 8002998:	463c      	mov	r4, r7
 800299a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800299c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800299e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029a2:	e885 0003 	stmia.w	r5, {r0, r1}
    	//       mag_raw = process_magnet();
    	//       yaw = 180 * atan2(-mag_raw.Mag_x,mag_raw.Mag_y)/3.14159;
    	//       yaw_com = 0.98*(yaw_com + 0.01*imu_data.Gyro_z) + (0.02)*(yaw);
    	       yaw_gyro += 0.01*imu_data.Gyro_z;
 80029a6:	4b27      	ldr	r3, [pc, #156]	; (8002a44 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fd fd78 	bl	80004a0 <__aeabi_f2d>
 80029b0:	4604      	mov	r4, r0
 80029b2:	460d      	mov	r5, r1
 80029b4:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fd71 	bl	80004a0 <__aeabi_f2d>
 80029be:	a31c      	add	r3, pc, #112	; (adr r3, 8002a30 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	f7fd fdc4 	bl	8000550 <__aeabi_dmul>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4620      	mov	r0, r4
 80029ce:	4629      	mov	r1, r5
 80029d0:	f7fd fc08 	bl	80001e4 <__adddf3>
 80029d4:	4603      	mov	r3, r0
 80029d6:	460c      	mov	r4, r1
 80029d8:	4618      	mov	r0, r3
 80029da:	4621      	mov	r1, r4
 80029dc:	f7fe f8b0 	bl	8000b40 <__aeabi_d2f>
 80029e0:	4602      	mov	r2, r0
 80029e2:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	e00e      	b.n	8002a06 <HAL_TIM_PeriodElapsedCallback+0xa6>
    		}
    		else{
    			mag_raw = magnet_get_raw();
 80029e8:	f7fe ffa6 	bl	8001938 <magnet_get_raw>
 80029ec:	eef0 6a40 	vmov.f32	s13, s0
 80029f0:	eeb0 7a60 	vmov.f32	s14, s1
 80029f4:	eef0 7a41 	vmov.f32	s15, s2
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80029fa:	edc3 6a00 	vstr	s13, [r3]
 80029fe:	ed83 7a01 	vstr	s14, [r3, #4]
 8002a02:	edc3 7a02 	vstr	s15, [r3, #8]
    		}
    	    PID(set_point, yaw_gyro, velocity);
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002a0e:	ed93 7a00 	vldr	s14, [r3]
 8002a12:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	eef0 0a47 	vmov.f32	s1, s14
 8002a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a20:	f7ff fb70 	bl	8002104 <PID>
      }
  /* USER CODE END Callback 1 */
}
 8002a24:	bf00      	nop
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a2c:	f3af 8000 	nop.w
 8002a30:	47ae147b 	.word	0x47ae147b
 8002a34:	3f847ae1 	.word	0x3f847ae1
 8002a38:	40002000 	.word	0x40002000
 8002a3c:	200000a4 	.word	0x200000a4
 8002a40:	2000024c 	.word	0x2000024c
 8002a44:	200000a8 	.word	0x200000a8
 8002a48:	200002a8 	.word	0x200002a8
 8002a4c:	200000ac 	.word	0x200000ac
 8002a50:	200000b0 	.word	0x200000b0

08002a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <HAL_MspInit+0x4c>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	4a0f      	ldr	r2, [pc, #60]	; (8002ab0 <HAL_MspInit+0x4c>)
 8002a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a78:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <HAL_MspInit+0x4c>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_MspInit+0x4c>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a08      	ldr	r2, [pc, #32]	; (8002ab0 <HAL_MspInit+0x4c>)
 8002a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
 8002a96:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <HAL_MspInit+0x4c>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800

08002ab4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0b      	ldr	r2, [pc, #44]	; (8002af0 <HAL_CRC_MspInit+0x3c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d10d      	bne.n	8002ae2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_CRC_MspInit+0x40>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <HAL_CRC_MspInit+0x40>)
 8002ad0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <HAL_CRC_MspInit+0x40>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40023000 	.word	0x40023000
 8002af4:	40023800 	.word	0x40023800

08002af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	; 0x28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a19      	ldr	r2, [pc, #100]	; (8002b7c <HAL_I2C_MspInit+0x84>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d12c      	bne.n	8002b74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <HAL_I2C_MspInit+0x88>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	4a17      	ldr	r2, [pc, #92]	; (8002b80 <HAL_I2C_MspInit+0x88>)
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <HAL_I2C_MspInit+0x88>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b3c:	2312      	movs	r3, #18
 8002b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b40:	2301      	movs	r3, #1
 8002b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b44:	2303      	movs	r3, #3
 8002b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b48:	2304      	movs	r3, #4
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4c:	f107 0314 	add.w	r3, r7, #20
 8002b50:	4619      	mov	r1, r3
 8002b52:	480c      	ldr	r0, [pc, #48]	; (8002b84 <HAL_I2C_MspInit+0x8c>)
 8002b54:	f000 ff82 	bl	8003a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <HAL_I2C_MspInit+0x88>)
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	4a07      	ldr	r2, [pc, #28]	; (8002b80 <HAL_I2C_MspInit+0x88>)
 8002b62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b66:	6413      	str	r3, [r2, #64]	; 0x40
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <HAL_I2C_MspInit+0x88>)
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b74:	bf00      	nop
 8002b76:	3728      	adds	r7, #40	; 0x28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40005400 	.word	0x40005400
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40020400 	.word	0x40020400

08002b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	; 0x28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b90:	f107 0314 	add.w	r3, r7, #20
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a19      	ldr	r2, [pc, #100]	; (8002c0c <HAL_SPI_MspInit+0x84>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d12b      	bne.n	8002c02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <HAL_SPI_MspInit+0x88>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	4a17      	ldr	r2, [pc, #92]	; (8002c10 <HAL_SPI_MspInit+0x88>)
 8002bb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <HAL_SPI_MspInit+0x88>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <HAL_SPI_MspInit+0x88>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	4a10      	ldr	r2, [pc, #64]	; (8002c10 <HAL_SPI_MspInit+0x88>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <HAL_SPI_MspInit+0x88>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002be2:	23e0      	movs	r3, #224	; 0xe0
 8002be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	2302      	movs	r3, #2
 8002be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bf2:	2305      	movs	r3, #5
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf6:	f107 0314 	add.w	r3, r7, #20
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4805      	ldr	r0, [pc, #20]	; (8002c14 <HAL_SPI_MspInit+0x8c>)
 8002bfe:	f000 ff2d 	bl	8003a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c02:	bf00      	nop
 8002c04:	3728      	adds	r7, #40	; 0x28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40013000 	.word	0x40013000
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40020000 	.word	0x40020000

08002c18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <HAL_TIM_Base_MspInit+0x70>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d10e      	bne.n	8002c48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <HAL_TIM_Base_MspInit+0x74>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	4a16      	ldr	r2, [pc, #88]	; (8002c8c <HAL_TIM_Base_MspInit+0x74>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3a:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <HAL_TIM_Base_MspInit+0x74>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c46:	e01a      	b.n	8002c7e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c50:	d115      	bne.n	8002c7e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]
 8002c56:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <HAL_TIM_Base_MspInit+0x74>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	4a0c      	ldr	r2, [pc, #48]	; (8002c8c <HAL_TIM_Base_MspInit+0x74>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	6413      	str	r3, [r2, #64]	; 0x40
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <HAL_TIM_Base_MspInit+0x74>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2101      	movs	r1, #1
 8002c72:	201c      	movs	r0, #28
 8002c74:	f000 fbc4 	bl	8003400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c78:	201c      	movs	r0, #28
 8002c7a:	f000 fbdd 	bl	8003438 <HAL_NVIC_EnableIRQ>
}
 8002c7e:	bf00      	nop
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40010000 	.word	0x40010000
 8002c8c:	40023800 	.word	0x40023800

08002c90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c98:	f107 030c 	add.w	r3, r7, #12
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <HAL_TIM_MspPostInit+0x68>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d11e      	bne.n	8002cf0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_TIM_MspPostInit+0x6c>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	4a10      	ldr	r2, [pc, #64]	; (8002cfc <HAL_TIM_MspPostInit+0x6c>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <HAL_TIM_MspPostInit+0x6c>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8002cce:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002cd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce4:	f107 030c 	add.w	r3, r7, #12
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4805      	ldr	r0, [pc, #20]	; (8002d00 <HAL_TIM_MspPostInit+0x70>)
 8002cec:	f000 feb6 	bl	8003a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002cf0:	bf00      	nop
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40020000 	.word	0x40020000

08002d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08c      	sub	sp, #48	; 0x30
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	f107 031c 	add.w	r3, r7, #28
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a51      	ldr	r2, [pc, #324]	; (8002e68 <HAL_UART_MspInit+0x164>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d13c      	bne.n	8002da0 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	4b50      	ldr	r3, [pc, #320]	; (8002e6c <HAL_UART_MspInit+0x168>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	4a4f      	ldr	r2, [pc, #316]	; (8002e6c <HAL_UART_MspInit+0x168>)
 8002d30:	f043 0310 	orr.w	r3, r3, #16
 8002d34:	6453      	str	r3, [r2, #68]	; 0x44
 8002d36:	4b4d      	ldr	r3, [pc, #308]	; (8002e6c <HAL_UART_MspInit+0x168>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	61bb      	str	r3, [r7, #24]
 8002d40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	4b49      	ldr	r3, [pc, #292]	; (8002e6c <HAL_UART_MspInit+0x168>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a48      	ldr	r2, [pc, #288]	; (8002e6c <HAL_UART_MspInit+0x168>)
 8002d4c:	f043 0302 	orr.w	r3, r3, #2
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b46      	ldr	r3, [pc, #280]	; (8002e6c <HAL_UART_MspInit+0x168>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d5e:	23c0      	movs	r3, #192	; 0xc0
 8002d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	2302      	movs	r3, #2
 8002d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d6e:	2307      	movs	r3, #7
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d72:	f107 031c 	add.w	r3, r7, #28
 8002d76:	4619      	mov	r1, r3
 8002d78:	483d      	ldr	r0, [pc, #244]	; (8002e70 <HAL_UART_MspInit+0x16c>)
 8002d7a:	f000 fe6f 	bl	8003a5c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2101      	movs	r1, #1
 8002d82:	2025      	movs	r0, #37	; 0x25
 8002d84:	f000 fb3c 	bl	8003400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d88:	2025      	movs	r0, #37	; 0x25
 8002d8a:	f000 fb55 	bl	8003438 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8002d8e:	4b39      	ldr	r3, [pc, #228]	; (8002e74 <HAL_UART_MspInit+0x170>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	4b37      	ldr	r3, [pc, #220]	; (8002e74 <HAL_UART_MspInit+0x170>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0220 	orr.w	r2, r2, #32
 8002d9c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d9e:	e05f      	b.n	8002e60 <HAL_UART_MspInit+0x15c>
  else if(huart->Instance==USART3)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a34      	ldr	r2, [pc, #208]	; (8002e78 <HAL_UART_MspInit+0x174>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d15a      	bne.n	8002e60 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	4b2f      	ldr	r3, [pc, #188]	; (8002e6c <HAL_UART_MspInit+0x168>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	4a2e      	ldr	r2, [pc, #184]	; (8002e6c <HAL_UART_MspInit+0x168>)
 8002db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dba:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <HAL_UART_MspInit+0x168>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <HAL_UART_MspInit+0x168>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4a27      	ldr	r2, [pc, #156]	; (8002e6c <HAL_UART_MspInit+0x168>)
 8002dd0:	f043 0302 	orr.w	r3, r3, #2
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <HAL_UART_MspInit+0x168>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002de2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de8:	2302      	movs	r3, #2
 8002dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df0:	2303      	movs	r3, #3
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002df4:	2307      	movs	r3, #7
 8002df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df8:	f107 031c 	add.w	r3, r7, #28
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	481c      	ldr	r0, [pc, #112]	; (8002e70 <HAL_UART_MspInit+0x16c>)
 8002e00:	f000 fe2c 	bl	8003a5c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002e04:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_UART_MspInit+0x178>)
 8002e06:	4a1e      	ldr	r2, [pc, #120]	; (8002e80 <HAL_UART_MspInit+0x17c>)
 8002e08:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002e0a:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <HAL_UART_MspInit+0x178>)
 8002e0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e10:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_UART_MspInit+0x178>)
 8002e14:	2240      	movs	r2, #64	; 0x40
 8002e16:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e18:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <HAL_UART_MspInit+0x178>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_UART_MspInit+0x178>)
 8002e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e24:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_UART_MspInit+0x178>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_UART_MspInit+0x178>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <HAL_UART_MspInit+0x178>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e38:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_UART_MspInit+0x178>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <HAL_UART_MspInit+0x178>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002e44:	480d      	ldr	r0, [pc, #52]	; (8002e7c <HAL_UART_MspInit+0x178>)
 8002e46:	f000 fb21 	bl	800348c <HAL_DMA_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_UART_MspInit+0x150>
      Error_Handler();
 8002e50:	f7ff fe00 	bl	8002a54 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a09      	ldr	r2, [pc, #36]	; (8002e7c <HAL_UART_MspInit+0x178>)
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
 8002e5a:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <HAL_UART_MspInit+0x178>)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e60:	bf00      	nop
 8002e62:	3730      	adds	r7, #48	; 0x30
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40011000 	.word	0x40011000
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40020400 	.word	0x40020400
 8002e74:	200002dc 	.word	0x200002dc
 8002e78:	40004800 	.word	0x40004800
 8002e7c:	200001ec 	.word	0x200001ec
 8002e80:	40026058 	.word	0x40026058

08002e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08c      	sub	sp, #48	; 0x30
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8002e94:	2200      	movs	r2, #0
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	202d      	movs	r0, #45	; 0x2d
 8002e9a:	f000 fab1 	bl	8003400 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002e9e:	202d      	movs	r0, #45	; 0x2d
 8002ea0:	f000 faca 	bl	8003438 <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <HAL_InitTick+0xa4>)
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	4a1e      	ldr	r2, [pc, #120]	; (8002f28 <HAL_InitTick+0xa4>)
 8002eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb4:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <HAL_InitTick+0xa4>)
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ec0:	f107 0210 	add.w	r2, r7, #16
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f002 fc88 	bl	80057e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ed0:	f002 fc5e 	bl	8005790 <HAL_RCC_GetPCLK1Freq>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002edc:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <HAL_InitTick+0xa8>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	0c9b      	lsrs	r3, r3, #18
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002ee8:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <HAL_InitTick+0xac>)
 8002eea:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <HAL_InitTick+0xb0>)
 8002eec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8002eee:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <HAL_InitTick+0xac>)
 8002ef0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ef4:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002ef6:	4a0e      	ldr	r2, [pc, #56]	; (8002f30 <HAL_InitTick+0xac>)
 8002ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efa:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <HAL_InitTick+0xac>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_InitTick+0xac>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8002f08:	4809      	ldr	r0, [pc, #36]	; (8002f30 <HAL_InitTick+0xac>)
 8002f0a:	f002 fcff 	bl	800590c <HAL_TIM_Base_Init>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d104      	bne.n	8002f1e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8002f14:	4806      	ldr	r0, [pc, #24]	; (8002f30 <HAL_InitTick+0xac>)
 8002f16:	f002 fd24 	bl	8005962 <HAL_TIM_Base_Start_IT>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	e000      	b.n	8002f20 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3730      	adds	r7, #48	; 0x30
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	431bde83 	.word	0x431bde83
 8002f30:	200006e8 	.word	0x200006e8
 8002f34:	40002000 	.word	0x40002000

08002f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f46:	b480      	push	{r7}
 8002f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f4a:	e7fe      	b.n	8002f4a <HardFault_Handler+0x4>

08002f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f50:	e7fe      	b.n	8002f50 <MemManage_Handler+0x4>

08002f52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f56:	e7fe      	b.n	8002f56 <BusFault_Handler+0x4>

08002f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f5c:	e7fe      	b.n	8002f5c <UsageFault_Handler+0x4>

08002f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f62:	bf00      	nop
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002f9c:	4802      	ldr	r0, [pc, #8]	; (8002fa8 <DMA1_Stream3_IRQHandler+0x10>)
 8002f9e:	f000 fb23 	bl	80035e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */
  /* Check half-transfer complete interrupt */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200001ec 	.word	0x200001ec

08002fac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fb0:	4802      	ldr	r0, [pc, #8]	; (8002fbc <TIM2_IRQHandler+0x10>)
 8002fb2:	f002 fd6d 	bl	8005a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000630 	.word	0x20000630

08002fc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
//	   if (LL_USART_IsEnabledIT_IDLE(USART1) && LL_USART_IsActiveFlag_IDLE(USART1)) {
//	        LL_USART_ClearFlag_IDLE(USART1);        /* Clear IDLE line flag */
//	        usart_rx_check();                       /* Check for data to process */
//	    }
			if((huart1.Instance->DR == 'w')){
 8002fc6:	4b52      	ldr	r3, [pc, #328]	; (8003110 <USART1_IRQHandler+0x150>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b77      	cmp	r3, #119	; 0x77
 8002fce:	d103      	bne.n	8002fd8 <USART1_IRQHandler+0x18>
				velocity = 350;
 8002fd0:	4b50      	ldr	r3, [pc, #320]	; (8003114 <USART1_IRQHandler+0x154>)
 8002fd2:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8002fd6:	601a      	str	r2, [r3, #0]
			}
			if((huart1.Instance->DR == 'a')){
 8002fd8:	4b4d      	ldr	r3, [pc, #308]	; (8003110 <USART1_IRQHandler+0x150>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b61      	cmp	r3, #97	; 0x61
 8002fe0:	d113      	bne.n	800300a <USART1_IRQHandler+0x4a>
				if(set_point > -180)
 8002fe2:	4b4d      	ldr	r3, [pc, #308]	; (8003118 <USART1_IRQHandler+0x158>)
 8002fe4:	edd3 7a00 	vldr	s15, [r3]
 8002fe8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800311c <USART1_IRQHandler+0x15c>
 8002fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff4:	dd09      	ble.n	800300a <USART1_IRQHandler+0x4a>
				   set_point-=5;
 8002ff6:	4b48      	ldr	r3, [pc, #288]	; (8003118 <USART1_IRQHandler+0x158>)
 8002ff8:	edd3 7a00 	vldr	s15, [r3]
 8002ffc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003000:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003004:	4b44      	ldr	r3, [pc, #272]	; (8003118 <USART1_IRQHandler+0x158>)
 8003006:	edc3 7a00 	vstr	s15, [r3]
			}
			if((huart1.Instance->DR == 'd')){
 800300a:	4b41      	ldr	r3, [pc, #260]	; (8003110 <USART1_IRQHandler+0x150>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b64      	cmp	r3, #100	; 0x64
 8003012:	d113      	bne.n	800303c <USART1_IRQHandler+0x7c>
				if(set_point < 180)
 8003014:	4b40      	ldr	r3, [pc, #256]	; (8003118 <USART1_IRQHandler+0x158>)
 8003016:	edd3 7a00 	vldr	s15, [r3]
 800301a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003120 <USART1_IRQHandler+0x160>
 800301e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003026:	d509      	bpl.n	800303c <USART1_IRQHandler+0x7c>
				   set_point+=5;
 8003028:	4b3b      	ldr	r3, [pc, #236]	; (8003118 <USART1_IRQHandler+0x158>)
 800302a:	edd3 7a00 	vldr	s15, [r3]
 800302e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003032:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003036:	4b38      	ldr	r3, [pc, #224]	; (8003118 <USART1_IRQHandler+0x158>)
 8003038:	edc3 7a00 	vstr	s15, [r3]
			}
			if((huart1.Instance->DR == 'x')){
 800303c:	4b34      	ldr	r3, [pc, #208]	; (8003110 <USART1_IRQHandler+0x150>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b78      	cmp	r3, #120	; 0x78
 8003044:	d102      	bne.n	800304c <USART1_IRQHandler+0x8c>
				velocity = 0;
 8003046:	4b33      	ldr	r3, [pc, #204]	; (8003114 <USART1_IRQHandler+0x154>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
			}
			if((huart1.Instance->DR == 'z')){
 800304c:	4b30      	ldr	r3, [pc, #192]	; (8003110 <USART1_IRQHandler+0x150>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b7a      	cmp	r3, #122	; 0x7a
 8003054:	d102      	bne.n	800305c <USART1_IRQHandler+0x9c>
						velocity = -500;
 8003056:	4b2f      	ldr	r3, [pc, #188]	; (8003114 <USART1_IRQHandler+0x154>)
 8003058:	4a32      	ldr	r2, [pc, #200]	; (8003124 <USART1_IRQHandler+0x164>)
 800305a:	601a      	str	r2, [r3, #0]
					}
			if((huart1.Instance->DR == 'f')){
 800305c:	4b2c      	ldr	r3, [pc, #176]	; (8003110 <USART1_IRQHandler+0x150>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b66      	cmp	r3, #102	; 0x66
 8003064:	d109      	bne.n	800307a <USART1_IRQHandler+0xba>
				if(velocity > -500)
 8003066:	4b2b      	ldr	r3, [pc, #172]	; (8003114 <USART1_IRQHandler+0x154>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800306e:	dd04      	ble.n	800307a <USART1_IRQHandler+0xba>
				   velocity -= 30;
 8003070:	4b28      	ldr	r3, [pc, #160]	; (8003114 <USART1_IRQHandler+0x154>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3b1e      	subs	r3, #30
 8003076:	4a27      	ldr	r2, [pc, #156]	; (8003114 <USART1_IRQHandler+0x154>)
 8003078:	6013      	str	r3, [r2, #0]
			}
			if((huart1.Instance->DR == 's')){
 800307a:	4b25      	ldr	r3, [pc, #148]	; (8003110 <USART1_IRQHandler+0x150>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b73      	cmp	r3, #115	; 0x73
 8003082:	d111      	bne.n	80030a8 <USART1_IRQHandler+0xe8>

						j = 0;
 8003084:	4b28      	ldr	r3, [pc, #160]	; (8003128 <USART1_IRQHandler+0x168>)
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
			//			BOARD_MODE = FLY_MODE;

			             for(int count = 0; count< 24; count++)
 800308a:	2300      	movs	r3, #0
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	e007      	b.n	80030a0 <USART1_IRQHandler+0xe0>
			            	 Rx_buffer[count] = 0x00;
 8003090:	4a26      	ldr	r2, [pc, #152]	; (800312c <USART1_IRQHandler+0x16c>)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	2200      	movs	r2, #0
 8003098:	701a      	strb	r2, [r3, #0]
			             for(int count = 0; count< 24; count++)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3301      	adds	r3, #1
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b17      	cmp	r3, #23
 80030a4:	ddf4      	ble.n	8003090 <USART1_IRQHandler+0xd0>
 80030a6:	e024      	b.n	80030f2 <USART1_IRQHandler+0x132>
					}
					else{
						if((huart1.Instance->DR != 'e')){
 80030a8:	4b19      	ldr	r3, [pc, #100]	; (8003110 <USART1_IRQHandler+0x150>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b65      	cmp	r3, #101	; 0x65
 80030b0:	d00d      	beq.n	80030ce <USART1_IRQHandler+0x10e>
						 Rx_buffer[j] = huart1.Instance->DR;
 80030b2:	4b17      	ldr	r3, [pc, #92]	; (8003110 <USART1_IRQHandler+0x150>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <USART1_IRQHandler+0x168>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	b2d1      	uxtb	r1, r2
 80030be:	4a1b      	ldr	r2, [pc, #108]	; (800312c <USART1_IRQHandler+0x16c>)
 80030c0:	54d1      	strb	r1, [r2, r3]
						 j++;
 80030c2:	4b19      	ldr	r3, [pc, #100]	; (8003128 <USART1_IRQHandler+0x168>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3301      	adds	r3, #1
 80030c8:	4a17      	ldr	r2, [pc, #92]	; (8003128 <USART1_IRQHandler+0x168>)
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	e011      	b.n	80030f2 <USART1_IRQHandler+0x132>
			//			 HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);

						}
						else{

								for(uint8_t k = 0; k<8; k++){
 80030ce:	2300      	movs	r3, #0
 80030d0:	70fb      	strb	r3, [r7, #3]
 80030d2:	e008      	b.n	80030e6 <USART1_IRQHandler+0x126>
			                        sbus_buffer[k] = Rx_buffer[k];
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	4914      	ldr	r1, [pc, #80]	; (800312c <USART1_IRQHandler+0x16c>)
 80030da:	5c89      	ldrb	r1, [r1, r2]
 80030dc:	4a14      	ldr	r2, [pc, #80]	; (8003130 <USART1_IRQHandler+0x170>)
 80030de:	54d1      	strb	r1, [r2, r3]
								for(uint8_t k = 0; k<8; k++){
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	3301      	adds	r3, #1
 80030e4:	70fb      	strb	r3, [r7, #3]
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	2b07      	cmp	r3, #7
 80030ea:	d9f3      	bls.n	80030d4 <USART1_IRQHandler+0x114>
								}
								j = 0;
 80030ec:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <USART1_IRQHandler+0x168>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
//								}


//
//			                Rx_data[0] = 0;
			__HAL_UART_FLUSH_DRREGISTER(&huart1);
 80030f2:	4b07      	ldr	r3, [pc, #28]	; (8003110 <USART1_IRQHandler+0x150>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
			__HAL_UART_CLEAR_FLAG(&huart1,UART_FLAG_RXNE);
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <USART1_IRQHandler+0x150>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0220 	mvn.w	r2, #32
 8003100:	601a      	str	r2, [r3, #0]

	return;  // To avoid calling the handler at all
 8003102:	bf00      	nop
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */


  /* USER CODE END USART1_IRQn 1 */
}
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	200002dc 	.word	0x200002dc
 8003114:	200000b0 	.word	0x200000b0
 8003118:	200000ac 	.word	0x200000ac
 800311c:	c3340000 	.word	0xc3340000
 8003120:	43340000 	.word	0x43340000
 8003124:	fffffe0c 	.word	0xfffffe0c
 8003128:	200000b4 	.word	0x200000b4
 800312c:	20000690 	.word	0x20000690
 8003130:	200002d4 	.word	0x200002d4

08003134 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003138:	4802      	ldr	r0, [pc, #8]	; (8003144 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800313a:	f002 fca9 	bl	8005a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	200006e8 	.word	0x200006e8

08003148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800314c:	4b08      	ldr	r3, [pc, #32]	; (8003170 <SystemInit+0x28>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003152:	4a07      	ldr	r2, [pc, #28]	; (8003170 <SystemInit+0x28>)
 8003154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <SystemInit+0x28>)
 800315e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003162:	609a      	str	r2, [r3, #8]
#endif
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003178:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800317a:	e003      	b.n	8003184 <LoopCopyDataInit>

0800317c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800317e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003180:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003182:	3104      	adds	r1, #4

08003184 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003184:	480b      	ldr	r0, [pc, #44]	; (80031b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003186:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003188:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800318a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800318c:	d3f6      	bcc.n	800317c <CopyDataInit>
  ldr  r2, =_sbss
 800318e:	4a0b      	ldr	r2, [pc, #44]	; (80031bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003190:	e002      	b.n	8003198 <LoopFillZerobss>

08003192 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003192:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003194:	f842 3b04 	str.w	r3, [r2], #4

08003198 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003198:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800319a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800319c:	d3f9      	bcc.n	8003192 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800319e:	f7ff ffd3 	bl	8003148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031a2:	f003 ffc7 	bl	8007134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031a6:	f7ff f8b1 	bl	800230c <main>
  bx  lr    
 80031aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80031b0:	08007468 	.word	0x08007468
  ldr  r0, =_sdata
 80031b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80031b8:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80031bc:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80031c0:	2000072c 	.word	0x2000072c

080031c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031c4:	e7fe      	b.n	80031c4 <ADC_IRQHandler>
	...

080031c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031cc:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <HAL_Init+0x40>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0d      	ldr	r2, [pc, #52]	; (8003208 <HAL_Init+0x40>)
 80031d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_Init+0x40>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <HAL_Init+0x40>)
 80031de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031e4:	4b08      	ldr	r3, [pc, #32]	; (8003208 <HAL_Init+0x40>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a07      	ldr	r2, [pc, #28]	; (8003208 <HAL_Init+0x40>)
 80031ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031f0:	2003      	movs	r0, #3
 80031f2:	f000 f8fa 	bl	80033ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7ff fe44 	bl	8002e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031fc:	f7ff fc32 	bl	8002a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40023c00 	.word	0x40023c00

0800320c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_IncTick+0x20>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_IncTick+0x24>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4413      	add	r3, r2
 800321c:	4a04      	ldr	r2, [pc, #16]	; (8003230 <HAL_IncTick+0x24>)
 800321e:	6013      	str	r3, [r2, #0]
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20000018 	.word	0x20000018
 8003230:	20000728 	.word	0x20000728

08003234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return uwTick;
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <HAL_GetTick+0x14>)
 800323a:	681b      	ldr	r3, [r3, #0]
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20000728 	.word	0x20000728

0800324c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003254:	f7ff ffee 	bl	8003234 <HAL_GetTick>
 8003258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003264:	d005      	beq.n	8003272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_Delay+0x40>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003272:	bf00      	nop
 8003274:	f7ff ffde 	bl	8003234 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	429a      	cmp	r2, r3
 8003282:	d8f7      	bhi.n	8003274 <HAL_Delay+0x28>
  {
  }
}
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000018 	.word	0x20000018

08003290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <__NVIC_SetPriorityGrouping+0x44>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032ac:	4013      	ands	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c2:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <__NVIC_SetPriorityGrouping+0x44>)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	60d3      	str	r3, [r2, #12]
}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <__NVIC_GetPriorityGrouping+0x18>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	f003 0307 	and.w	r3, r3, #7
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	2b00      	cmp	r3, #0
 8003304:	db0b      	blt.n	800331e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	f003 021f 	and.w	r2, r3, #31
 800330c:	4907      	ldr	r1, [pc, #28]	; (800332c <__NVIC_EnableIRQ+0x38>)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2001      	movs	r0, #1
 8003316:	fa00 f202 	lsl.w	r2, r0, r2
 800331a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	e000e100 	.word	0xe000e100

08003330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	6039      	str	r1, [r7, #0]
 800333a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003340:	2b00      	cmp	r3, #0
 8003342:	db0a      	blt.n	800335a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	b2da      	uxtb	r2, r3
 8003348:	490c      	ldr	r1, [pc, #48]	; (800337c <__NVIC_SetPriority+0x4c>)
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	0112      	lsls	r2, r2, #4
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	440b      	add	r3, r1
 8003354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003358:	e00a      	b.n	8003370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	b2da      	uxtb	r2, r3
 800335e:	4908      	ldr	r1, [pc, #32]	; (8003380 <__NVIC_SetPriority+0x50>)
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	3b04      	subs	r3, #4
 8003368:	0112      	lsls	r2, r2, #4
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	440b      	add	r3, r1
 800336e:	761a      	strb	r2, [r3, #24]
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000e100 	.word	0xe000e100
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	; 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f1c3 0307 	rsb	r3, r3, #7
 800339e:	2b04      	cmp	r3, #4
 80033a0:	bf28      	it	cs
 80033a2:	2304      	movcs	r3, #4
 80033a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3304      	adds	r3, #4
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d902      	bls.n	80033b4 <NVIC_EncodePriority+0x30>
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3b03      	subs	r3, #3
 80033b2:	e000      	b.n	80033b6 <NVIC_EncodePriority+0x32>
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b8:	f04f 32ff 	mov.w	r2, #4294967295
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43da      	mvns	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	401a      	ands	r2, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033cc:	f04f 31ff 	mov.w	r1, #4294967295
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	fa01 f303 	lsl.w	r3, r1, r3
 80033d6:	43d9      	mvns	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033dc:	4313      	orrs	r3, r2
         );
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3724      	adds	r7, #36	; 0x24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff ff4c 	bl	8003290 <__NVIC_SetPriorityGrouping>
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003412:	f7ff ff61 	bl	80032d8 <__NVIC_GetPriorityGrouping>
 8003416:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	6978      	ldr	r0, [r7, #20]
 800341e:	f7ff ffb1 	bl	8003384 <NVIC_EncodePriority>
 8003422:	4602      	mov	r2, r0
 8003424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff ff80 	bl	8003330 <__NVIC_SetPriority>
}
 8003430:	bf00      	nop
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff ff54 	bl	80032f4 <__NVIC_EnableIRQ>
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e00e      	b.n	8003484 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	795b      	ldrb	r3, [r3, #5]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d105      	bne.n	800347c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff fb1c 	bl	8002ab4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003498:	f7ff fecc 	bl	8003234 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e099      	b.n	80035dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0201 	bic.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034c8:	e00f      	b.n	80034ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034ca:	f7ff feb3 	bl	8003234 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b05      	cmp	r3, #5
 80034d6:	d908      	bls.n	80034ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2203      	movs	r2, #3
 80034e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e078      	b.n	80035dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e8      	bne.n	80034ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	4b38      	ldr	r3, [pc, #224]	; (80035e4 <HAL_DMA_Init+0x158>)
 8003504:	4013      	ands	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003516:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003522:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800352e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	2b04      	cmp	r3, #4
 8003542:	d107      	bne.n	8003554 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	4313      	orrs	r3, r2
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f023 0307 	bic.w	r3, r3, #7
 800356a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	2b04      	cmp	r3, #4
 800357c:	d117      	bne.n	80035ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00e      	beq.n	80035ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f9e9 	bl	8003968 <DMA_CheckFifoParam>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2240      	movs	r2, #64	; 0x40
 80035a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035aa:	2301      	movs	r3, #1
 80035ac:	e016      	b.n	80035dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f9a0 	bl	80038fc <DMA_CalcBaseAndBitshift>
 80035bc:	4603      	mov	r3, r0
 80035be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c4:	223f      	movs	r2, #63	; 0x3f
 80035c6:	409a      	lsls	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	f010803f 	.word	0xf010803f

080035e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035f4:	4b92      	ldr	r3, [pc, #584]	; (8003840 <HAL_DMA_IRQHandler+0x258>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a92      	ldr	r2, [pc, #584]	; (8003844 <HAL_DMA_IRQHandler+0x25c>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	0a9b      	lsrs	r3, r3, #10
 8003600:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003606:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003612:	2208      	movs	r2, #8
 8003614:	409a      	lsls	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4013      	ands	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d01a      	beq.n	8003654 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d013      	beq.n	8003654 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0204 	bic.w	r2, r2, #4
 800363a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003640:	2208      	movs	r2, #8
 8003642:	409a      	lsls	r2, r3
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364c:	f043 0201 	orr.w	r2, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003658:	2201      	movs	r2, #1
 800365a:	409a      	lsls	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4013      	ands	r3, r2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d012      	beq.n	800368a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00b      	beq.n	800368a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003676:	2201      	movs	r2, #1
 8003678:	409a      	lsls	r2, r3
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003682:	f043 0202 	orr.w	r2, r3, #2
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	2204      	movs	r2, #4
 8003690:	409a      	lsls	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4013      	ands	r3, r2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d012      	beq.n	80036c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00b      	beq.n	80036c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ac:	2204      	movs	r2, #4
 80036ae:	409a      	lsls	r2, r3
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b8:	f043 0204 	orr.w	r2, r3, #4
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c4:	2210      	movs	r2, #16
 80036c6:	409a      	lsls	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d043      	beq.n	8003758 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d03c      	beq.n	8003758 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e2:	2210      	movs	r2, #16
 80036e4:	409a      	lsls	r2, r3
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d018      	beq.n	800372a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d108      	bne.n	8003718 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d024      	beq.n	8003758 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	4798      	blx	r3
 8003716:	e01f      	b.n	8003758 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01b      	beq.n	8003758 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	4798      	blx	r3
 8003728:	e016      	b.n	8003758 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d107      	bne.n	8003748 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0208 	bic.w	r2, r2, #8
 8003746:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375c:	2220      	movs	r2, #32
 800375e:	409a      	lsls	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 808e 	beq.w	8003886 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8086 	beq.w	8003886 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377e:	2220      	movs	r2, #32
 8003780:	409a      	lsls	r2, r3
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b05      	cmp	r3, #5
 8003790:	d136      	bne.n	8003800 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0216 	bic.w	r2, r2, #22
 80037a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695a      	ldr	r2, [r3, #20]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <HAL_DMA_IRQHandler+0x1da>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d007      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0208 	bic.w	r2, r2, #8
 80037d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d6:	223f      	movs	r2, #63	; 0x3f
 80037d8:	409a      	lsls	r2, r3
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d07d      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	4798      	blx	r3
        }
        return;
 80037fe:	e078      	b.n	80038f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d01c      	beq.n	8003848 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d108      	bne.n	800382e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003820:	2b00      	cmp	r3, #0
 8003822:	d030      	beq.n	8003886 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
 800382c:	e02b      	b.n	8003886 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d027      	beq.n	8003886 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
 800383e:	e022      	b.n	8003886 <HAL_DMA_IRQHandler+0x29e>
 8003840:	20000010 	.word	0x20000010
 8003844:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10f      	bne.n	8003876 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0210 	bic.w	r2, r2, #16
 8003864:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	2b00      	cmp	r3, #0
 800388c:	d032      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d022      	beq.n	80038e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2205      	movs	r2, #5
 800389e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0201 	bic.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	3301      	adds	r3, #1
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d307      	bcc.n	80038ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1f2      	bne.n	80038b2 <HAL_DMA_IRQHandler+0x2ca>
 80038cc:	e000      	b.n	80038d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80038ce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	4798      	blx	r3
 80038f0:	e000      	b.n	80038f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80038f2:	bf00      	nop
    }
  }
}
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop

080038fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	3b10      	subs	r3, #16
 800390c:	4a14      	ldr	r2, [pc, #80]	; (8003960 <DMA_CalcBaseAndBitshift+0x64>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	091b      	lsrs	r3, r3, #4
 8003914:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003916:	4a13      	ldr	r2, [pc, #76]	; (8003964 <DMA_CalcBaseAndBitshift+0x68>)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4413      	add	r3, r2
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b03      	cmp	r3, #3
 8003928:	d909      	bls.n	800393e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003932:	f023 0303 	bic.w	r3, r3, #3
 8003936:	1d1a      	adds	r2, r3, #4
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	659a      	str	r2, [r3, #88]	; 0x58
 800393c:	e007      	b.n	800394e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003946:	f023 0303 	bic.w	r3, r3, #3
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	aaaaaaab 	.word	0xaaaaaaab
 8003964:	08007448 	.word	0x08007448

08003968 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d11f      	bne.n	80039c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d855      	bhi.n	8003a34 <DMA_CheckFifoParam+0xcc>
 8003988:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <DMA_CheckFifoParam+0x28>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039a1 	.word	0x080039a1
 8003994:	080039b3 	.word	0x080039b3
 8003998:	080039a1 	.word	0x080039a1
 800399c:	08003a35 	.word	0x08003a35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d045      	beq.n	8003a38 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b0:	e042      	b.n	8003a38 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039ba:	d13f      	bne.n	8003a3c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c0:	e03c      	b.n	8003a3c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ca:	d121      	bne.n	8003a10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d836      	bhi.n	8003a40 <DMA_CheckFifoParam+0xd8>
 80039d2:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <DMA_CheckFifoParam+0x70>)
 80039d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d8:	080039e9 	.word	0x080039e9
 80039dc:	080039ef 	.word	0x080039ef
 80039e0:	080039e9 	.word	0x080039e9
 80039e4:	08003a01 	.word	0x08003a01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
      break;
 80039ec:	e02f      	b.n	8003a4e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d024      	beq.n	8003a44 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039fe:	e021      	b.n	8003a44 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a08:	d11e      	bne.n	8003a48 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a0e:	e01b      	b.n	8003a48 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d902      	bls.n	8003a1c <DMA_CheckFifoParam+0xb4>
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d003      	beq.n	8003a22 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a1a:	e018      	b.n	8003a4e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a20:	e015      	b.n	8003a4e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00e      	beq.n	8003a4c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	73fb      	strb	r3, [r7, #15]
      break;
 8003a32:	e00b      	b.n	8003a4c <DMA_CheckFifoParam+0xe4>
      break;
 8003a34:	bf00      	nop
 8003a36:	e00a      	b.n	8003a4e <DMA_CheckFifoParam+0xe6>
      break;
 8003a38:	bf00      	nop
 8003a3a:	e008      	b.n	8003a4e <DMA_CheckFifoParam+0xe6>
      break;
 8003a3c:	bf00      	nop
 8003a3e:	e006      	b.n	8003a4e <DMA_CheckFifoParam+0xe6>
      break;
 8003a40:	bf00      	nop
 8003a42:	e004      	b.n	8003a4e <DMA_CheckFifoParam+0xe6>
      break;
 8003a44:	bf00      	nop
 8003a46:	e002      	b.n	8003a4e <DMA_CheckFifoParam+0xe6>
      break;   
 8003a48:	bf00      	nop
 8003a4a:	e000      	b.n	8003a4e <DMA_CheckFifoParam+0xe6>
      break;
 8003a4c:	bf00      	nop
    }
  } 
  
  return status; 
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b089      	sub	sp, #36	; 0x24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
 8003a76:	e16b      	b.n	8003d50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a78:	2201      	movs	r2, #1
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	f040 815a 	bne.w	8003d4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d00b      	beq.n	8003ab6 <HAL_GPIO_Init+0x5a>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d007      	beq.n	8003ab6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003aaa:	2b11      	cmp	r3, #17
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b12      	cmp	r3, #18
 8003ab4:	d130      	bne.n	8003b18 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4013      	ands	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aec:	2201      	movs	r2, #1
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	43db      	mvns	r3, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4013      	ands	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	f003 0201 	and.w	r2, r3, #1
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	2203      	movs	r2, #3
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d003      	beq.n	8003b58 <HAL_GPIO_Init+0xfc>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b12      	cmp	r3, #18
 8003b56:	d123      	bne.n	8003ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	08da      	lsrs	r2, r3, #3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3208      	adds	r2, #8
 8003b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	220f      	movs	r2, #15
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	08da      	lsrs	r2, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3208      	adds	r2, #8
 8003b9a:	69b9      	ldr	r1, [r7, #24]
 8003b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	2203      	movs	r2, #3
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0203 	and.w	r2, r3, #3
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80b4 	beq.w	8003d4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	4b5f      	ldr	r3, [pc, #380]	; (8003d64 <HAL_GPIO_Init+0x308>)
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	4a5e      	ldr	r2, [pc, #376]	; (8003d64 <HAL_GPIO_Init+0x308>)
 8003bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bf2:	4b5c      	ldr	r3, [pc, #368]	; (8003d64 <HAL_GPIO_Init+0x308>)
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bfe:	4a5a      	ldr	r2, [pc, #360]	; (8003d68 <HAL_GPIO_Init+0x30c>)
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	3302      	adds	r3, #2
 8003c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	220f      	movs	r2, #15
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a51      	ldr	r2, [pc, #324]	; (8003d6c <HAL_GPIO_Init+0x310>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d02b      	beq.n	8003c82 <HAL_GPIO_Init+0x226>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a50      	ldr	r2, [pc, #320]	; (8003d70 <HAL_GPIO_Init+0x314>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d025      	beq.n	8003c7e <HAL_GPIO_Init+0x222>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a4f      	ldr	r2, [pc, #316]	; (8003d74 <HAL_GPIO_Init+0x318>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d01f      	beq.n	8003c7a <HAL_GPIO_Init+0x21e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a4e      	ldr	r2, [pc, #312]	; (8003d78 <HAL_GPIO_Init+0x31c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d019      	beq.n	8003c76 <HAL_GPIO_Init+0x21a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a4d      	ldr	r2, [pc, #308]	; (8003d7c <HAL_GPIO_Init+0x320>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d013      	beq.n	8003c72 <HAL_GPIO_Init+0x216>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a4c      	ldr	r2, [pc, #304]	; (8003d80 <HAL_GPIO_Init+0x324>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00d      	beq.n	8003c6e <HAL_GPIO_Init+0x212>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a4b      	ldr	r2, [pc, #300]	; (8003d84 <HAL_GPIO_Init+0x328>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d007      	beq.n	8003c6a <HAL_GPIO_Init+0x20e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a4a      	ldr	r2, [pc, #296]	; (8003d88 <HAL_GPIO_Init+0x32c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d101      	bne.n	8003c66 <HAL_GPIO_Init+0x20a>
 8003c62:	2307      	movs	r3, #7
 8003c64:	e00e      	b.n	8003c84 <HAL_GPIO_Init+0x228>
 8003c66:	2308      	movs	r3, #8
 8003c68:	e00c      	b.n	8003c84 <HAL_GPIO_Init+0x228>
 8003c6a:	2306      	movs	r3, #6
 8003c6c:	e00a      	b.n	8003c84 <HAL_GPIO_Init+0x228>
 8003c6e:	2305      	movs	r3, #5
 8003c70:	e008      	b.n	8003c84 <HAL_GPIO_Init+0x228>
 8003c72:	2304      	movs	r3, #4
 8003c74:	e006      	b.n	8003c84 <HAL_GPIO_Init+0x228>
 8003c76:	2303      	movs	r3, #3
 8003c78:	e004      	b.n	8003c84 <HAL_GPIO_Init+0x228>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e002      	b.n	8003c84 <HAL_GPIO_Init+0x228>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <HAL_GPIO_Init+0x228>
 8003c82:	2300      	movs	r3, #0
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	f002 0203 	and.w	r2, r2, #3
 8003c8a:	0092      	lsls	r2, r2, #2
 8003c8c:	4093      	lsls	r3, r2
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c94:	4934      	ldr	r1, [pc, #208]	; (8003d68 <HAL_GPIO_Init+0x30c>)
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	089b      	lsrs	r3, r3, #2
 8003c9a:	3302      	adds	r3, #2
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ca2:	4b3a      	ldr	r3, [pc, #232]	; (8003d8c <HAL_GPIO_Init+0x330>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	43db      	mvns	r3, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cc6:	4a31      	ldr	r2, [pc, #196]	; (8003d8c <HAL_GPIO_Init+0x330>)
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ccc:	4b2f      	ldr	r3, [pc, #188]	; (8003d8c <HAL_GPIO_Init+0x330>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cf0:	4a26      	ldr	r2, [pc, #152]	; (8003d8c <HAL_GPIO_Init+0x330>)
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cf6:	4b25      	ldr	r3, [pc, #148]	; (8003d8c <HAL_GPIO_Init+0x330>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d1a:	4a1c      	ldr	r2, [pc, #112]	; (8003d8c <HAL_GPIO_Init+0x330>)
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d20:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <HAL_GPIO_Init+0x330>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d44:	4a11      	ldr	r2, [pc, #68]	; (8003d8c <HAL_GPIO_Init+0x330>)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b0f      	cmp	r3, #15
 8003d54:	f67f ae90 	bls.w	8003a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3724      	adds	r7, #36	; 0x24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40013800 	.word	0x40013800
 8003d6c:	40020000 	.word	0x40020000
 8003d70:	40020400 	.word	0x40020400
 8003d74:	40020800 	.word	0x40020800
 8003d78:	40020c00 	.word	0x40020c00
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	40021400 	.word	0x40021400
 8003d84:	40021800 	.word	0x40021800
 8003d88:	40021c00 	.word	0x40021c00
 8003d8c:	40013c00 	.word	0x40013c00

08003d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	807b      	strh	r3, [r7, #2]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003da0:	787b      	ldrb	r3, [r7, #1]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003da6:	887a      	ldrh	r2, [r7, #2]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dac:	e003      	b.n	8003db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dae:	887b      	ldrh	r3, [r7, #2]
 8003db0:	041a      	lsls	r2, r3, #16
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	619a      	str	r2, [r3, #24]
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	887b      	ldrh	r3, [r7, #2]
 8003dd4:	401a      	ands	r2, r3
 8003dd6:	887b      	ldrh	r3, [r7, #2]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d104      	bne.n	8003de6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ddc:	887b      	ldrh	r3, [r7, #2]
 8003dde:	041a      	lsls	r2, r3, #16
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003de4:	e002      	b.n	8003dec <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003de6:	887a      	ldrh	r2, [r7, #2]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	619a      	str	r2, [r3, #24]
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e11f      	b.n	800404a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fe fe6a 	bl	8002af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2224      	movs	r2, #36	; 0x24
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e5c:	f001 fc98 	bl	8005790 <HAL_RCC_GetPCLK1Freq>
 8003e60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	4a7b      	ldr	r2, [pc, #492]	; (8004054 <HAL_I2C_Init+0x25c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d807      	bhi.n	8003e7c <HAL_I2C_Init+0x84>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4a7a      	ldr	r2, [pc, #488]	; (8004058 <HAL_I2C_Init+0x260>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	bf94      	ite	ls
 8003e74:	2301      	movls	r3, #1
 8003e76:	2300      	movhi	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	e006      	b.n	8003e8a <HAL_I2C_Init+0x92>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4a77      	ldr	r2, [pc, #476]	; (800405c <HAL_I2C_Init+0x264>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	bf94      	ite	ls
 8003e84:	2301      	movls	r3, #1
 8003e86:	2300      	movhi	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e0db      	b.n	800404a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a72      	ldr	r2, [pc, #456]	; (8004060 <HAL_I2C_Init+0x268>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	0c9b      	lsrs	r3, r3, #18
 8003e9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4a64      	ldr	r2, [pc, #400]	; (8004054 <HAL_I2C_Init+0x25c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d802      	bhi.n	8003ecc <HAL_I2C_Init+0xd4>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	e009      	b.n	8003ee0 <HAL_I2C_Init+0xe8>
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ed2:	fb02 f303 	mul.w	r3, r2, r3
 8003ed6:	4a63      	ldr	r2, [pc, #396]	; (8004064 <HAL_I2C_Init+0x26c>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	099b      	lsrs	r3, r3, #6
 8003ede:	3301      	adds	r3, #1
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ef2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4956      	ldr	r1, [pc, #344]	; (8004054 <HAL_I2C_Init+0x25c>)
 8003efc:	428b      	cmp	r3, r1
 8003efe:	d80d      	bhi.n	8003f1c <HAL_I2C_Init+0x124>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1e59      	subs	r1, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f0e:	3301      	adds	r3, #1
 8003f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	bf38      	it	cc
 8003f18:	2304      	movcc	r3, #4
 8003f1a:	e04f      	b.n	8003fbc <HAL_I2C_Init+0x1c4>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d111      	bne.n	8003f48 <HAL_I2C_Init+0x150>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	1e58      	subs	r0, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6859      	ldr	r1, [r3, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	440b      	add	r3, r1
 8003f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f36:	3301      	adds	r3, #1
 8003f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bf0c      	ite	eq
 8003f40:	2301      	moveq	r3, #1
 8003f42:	2300      	movne	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	e012      	b.n	8003f6e <HAL_I2C_Init+0x176>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	1e58      	subs	r0, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6859      	ldr	r1, [r3, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	0099      	lsls	r1, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f5e:	3301      	adds	r3, #1
 8003f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_I2C_Init+0x17e>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e022      	b.n	8003fbc <HAL_I2C_Init+0x1c4>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10e      	bne.n	8003f9c <HAL_I2C_Init+0x1a4>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1e58      	subs	r0, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6859      	ldr	r1, [r3, #4]
 8003f86:	460b      	mov	r3, r1
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	440b      	add	r3, r1
 8003f8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f90:	3301      	adds	r3, #1
 8003f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f9a:	e00f      	b.n	8003fbc <HAL_I2C_Init+0x1c4>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	1e58      	subs	r0, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6859      	ldr	r1, [r3, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	0099      	lsls	r1, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	6809      	ldr	r1, [r1, #0]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69da      	ldr	r2, [r3, #28]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6911      	ldr	r1, [r2, #16]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68d2      	ldr	r2, [r2, #12]
 8003ff6:	4311      	orrs	r1, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	000186a0 	.word	0x000186a0
 8004058:	001e847f 	.word	0x001e847f
 800405c:	003d08ff 	.word	0x003d08ff
 8004060:	431bde83 	.word	0x431bde83
 8004064:	10624dd3 	.word	0x10624dd3

08004068 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	461a      	mov	r2, r3
 8004074:	460b      	mov	r3, r1
 8004076:	817b      	strh	r3, [r7, #10]
 8004078:	4613      	mov	r3, r2
 800407a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800407c:	f7ff f8da 	bl	8003234 <HAL_GetTick>
 8004080:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b20      	cmp	r3, #32
 800408c:	f040 80e0 	bne.w	8004250 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	2319      	movs	r3, #25
 8004096:	2201      	movs	r2, #1
 8004098:	4970      	ldr	r1, [pc, #448]	; (800425c <HAL_I2C_Master_Transmit+0x1f4>)
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fd86 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80040a6:	2302      	movs	r3, #2
 80040a8:	e0d3      	b.n	8004252 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_I2C_Master_Transmit+0x50>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e0cc      	b.n	8004252 <HAL_I2C_Master_Transmit+0x1ea>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d007      	beq.n	80040de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 0201 	orr.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2221      	movs	r2, #33	; 0x21
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2210      	movs	r2, #16
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	893a      	ldrh	r2, [r7, #8]
 800410e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4a50      	ldr	r2, [pc, #320]	; (8004260 <HAL_I2C_Master_Transmit+0x1f8>)
 800411e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004120:	8979      	ldrh	r1, [r7, #10]
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	6a3a      	ldr	r2, [r7, #32]
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fbf0 	bl	800490c <I2C_MasterRequestWrite>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e08d      	b.n	8004252 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004136:	2300      	movs	r3, #0
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	613b      	str	r3, [r7, #16]
 800414a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800414c:	e066      	b.n	800421c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	6a39      	ldr	r1, [r7, #32]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 fe00 	bl	8004d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00d      	beq.n	800417a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	2b04      	cmp	r3, #4
 8004164:	d107      	bne.n	8004176 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004174:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e06b      	b.n	8004252 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	781a      	ldrb	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d11b      	bne.n	80041f0 <HAL_I2C_Master_Transmit+0x188>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d017      	beq.n	80041f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	781a      	ldrb	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	6a39      	ldr	r1, [r7, #32]
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fdf0 	bl	8004dda <I2C_WaitOnBTFFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00d      	beq.n	800421c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	2b04      	cmp	r3, #4
 8004206:	d107      	bne.n	8004218 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004216:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e01a      	b.n	8004252 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004220:	2b00      	cmp	r3, #0
 8004222:	d194      	bne.n	800414e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	e000      	b.n	8004252 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004250:	2302      	movs	r3, #2
  }
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	00100002 	.word	0x00100002
 8004260:	ffff0000 	.word	0xffff0000

08004264 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08c      	sub	sp, #48	; 0x30
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	607a      	str	r2, [r7, #4]
 800426e:	461a      	mov	r2, r3
 8004270:	460b      	mov	r3, r1
 8004272:	817b      	strh	r3, [r7, #10]
 8004274:	4613      	mov	r3, r2
 8004276:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004278:	f7fe ffdc 	bl	8003234 <HAL_GetTick>
 800427c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b20      	cmp	r3, #32
 8004288:	f040 820b 	bne.w	80046a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	2319      	movs	r3, #25
 8004292:	2201      	movs	r2, #1
 8004294:	497c      	ldr	r1, [pc, #496]	; (8004488 <HAL_I2C_Master_Receive+0x224>)
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 fc88 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80042a2:	2302      	movs	r3, #2
 80042a4:	e1fe      	b.n	80046a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_I2C_Master_Receive+0x50>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e1f7      	b.n	80046a4 <HAL_I2C_Master_Receive+0x440>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d007      	beq.n	80042da <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0201 	orr.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2222      	movs	r2, #34	; 0x22
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2210      	movs	r2, #16
 80042f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	893a      	ldrh	r2, [r7, #8]
 800430a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4a5c      	ldr	r2, [pc, #368]	; (800448c <HAL_I2C_Master_Receive+0x228>)
 800431a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800431c:	8979      	ldrh	r1, [r7, #10]
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fb74 	bl	8004a10 <I2C_MasterRequestRead>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e1b8      	b.n	80046a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004336:	2b00      	cmp	r3, #0
 8004338:	d113      	bne.n	8004362 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433a:	2300      	movs	r3, #0
 800433c:	623b      	str	r3, [r7, #32]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	623b      	str	r3, [r7, #32]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	623b      	str	r3, [r7, #32]
 800434e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	e18c      	b.n	800467c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004366:	2b01      	cmp	r3, #1
 8004368:	d11b      	bne.n	80043a2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004378:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	61fb      	str	r3, [r7, #28]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	61fb      	str	r3, [r7, #28]
 800438e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	e16c      	b.n	800467c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d11b      	bne.n	80043e2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ca:	2300      	movs	r3, #0
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	61bb      	str	r3, [r7, #24]
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	e14c      	b.n	800467c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004408:	e138      	b.n	800467c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440e:	2b03      	cmp	r3, #3
 8004410:	f200 80f1 	bhi.w	80045f6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004418:	2b01      	cmp	r3, #1
 800441a:	d123      	bne.n	8004464 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800441c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 fd1b 	bl	8004e5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e139      	b.n	80046a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004462:	e10b      	b.n	800467c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004468:	2b02      	cmp	r3, #2
 800446a:	d14e      	bne.n	800450a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	2200      	movs	r2, #0
 8004474:	4906      	ldr	r1, [pc, #24]	; (8004490 <HAL_I2C_Master_Receive+0x22c>)
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fb98 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d008      	beq.n	8004494 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e10e      	b.n	80046a4 <HAL_I2C_Master_Receive+0x440>
 8004486:	bf00      	nop
 8004488:	00100002 	.word	0x00100002
 800448c:	ffff0000 	.word	0xffff0000
 8004490:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691a      	ldr	r2, [r3, #16]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004508:	e0b8      	b.n	800467c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004510:	2200      	movs	r2, #0
 8004512:	4966      	ldr	r1, [pc, #408]	; (80046ac <HAL_I2C_Master_Receive+0x448>)
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 fb49 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0bf      	b.n	80046a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004532:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	2200      	movs	r2, #0
 800456e:	494f      	ldr	r1, [pc, #316]	; (80046ac <HAL_I2C_Master_Receive+0x448>)
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 fb1b 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e091      	b.n	80046a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045f4:	e042      	b.n	800467c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 fc2e 	bl	8004e5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e04c      	b.n	80046a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b04      	cmp	r3, #4
 8004648:	d118      	bne.n	800467c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004680:	2b00      	cmp	r3, #0
 8004682:	f47f aec2 	bne.w	800440a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	e000      	b.n	80046a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80046a2:	2302      	movs	r3, #2
  }
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3728      	adds	r7, #40	; 0x28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	00010004 	.word	0x00010004

080046b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08a      	sub	sp, #40	; 0x28
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	460b      	mov	r3, r1
 80046be:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80046c0:	f7fe fdb8 	bl	8003234 <HAL_GetTick>
 80046c4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80046c6:	2301      	movs	r3, #1
 80046c8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	f040 8111 	bne.w	80048fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	2319      	movs	r3, #25
 80046de:	2201      	movs	r2, #1
 80046e0:	4988      	ldr	r1, [pc, #544]	; (8004904 <HAL_I2C_IsDeviceReady+0x254>)
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 fa62 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80046ee:	2302      	movs	r3, #2
 80046f0:	e104      	b.n	80048fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_I2C_IsDeviceReady+0x50>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e0fd      	b.n	80048fc <HAL_I2C_IsDeviceReady+0x24c>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b01      	cmp	r3, #1
 8004714:	d007      	beq.n	8004726 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0201 	orr.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004734:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2224      	movs	r2, #36	; 0x24
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4a70      	ldr	r2, [pc, #448]	; (8004908 <HAL_I2C_IsDeviceReady+0x258>)
 8004748:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004758:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2200      	movs	r2, #0
 8004762:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 fa20 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004780:	d103      	bne.n	800478a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004788:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e0b6      	b.n	80048fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800478e:	897b      	ldrh	r3, [r7, #10]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800479c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800479e:	f7fe fd49 	bl	8003234 <HAL_GetTick>
 80047a2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	bf0c      	ite	eq
 80047b2:	2301      	moveq	r3, #1
 80047b4:	2300      	movne	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c8:	bf0c      	ite	eq
 80047ca:	2301      	moveq	r3, #1
 80047cc:	2300      	movne	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80047d2:	e025      	b.n	8004820 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047d4:	f7fe fd2e 	bl	8003234 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d302      	bcc.n	80047ea <HAL_I2C_IsDeviceReady+0x13a>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d103      	bne.n	80047f2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	22a0      	movs	r2, #160	; 0xa0
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004816:	bf0c      	ite	eq
 8004818:	2301      	moveq	r3, #1
 800481a:	2300      	movne	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2ba0      	cmp	r3, #160	; 0xa0
 800482a:	d005      	beq.n	8004838 <HAL_I2C_IsDeviceReady+0x188>
 800482c:	7dfb      	ldrb	r3, [r7, #23]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d102      	bne.n	8004838 <HAL_I2C_IsDeviceReady+0x188>
 8004832:	7dbb      	ldrb	r3, [r7, #22]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0cd      	beq.n	80047d4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d129      	bne.n	80048a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485e:	2300      	movs	r3, #0
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	613b      	str	r3, [r7, #16]
 8004872:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	2319      	movs	r3, #25
 800487a:	2201      	movs	r2, #1
 800487c:	4921      	ldr	r1, [pc, #132]	; (8004904 <HAL_I2C_IsDeviceReady+0x254>)
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 f994 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e036      	b.n	80048fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	e02c      	b.n	80048fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	2319      	movs	r3, #25
 80048c2:	2201      	movs	r2, #1
 80048c4:	490f      	ldr	r1, [pc, #60]	; (8004904 <HAL_I2C_IsDeviceReady+0x254>)
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 f970 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e012      	b.n	80048fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	3301      	adds	r3, #1
 80048da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	f4ff af32 	bcc.w	800474a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80048fa:	2302      	movs	r3, #2
  }
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3720      	adds	r7, #32
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	00100002 	.word	0x00100002
 8004908:	ffff0000 	.word	0xffff0000

0800490c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af02      	add	r7, sp, #8
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	460b      	mov	r3, r1
 800491a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b08      	cmp	r3, #8
 8004926:	d006      	beq.n	8004936 <I2C_MasterRequestWrite+0x2a>
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d003      	beq.n	8004936 <I2C_MasterRequestWrite+0x2a>
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004934:	d108      	bne.n	8004948 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	e00b      	b.n	8004960 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	2b12      	cmp	r3, #18
 800494e:	d107      	bne.n	8004960 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800495e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f91d 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00d      	beq.n	8004994 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004986:	d103      	bne.n	8004990 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800498e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e035      	b.n	8004a00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800499c:	d108      	bne.n	80049b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800499e:	897b      	ldrh	r3, [r7, #10]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	461a      	mov	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049ac:	611a      	str	r2, [r3, #16]
 80049ae:	e01b      	b.n	80049e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049b0:	897b      	ldrh	r3, [r7, #10]
 80049b2:	11db      	asrs	r3, r3, #7
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	f003 0306 	and.w	r3, r3, #6
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	f063 030f 	orn	r3, r3, #15
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	490e      	ldr	r1, [pc, #56]	; (8004a08 <I2C_MasterRequestWrite+0xfc>)
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f943 	bl	8004c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e010      	b.n	8004a00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049de:	897b      	ldrh	r3, [r7, #10]
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4907      	ldr	r1, [pc, #28]	; (8004a0c <I2C_MasterRequestWrite+0x100>)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f933 	bl	8004c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	00010008 	.word	0x00010008
 8004a0c:	00010002 	.word	0x00010002

08004a10 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	607a      	str	r2, [r7, #4]
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a34:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d006      	beq.n	8004a4a <I2C_MasterRequestRead+0x3a>
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d003      	beq.n	8004a4a <I2C_MasterRequestRead+0x3a>
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a48:	d108      	bne.n	8004a5c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	e00b      	b.n	8004a74 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a60:	2b11      	cmp	r3, #17
 8004a62:	d107      	bne.n	8004a74 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 f893 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00d      	beq.n	8004aa8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a9a:	d103      	bne.n	8004aa4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e079      	b.n	8004b9c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ab0:	d108      	bne.n	8004ac4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ab2:	897b      	ldrh	r3, [r7, #10]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	f043 0301 	orr.w	r3, r3, #1
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	611a      	str	r2, [r3, #16]
 8004ac2:	e05f      	b.n	8004b84 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ac4:	897b      	ldrh	r3, [r7, #10]
 8004ac6:	11db      	asrs	r3, r3, #7
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f003 0306 	and.w	r3, r3, #6
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	f063 030f 	orn	r3, r3, #15
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	4930      	ldr	r1, [pc, #192]	; (8004ba4 <I2C_MasterRequestRead+0x194>)
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f8b9 	bl	8004c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e054      	b.n	8004b9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004af2:	897b      	ldrh	r3, [r7, #10]
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	4929      	ldr	r1, [pc, #164]	; (8004ba8 <I2C_MasterRequestRead+0x198>)
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 f8a9 	bl	8004c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e044      	b.n	8004b9c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b12:	2300      	movs	r3, #0
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b36:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f831 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00d      	beq.n	8004b6c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b5e:	d103      	bne.n	8004b68 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b66:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e017      	b.n	8004b9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b6c:	897b      	ldrh	r3, [r7, #10]
 8004b6e:	11db      	asrs	r3, r3, #7
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f003 0306 	and.w	r3, r3, #6
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	f063 030e 	orn	r3, r3, #14
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	4907      	ldr	r1, [pc, #28]	; (8004ba8 <I2C_MasterRequestRead+0x198>)
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f865 	bl	8004c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	00010008 	.word	0x00010008
 8004ba8:	00010002 	.word	0x00010002

08004bac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bbc:	e025      	b.n	8004c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc4:	d021      	beq.n	8004c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc6:	f7fe fb35 	bl	8003234 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d302      	bcc.n	8004bdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d116      	bne.n	8004c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f043 0220 	orr.w	r2, r3, #32
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e023      	b.n	8004c52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	0c1b      	lsrs	r3, r3, #16
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d10d      	bne.n	8004c30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	43da      	mvns	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	bf0c      	ite	eq
 8004c26:	2301      	moveq	r3, #1
 8004c28:	2300      	movne	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	e00c      	b.n	8004c4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	43da      	mvns	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	bf0c      	ite	eq
 8004c42:	2301      	moveq	r3, #1
 8004c44:	2300      	movne	r3, #0
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	461a      	mov	r2, r3
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d0b6      	beq.n	8004bbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	60f8      	str	r0, [r7, #12]
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	607a      	str	r2, [r7, #4]
 8004c66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c68:	e051      	b.n	8004d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c78:	d123      	bne.n	8004cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f043 0204 	orr.w	r2, r3, #4
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e046      	b.n	8004d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc8:	d021      	beq.n	8004d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cca:	f7fe fab3 	bl	8003234 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d302      	bcc.n	8004ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d116      	bne.n	8004d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f043 0220 	orr.w	r2, r3, #32
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e020      	b.n	8004d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	0c1b      	lsrs	r3, r3, #16
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d10c      	bne.n	8004d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	43da      	mvns	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4013      	ands	r3, r2
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	bf14      	ite	ne
 8004d2a:	2301      	movne	r3, #1
 8004d2c:	2300      	moveq	r3, #0
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	e00b      	b.n	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	43da      	mvns	r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bf14      	ite	ne
 8004d44:	2301      	movne	r3, #1
 8004d46:	2300      	moveq	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d18d      	bne.n	8004c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d64:	e02d      	b.n	8004dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f8ce 	bl	8004f08 <I2C_IsAcknowledgeFailed>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e02d      	b.n	8004dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7c:	d021      	beq.n	8004dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7e:	f7fe fa59 	bl	8003234 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d302      	bcc.n	8004d94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d116      	bne.n	8004dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e007      	b.n	8004dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dcc:	2b80      	cmp	r3, #128	; 0x80
 8004dce:	d1ca      	bne.n	8004d66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	60b9      	str	r1, [r7, #8]
 8004de4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004de6:	e02d      	b.n	8004e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f88d 	bl	8004f08 <I2C_IsAcknowledgeFailed>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e02d      	b.n	8004e54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfe:	d021      	beq.n	8004e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e00:	f7fe fa18 	bl	8003234 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d302      	bcc.n	8004e16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d116      	bne.n	8004e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	f043 0220 	orr.w	r2, r3, #32
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e007      	b.n	8004e54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d1ca      	bne.n	8004de8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e68:	e042      	b.n	8004ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	f003 0310 	and.w	r3, r3, #16
 8004e74:	2b10      	cmp	r3, #16
 8004e76:	d119      	bne.n	8004eac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0210 	mvn.w	r2, #16
 8004e80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e029      	b.n	8004f00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eac:	f7fe f9c2 	bl	8003234 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d302      	bcc.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d116      	bne.n	8004ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	f043 0220 	orr.w	r2, r3, #32
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e007      	b.n	8004f00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efa:	2b40      	cmp	r3, #64	; 0x40
 8004efc:	d1b5      	bne.n	8004e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f1e:	d11b      	bne.n	8004f58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	f043 0204 	orr.w	r2, r3, #4
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
	...

08004f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e25b      	b.n	8005432 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d075      	beq.n	8005072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f86:	4ba3      	ldr	r3, [pc, #652]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 030c 	and.w	r3, r3, #12
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d00c      	beq.n	8004fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f92:	4ba0      	ldr	r3, [pc, #640]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d112      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f9e:	4b9d      	ldr	r3, [pc, #628]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004faa:	d10b      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fac:	4b99      	ldr	r3, [pc, #612]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d05b      	beq.n	8005070 <HAL_RCC_OscConfig+0x108>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d157      	bne.n	8005070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e236      	b.n	8005432 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fcc:	d106      	bne.n	8004fdc <HAL_RCC_OscConfig+0x74>
 8004fce:	4b91      	ldr	r3, [pc, #580]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a90      	ldr	r2, [pc, #576]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	e01d      	b.n	8005018 <HAL_RCC_OscConfig+0xb0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fe4:	d10c      	bne.n	8005000 <HAL_RCC_OscConfig+0x98>
 8004fe6:	4b8b      	ldr	r3, [pc, #556]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a8a      	ldr	r2, [pc, #552]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	4b88      	ldr	r3, [pc, #544]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a87      	ldr	r2, [pc, #540]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e00b      	b.n	8005018 <HAL_RCC_OscConfig+0xb0>
 8005000:	4b84      	ldr	r3, [pc, #528]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a83      	ldr	r2, [pc, #524]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8005006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	4b81      	ldr	r3, [pc, #516]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a80      	ldr	r2, [pc, #512]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8005012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d013      	beq.n	8005048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005020:	f7fe f908 	bl	8003234 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005028:	f7fe f904 	bl	8003234 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b64      	cmp	r3, #100	; 0x64
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e1fb      	b.n	8005432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503a:	4b76      	ldr	r3, [pc, #472]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCC_OscConfig+0xc0>
 8005046:	e014      	b.n	8005072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005048:	f7fe f8f4 	bl	8003234 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005050:	f7fe f8f0 	bl	8003234 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b64      	cmp	r3, #100	; 0x64
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e1e7      	b.n	8005432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005062:	4b6c      	ldr	r3, [pc, #432]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0xe8>
 800506e:	e000      	b.n	8005072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d063      	beq.n	8005146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800507e:	4b65      	ldr	r3, [pc, #404]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00b      	beq.n	80050a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800508a:	4b62      	ldr	r3, [pc, #392]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005092:	2b08      	cmp	r3, #8
 8005094:	d11c      	bne.n	80050d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005096:	4b5f      	ldr	r3, [pc, #380]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d116      	bne.n	80050d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050a2:	4b5c      	ldr	r3, [pc, #368]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d005      	beq.n	80050ba <HAL_RCC_OscConfig+0x152>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d001      	beq.n	80050ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e1bb      	b.n	8005432 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ba:	4b56      	ldr	r3, [pc, #344]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	4952      	ldr	r1, [pc, #328]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ce:	e03a      	b.n	8005146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d020      	beq.n	800511a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050d8:	4b4f      	ldr	r3, [pc, #316]	; (8005218 <HAL_RCC_OscConfig+0x2b0>)
 80050da:	2201      	movs	r2, #1
 80050dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050de:	f7fe f8a9 	bl	8003234 <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050e6:	f7fe f8a5 	bl	8003234 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e19c      	b.n	8005432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f8:	4b46      	ldr	r3, [pc, #280]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0f0      	beq.n	80050e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005104:	4b43      	ldr	r3, [pc, #268]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	4940      	ldr	r1, [pc, #256]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 8005114:	4313      	orrs	r3, r2
 8005116:	600b      	str	r3, [r1, #0]
 8005118:	e015      	b.n	8005146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800511a:	4b3f      	ldr	r3, [pc, #252]	; (8005218 <HAL_RCC_OscConfig+0x2b0>)
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005120:	f7fe f888 	bl	8003234 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005128:	f7fe f884 	bl	8003234 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e17b      	b.n	8005432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800513a:	4b36      	ldr	r3, [pc, #216]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f0      	bne.n	8005128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d030      	beq.n	80051b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d016      	beq.n	8005188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800515a:	4b30      	ldr	r3, [pc, #192]	; (800521c <HAL_RCC_OscConfig+0x2b4>)
 800515c:	2201      	movs	r2, #1
 800515e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005160:	f7fe f868 	bl	8003234 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005168:	f7fe f864 	bl	8003234 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e15b      	b.n	8005432 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800517a:	4b26      	ldr	r3, [pc, #152]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 800517c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0f0      	beq.n	8005168 <HAL_RCC_OscConfig+0x200>
 8005186:	e015      	b.n	80051b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005188:	4b24      	ldr	r3, [pc, #144]	; (800521c <HAL_RCC_OscConfig+0x2b4>)
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800518e:	f7fe f851 	bl	8003234 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005194:	e008      	b.n	80051a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005196:	f7fe f84d 	bl	8003234 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e144      	b.n	8005432 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051a8:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 80051aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1f0      	bne.n	8005196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 80a0 	beq.w	8005302 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051c2:	2300      	movs	r3, #0
 80051c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051c6:	4b13      	ldr	r3, [pc, #76]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10f      	bne.n	80051f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d2:	2300      	movs	r3, #0
 80051d4:	60bb      	str	r3, [r7, #8]
 80051d6:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	4a0e      	ldr	r2, [pc, #56]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 80051dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e0:	6413      	str	r3, [r2, #64]	; 0x40
 80051e2:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <HAL_RCC_OscConfig+0x2ac>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ea:	60bb      	str	r3, [r7, #8]
 80051ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ee:	2301      	movs	r3, #1
 80051f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f2:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <HAL_RCC_OscConfig+0x2b8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d121      	bne.n	8005242 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051fe:	4b08      	ldr	r3, [pc, #32]	; (8005220 <HAL_RCC_OscConfig+0x2b8>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a07      	ldr	r2, [pc, #28]	; (8005220 <HAL_RCC_OscConfig+0x2b8>)
 8005204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800520a:	f7fe f813 	bl	8003234 <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005210:	e011      	b.n	8005236 <HAL_RCC_OscConfig+0x2ce>
 8005212:	bf00      	nop
 8005214:	40023800 	.word	0x40023800
 8005218:	42470000 	.word	0x42470000
 800521c:	42470e80 	.word	0x42470e80
 8005220:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005224:	f7fe f806 	bl	8003234 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e0fd      	b.n	8005432 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005236:	4b81      	ldr	r3, [pc, #516]	; (800543c <HAL_RCC_OscConfig+0x4d4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f0      	beq.n	8005224 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d106      	bne.n	8005258 <HAL_RCC_OscConfig+0x2f0>
 800524a:	4b7d      	ldr	r3, [pc, #500]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 800524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524e:	4a7c      	ldr	r2, [pc, #496]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 8005250:	f043 0301 	orr.w	r3, r3, #1
 8005254:	6713      	str	r3, [r2, #112]	; 0x70
 8005256:	e01c      	b.n	8005292 <HAL_RCC_OscConfig+0x32a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2b05      	cmp	r3, #5
 800525e:	d10c      	bne.n	800527a <HAL_RCC_OscConfig+0x312>
 8005260:	4b77      	ldr	r3, [pc, #476]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 8005262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005264:	4a76      	ldr	r2, [pc, #472]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 8005266:	f043 0304 	orr.w	r3, r3, #4
 800526a:	6713      	str	r3, [r2, #112]	; 0x70
 800526c:	4b74      	ldr	r3, [pc, #464]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 800526e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005270:	4a73      	ldr	r2, [pc, #460]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 8005272:	f043 0301 	orr.w	r3, r3, #1
 8005276:	6713      	str	r3, [r2, #112]	; 0x70
 8005278:	e00b      	b.n	8005292 <HAL_RCC_OscConfig+0x32a>
 800527a:	4b71      	ldr	r3, [pc, #452]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 800527c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527e:	4a70      	ldr	r2, [pc, #448]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 8005280:	f023 0301 	bic.w	r3, r3, #1
 8005284:	6713      	str	r3, [r2, #112]	; 0x70
 8005286:	4b6e      	ldr	r3, [pc, #440]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	4a6d      	ldr	r2, [pc, #436]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 800528c:	f023 0304 	bic.w	r3, r3, #4
 8005290:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d015      	beq.n	80052c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529a:	f7fd ffcb 	bl	8003234 <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a0:	e00a      	b.n	80052b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a2:	f7fd ffc7 	bl	8003234 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e0bc      	b.n	8005432 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b8:	4b61      	ldr	r3, [pc, #388]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 80052ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0ee      	beq.n	80052a2 <HAL_RCC_OscConfig+0x33a>
 80052c4:	e014      	b.n	80052f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c6:	f7fd ffb5 	bl	8003234 <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052cc:	e00a      	b.n	80052e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ce:	f7fd ffb1 	bl	8003234 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052dc:	4293      	cmp	r3, r2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e0a6      	b.n	8005432 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052e4:	4b56      	ldr	r3, [pc, #344]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 80052e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1ee      	bne.n	80052ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d105      	bne.n	8005302 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052f6:	4b52      	ldr	r3, [pc, #328]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	4a51      	ldr	r2, [pc, #324]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 80052fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005300:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 8092 	beq.w	8005430 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800530c:	4b4c      	ldr	r3, [pc, #304]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 030c 	and.w	r3, r3, #12
 8005314:	2b08      	cmp	r3, #8
 8005316:	d05c      	beq.n	80053d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	2b02      	cmp	r3, #2
 800531e:	d141      	bne.n	80053a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005320:	4b48      	ldr	r3, [pc, #288]	; (8005444 <HAL_RCC_OscConfig+0x4dc>)
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005326:	f7fd ff85 	bl	8003234 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800532e:	f7fd ff81 	bl	8003234 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e078      	b.n	8005432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005340:	4b3f      	ldr	r3, [pc, #252]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f0      	bne.n	800532e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	019b      	lsls	r3, r3, #6
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	085b      	lsrs	r3, r3, #1
 8005364:	3b01      	subs	r3, #1
 8005366:	041b      	lsls	r3, r3, #16
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	061b      	lsls	r3, r3, #24
 8005370:	4933      	ldr	r1, [pc, #204]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 8005372:	4313      	orrs	r3, r2
 8005374:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005376:	4b33      	ldr	r3, [pc, #204]	; (8005444 <HAL_RCC_OscConfig+0x4dc>)
 8005378:	2201      	movs	r2, #1
 800537a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537c:	f7fd ff5a 	bl	8003234 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005384:	f7fd ff56 	bl	8003234 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e04d      	b.n	8005432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005396:	4b2a      	ldr	r3, [pc, #168]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f0      	beq.n	8005384 <HAL_RCC_OscConfig+0x41c>
 80053a2:	e045      	b.n	8005430 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a4:	4b27      	ldr	r3, [pc, #156]	; (8005444 <HAL_RCC_OscConfig+0x4dc>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053aa:	f7fd ff43 	bl	8003234 <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b0:	e008      	b.n	80053c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053b2:	f7fd ff3f 	bl	8003234 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e036      	b.n	8005432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c4:	4b1e      	ldr	r3, [pc, #120]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1f0      	bne.n	80053b2 <HAL_RCC_OscConfig+0x44a>
 80053d0:	e02e      	b.n	8005430 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e029      	b.n	8005432 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053de:	4b18      	ldr	r3, [pc, #96]	; (8005440 <HAL_RCC_OscConfig+0x4d8>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d11c      	bne.n	800542c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d115      	bne.n	800542c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005406:	4013      	ands	r3, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800540c:	4293      	cmp	r3, r2
 800540e:	d10d      	bne.n	800542c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800541a:	429a      	cmp	r2, r3
 800541c:	d106      	bne.n	800542c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005428:	429a      	cmp	r2, r3
 800542a:	d001      	beq.n	8005430 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40007000 	.word	0x40007000
 8005440:	40023800 	.word	0x40023800
 8005444:	42470060 	.word	0x42470060

08005448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e0cc      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800545c:	4b68      	ldr	r3, [pc, #416]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d90c      	bls.n	8005484 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546a:	4b65      	ldr	r3, [pc, #404]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005472:	4b63      	ldr	r3, [pc, #396]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	429a      	cmp	r2, r3
 800547e:	d001      	beq.n	8005484 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e0b8      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d020      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800549c:	4b59      	ldr	r3, [pc, #356]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	4a58      	ldr	r2, [pc, #352]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d005      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054b4:	4b53      	ldr	r3, [pc, #332]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	4a52      	ldr	r2, [pc, #328]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054c0:	4b50      	ldr	r3, [pc, #320]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	494d      	ldr	r1, [pc, #308]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d044      	beq.n	8005568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d107      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e6:	4b47      	ldr	r3, [pc, #284]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d119      	bne.n	8005526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e07f      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d003      	beq.n	8005506 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005502:	2b03      	cmp	r3, #3
 8005504:	d107      	bne.n	8005516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005506:	4b3f      	ldr	r3, [pc, #252]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d109      	bne.n	8005526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e06f      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005516:	4b3b      	ldr	r3, [pc, #236]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e067      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005526:	4b37      	ldr	r3, [pc, #220]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f023 0203 	bic.w	r2, r3, #3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	4934      	ldr	r1, [pc, #208]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 8005534:	4313      	orrs	r3, r2
 8005536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005538:	f7fd fe7c 	bl	8003234 <HAL_GetTick>
 800553c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553e:	e00a      	b.n	8005556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005540:	f7fd fe78 	bl	8003234 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	f241 3288 	movw	r2, #5000	; 0x1388
 800554e:	4293      	cmp	r3, r2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e04f      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005556:	4b2b      	ldr	r3, [pc, #172]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 020c 	and.w	r2, r3, #12
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	429a      	cmp	r2, r3
 8005566:	d1eb      	bne.n	8005540 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005568:	4b25      	ldr	r3, [pc, #148]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 030f 	and.w	r3, r3, #15
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d20c      	bcs.n	8005590 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005576:	4b22      	ldr	r3, [pc, #136]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800557e:	4b20      	ldr	r3, [pc, #128]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d001      	beq.n	8005590 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e032      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d008      	beq.n	80055ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800559c:	4b19      	ldr	r3, [pc, #100]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4916      	ldr	r1, [pc, #88]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d009      	beq.n	80055ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055ba:	4b12      	ldr	r3, [pc, #72]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	490e      	ldr	r1, [pc, #56]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055ce:	f000 f821 	bl	8005614 <HAL_RCC_GetSysClockFreq>
 80055d2:	4601      	mov	r1, r0
 80055d4:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	091b      	lsrs	r3, r3, #4
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	4a0a      	ldr	r2, [pc, #40]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 80055e0:	5cd3      	ldrb	r3, [r2, r3]
 80055e2:	fa21 f303 	lsr.w	r3, r1, r3
 80055e6:	4a09      	ldr	r2, [pc, #36]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80055e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055ea:	4b09      	ldr	r3, [pc, #36]	; (8005610 <HAL_RCC_ClockConfig+0x1c8>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fd fc48 	bl	8002e84 <HAL_InitTick>

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40023c00 	.word	0x40023c00
 8005604:	40023800 	.word	0x40023800
 8005608:	08007430 	.word	0x08007430
 800560c:	20000010 	.word	0x20000010
 8005610:	20000014 	.word	0x20000014

08005614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	607b      	str	r3, [r7, #4]
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	2300      	movs	r3, #0
 8005624:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800562a:	4b50      	ldr	r3, [pc, #320]	; (800576c <HAL_RCC_GetSysClockFreq+0x158>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 030c 	and.w	r3, r3, #12
 8005632:	2b04      	cmp	r3, #4
 8005634:	d007      	beq.n	8005646 <HAL_RCC_GetSysClockFreq+0x32>
 8005636:	2b08      	cmp	r3, #8
 8005638:	d008      	beq.n	800564c <HAL_RCC_GetSysClockFreq+0x38>
 800563a:	2b00      	cmp	r3, #0
 800563c:	f040 808d 	bne.w	800575a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005640:	4b4b      	ldr	r3, [pc, #300]	; (8005770 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005642:	60bb      	str	r3, [r7, #8]
       break;
 8005644:	e08c      	b.n	8005760 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005646:	4b4b      	ldr	r3, [pc, #300]	; (8005774 <HAL_RCC_GetSysClockFreq+0x160>)
 8005648:	60bb      	str	r3, [r7, #8]
      break;
 800564a:	e089      	b.n	8005760 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800564c:	4b47      	ldr	r3, [pc, #284]	; (800576c <HAL_RCC_GetSysClockFreq+0x158>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005654:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005656:	4b45      	ldr	r3, [pc, #276]	; (800576c <HAL_RCC_GetSysClockFreq+0x158>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d023      	beq.n	80056aa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005662:	4b42      	ldr	r3, [pc, #264]	; (800576c <HAL_RCC_GetSysClockFreq+0x158>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	099b      	lsrs	r3, r3, #6
 8005668:	f04f 0400 	mov.w	r4, #0
 800566c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	ea03 0501 	and.w	r5, r3, r1
 8005678:	ea04 0602 	and.w	r6, r4, r2
 800567c:	4a3d      	ldr	r2, [pc, #244]	; (8005774 <HAL_RCC_GetSysClockFreq+0x160>)
 800567e:	fb02 f106 	mul.w	r1, r2, r6
 8005682:	2200      	movs	r2, #0
 8005684:	fb02 f205 	mul.w	r2, r2, r5
 8005688:	440a      	add	r2, r1
 800568a:	493a      	ldr	r1, [pc, #232]	; (8005774 <HAL_RCC_GetSysClockFreq+0x160>)
 800568c:	fba5 0101 	umull	r0, r1, r5, r1
 8005690:	1853      	adds	r3, r2, r1
 8005692:	4619      	mov	r1, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f04f 0400 	mov.w	r4, #0
 800569a:	461a      	mov	r2, r3
 800569c:	4623      	mov	r3, r4
 800569e:	f7fb fa9f 	bl	8000be0 <__aeabi_uldivmod>
 80056a2:	4603      	mov	r3, r0
 80056a4:	460c      	mov	r4, r1
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	e049      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056aa:	4b30      	ldr	r3, [pc, #192]	; (800576c <HAL_RCC_GetSysClockFreq+0x158>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	099b      	lsrs	r3, r3, #6
 80056b0:	f04f 0400 	mov.w	r4, #0
 80056b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	ea03 0501 	and.w	r5, r3, r1
 80056c0:	ea04 0602 	and.w	r6, r4, r2
 80056c4:	4629      	mov	r1, r5
 80056c6:	4632      	mov	r2, r6
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	f04f 0400 	mov.w	r4, #0
 80056d0:	0154      	lsls	r4, r2, #5
 80056d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80056d6:	014b      	lsls	r3, r1, #5
 80056d8:	4619      	mov	r1, r3
 80056da:	4622      	mov	r2, r4
 80056dc:	1b49      	subs	r1, r1, r5
 80056de:	eb62 0206 	sbc.w	r2, r2, r6
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	f04f 0400 	mov.w	r4, #0
 80056ea:	0194      	lsls	r4, r2, #6
 80056ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80056f0:	018b      	lsls	r3, r1, #6
 80056f2:	1a5b      	subs	r3, r3, r1
 80056f4:	eb64 0402 	sbc.w	r4, r4, r2
 80056f8:	f04f 0100 	mov.w	r1, #0
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	00e2      	lsls	r2, r4, #3
 8005702:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005706:	00d9      	lsls	r1, r3, #3
 8005708:	460b      	mov	r3, r1
 800570a:	4614      	mov	r4, r2
 800570c:	195b      	adds	r3, r3, r5
 800570e:	eb44 0406 	adc.w	r4, r4, r6
 8005712:	f04f 0100 	mov.w	r1, #0
 8005716:	f04f 0200 	mov.w	r2, #0
 800571a:	02a2      	lsls	r2, r4, #10
 800571c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005720:	0299      	lsls	r1, r3, #10
 8005722:	460b      	mov	r3, r1
 8005724:	4614      	mov	r4, r2
 8005726:	4618      	mov	r0, r3
 8005728:	4621      	mov	r1, r4
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f04f 0400 	mov.w	r4, #0
 8005730:	461a      	mov	r2, r3
 8005732:	4623      	mov	r3, r4
 8005734:	f7fb fa54 	bl	8000be0 <__aeabi_uldivmod>
 8005738:	4603      	mov	r3, r0
 800573a:	460c      	mov	r4, r1
 800573c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800573e:	4b0b      	ldr	r3, [pc, #44]	; (800576c <HAL_RCC_GetSysClockFreq+0x158>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	0c1b      	lsrs	r3, r3, #16
 8005744:	f003 0303 	and.w	r3, r3, #3
 8005748:	3301      	adds	r3, #1
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	fbb2 f3f3 	udiv	r3, r2, r3
 8005756:	60bb      	str	r3, [r7, #8]
      break;
 8005758:	e002      	b.n	8005760 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800575a:	4b05      	ldr	r3, [pc, #20]	; (8005770 <HAL_RCC_GetSysClockFreq+0x15c>)
 800575c:	60bb      	str	r3, [r7, #8]
      break;
 800575e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005760:	68bb      	ldr	r3, [r7, #8]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800576a:	bf00      	nop
 800576c:	40023800 	.word	0x40023800
 8005770:	00f42400 	.word	0x00f42400
 8005774:	00b71b00 	.word	0x00b71b00

08005778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800577c:	4b03      	ldr	r3, [pc, #12]	; (800578c <HAL_RCC_GetHCLKFreq+0x14>)
 800577e:	681b      	ldr	r3, [r3, #0]
}
 8005780:	4618      	mov	r0, r3
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	20000010 	.word	0x20000010

08005790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005794:	f7ff fff0 	bl	8005778 <HAL_RCC_GetHCLKFreq>
 8005798:	4601      	mov	r1, r0
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	0a9b      	lsrs	r3, r3, #10
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	4a03      	ldr	r2, [pc, #12]	; (80057b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057a6:	5cd3      	ldrb	r3, [r2, r3]
 80057a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40023800 	.word	0x40023800
 80057b4:	08007440 	.word	0x08007440

080057b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057bc:	f7ff ffdc 	bl	8005778 <HAL_RCC_GetHCLKFreq>
 80057c0:	4601      	mov	r1, r0
 80057c2:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	0b5b      	lsrs	r3, r3, #13
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	4a03      	ldr	r2, [pc, #12]	; (80057dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80057ce:	5cd3      	ldrb	r3, [r2, r3]
 80057d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	40023800 	.word	0x40023800
 80057dc:	08007440 	.word	0x08007440

080057e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	220f      	movs	r2, #15
 80057ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80057f0:	4b12      	ldr	r3, [pc, #72]	; (800583c <HAL_RCC_GetClockConfig+0x5c>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 0203 	and.w	r2, r3, #3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80057fc:	4b0f      	ldr	r3, [pc, #60]	; (800583c <HAL_RCC_GetClockConfig+0x5c>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005808:	4b0c      	ldr	r3, [pc, #48]	; (800583c <HAL_RCC_GetClockConfig+0x5c>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005814:	4b09      	ldr	r3, [pc, #36]	; (800583c <HAL_RCC_GetClockConfig+0x5c>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	08db      	lsrs	r3, r3, #3
 800581a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005822:	4b07      	ldr	r3, [pc, #28]	; (8005840 <HAL_RCC_GetClockConfig+0x60>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 020f 	and.w	r2, r3, #15
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	601a      	str	r2, [r3, #0]
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40023800 	.word	0x40023800
 8005840:	40023c00 	.word	0x40023c00

08005844 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e056      	b.n	8005904 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d106      	bne.n	8005876 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7fd f989 	bl	8002b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2202      	movs	r2, #2
 800587a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800588c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	ea42 0103 	orr.w	r1, r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	0c1b      	lsrs	r3, r3, #16
 80058d4:	f003 0104 	and.w	r1, r3, #4
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	69da      	ldr	r2, [r3, #28]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e01d      	b.n	800595a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fd f970 	bl	8002c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3304      	adds	r3, #4
 8005948:	4619      	mov	r1, r3
 800594a:	4610      	mov	r0, r2
 800594c:	f000 fb4e 	bl	8005fec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005962:	b480      	push	{r7}
 8005964:	b085      	sub	sp, #20
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 0201 	orr.w	r2, r2, #1
 8005978:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b06      	cmp	r3, #6
 800598a:	d007      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b082      	sub	sp, #8
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e01d      	b.n	80059f8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f815 	bl	8005a00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2202      	movs	r2, #2
 80059da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f000 faff 	bl	8005fec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2201      	movs	r2, #1
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fdca 	bl	80065c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <HAL_TIM_PWM_Start+0x74>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d004      	beq.n	8005a40 <HAL_TIM_PWM_Start+0x2c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a14      	ldr	r2, [pc, #80]	; (8005a8c <HAL_TIM_PWM_Start+0x78>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d101      	bne.n	8005a44 <HAL_TIM_PWM_Start+0x30>
 8005a40:	2301      	movs	r3, #1
 8005a42:	e000      	b.n	8005a46 <HAL_TIM_PWM_Start+0x32>
 8005a44:	2300      	movs	r3, #0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d007      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b06      	cmp	r3, #6
 8005a6a:	d007      	beq.n	8005a7c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	40010000 	.word	0x40010000
 8005a8c:	40010400 	.word	0x40010400

08005a90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d122      	bne.n	8005aec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d11b      	bne.n	8005aec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0202 	mvn.w	r2, #2
 8005abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fa6b 	bl	8005fae <HAL_TIM_IC_CaptureCallback>
 8005ad8:	e005      	b.n	8005ae6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fa5d 	bl	8005f9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fa6e 	bl	8005fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d122      	bne.n	8005b40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d11b      	bne.n	8005b40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0204 	mvn.w	r2, #4
 8005b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2202      	movs	r2, #2
 8005b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fa41 	bl	8005fae <HAL_TIM_IC_CaptureCallback>
 8005b2c:	e005      	b.n	8005b3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fa33 	bl	8005f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fa44 	bl	8005fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b08      	cmp	r3, #8
 8005b4c:	d122      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d11b      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0208 	mvn.w	r2, #8
 8005b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2204      	movs	r2, #4
 8005b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fa17 	bl	8005fae <HAL_TIM_IC_CaptureCallback>
 8005b80:	e005      	b.n	8005b8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fa09 	bl	8005f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fa1a 	bl	8005fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0310 	and.w	r3, r3, #16
 8005b9e:	2b10      	cmp	r3, #16
 8005ba0:	d122      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0310 	and.w	r3, r3, #16
 8005bac:	2b10      	cmp	r3, #16
 8005bae:	d11b      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0210 	mvn.w	r2, #16
 8005bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2208      	movs	r2, #8
 8005bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f9ed 	bl	8005fae <HAL_TIM_IC_CaptureCallback>
 8005bd4:	e005      	b.n	8005be2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f9df 	bl	8005f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f9f0 	bl	8005fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d10e      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d107      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0201 	mvn.w	r2, #1
 8005c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fc fea6 	bl	8002960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1e:	2b80      	cmp	r3, #128	; 0x80
 8005c20:	d10e      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2c:	2b80      	cmp	r3, #128	; 0x80
 8005c2e:	d107      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fdbe 	bl	80067bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4a:	2b40      	cmp	r3, #64	; 0x40
 8005c4c:	d10e      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c58:	2b40      	cmp	r3, #64	; 0x40
 8005c5a:	d107      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f9b5 	bl	8005fd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b20      	cmp	r3, #32
 8005c78:	d10e      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	d107      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0220 	mvn.w	r2, #32
 8005c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fd88 	bl	80067a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c98:	bf00      	nop
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d101      	bne.n	8005cba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	e0b4      	b.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b0c      	cmp	r3, #12
 8005cce:	f200 809f 	bhi.w	8005e10 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005cd2:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd8:	08005d0d 	.word	0x08005d0d
 8005cdc:	08005e11 	.word	0x08005e11
 8005ce0:	08005e11 	.word	0x08005e11
 8005ce4:	08005e11 	.word	0x08005e11
 8005ce8:	08005d4d 	.word	0x08005d4d
 8005cec:	08005e11 	.word	0x08005e11
 8005cf0:	08005e11 	.word	0x08005e11
 8005cf4:	08005e11 	.word	0x08005e11
 8005cf8:	08005d8f 	.word	0x08005d8f
 8005cfc:	08005e11 	.word	0x08005e11
 8005d00:	08005e11 	.word	0x08005e11
 8005d04:	08005e11 	.word	0x08005e11
 8005d08:	08005dcf 	.word	0x08005dcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68b9      	ldr	r1, [r7, #8]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fa0a 	bl	800612c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699a      	ldr	r2, [r3, #24]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0208 	orr.w	r2, r2, #8
 8005d26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0204 	bic.w	r2, r2, #4
 8005d36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6999      	ldr	r1, [r3, #24]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	691a      	ldr	r2, [r3, #16]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	619a      	str	r2, [r3, #24]
      break;
 8005d4a:	e062      	b.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68b9      	ldr	r1, [r7, #8]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fa5a 	bl	800620c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6999      	ldr	r1, [r3, #24]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	021a      	lsls	r2, r3, #8
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	619a      	str	r2, [r3, #24]
      break;
 8005d8c:	e041      	b.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68b9      	ldr	r1, [r7, #8]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 faaf 	bl	80062f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69da      	ldr	r2, [r3, #28]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f042 0208 	orr.w	r2, r2, #8
 8005da8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69da      	ldr	r2, [r3, #28]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0204 	bic.w	r2, r2, #4
 8005db8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69d9      	ldr	r1, [r3, #28]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	61da      	str	r2, [r3, #28]
      break;
 8005dcc:	e021      	b.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68b9      	ldr	r1, [r7, #8]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fb03 	bl	80063e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69da      	ldr	r2, [r3, #28]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69da      	ldr	r2, [r3, #28]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69d9      	ldr	r1, [r3, #28]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	021a      	lsls	r2, r3, #8
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	61da      	str	r2, [r3, #28]
      break;
 8005e0e:	e000      	b.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005e10:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d101      	bne.n	8005e44 <HAL_TIM_ConfigClockSource+0x18>
 8005e40:	2302      	movs	r3, #2
 8005e42:	e0a6      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x166>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d067      	beq.n	8005f4c <HAL_TIM_ConfigClockSource+0x120>
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	d80b      	bhi.n	8005e98 <HAL_TIM_ConfigClockSource+0x6c>
 8005e80:	2b10      	cmp	r3, #16
 8005e82:	d073      	beq.n	8005f6c <HAL_TIM_ConfigClockSource+0x140>
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d802      	bhi.n	8005e8e <HAL_TIM_ConfigClockSource+0x62>
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d06f      	beq.n	8005f6c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005e8c:	e078      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	d06c      	beq.n	8005f6c <HAL_TIM_ConfigClockSource+0x140>
 8005e92:	2b30      	cmp	r3, #48	; 0x30
 8005e94:	d06a      	beq.n	8005f6c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005e96:	e073      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e98:	2b70      	cmp	r3, #112	; 0x70
 8005e9a:	d00d      	beq.n	8005eb8 <HAL_TIM_ConfigClockSource+0x8c>
 8005e9c:	2b70      	cmp	r3, #112	; 0x70
 8005e9e:	d804      	bhi.n	8005eaa <HAL_TIM_ConfigClockSource+0x7e>
 8005ea0:	2b50      	cmp	r3, #80	; 0x50
 8005ea2:	d033      	beq.n	8005f0c <HAL_TIM_ConfigClockSource+0xe0>
 8005ea4:	2b60      	cmp	r3, #96	; 0x60
 8005ea6:	d041      	beq.n	8005f2c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005ea8:	e06a      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eae:	d066      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x152>
 8005eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb4:	d017      	beq.n	8005ee6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005eb6:	e063      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6818      	ldr	r0, [r3, #0]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	6899      	ldr	r1, [r3, #8]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f000 fb5a 	bl	8006580 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005eda:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	609a      	str	r2, [r3, #8]
      break;
 8005ee4:	e04c      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6818      	ldr	r0, [r3, #0]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	6899      	ldr	r1, [r3, #8]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f000 fb43 	bl	8006580 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f08:	609a      	str	r2, [r3, #8]
      break;
 8005f0a:	e039      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6818      	ldr	r0, [r3, #0]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	6859      	ldr	r1, [r3, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f000 fab7 	bl	800648c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2150      	movs	r1, #80	; 0x50
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 fb10 	bl	800654a <TIM_ITRx_SetConfig>
      break;
 8005f2a:	e029      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6818      	ldr	r0, [r3, #0]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	6859      	ldr	r1, [r3, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f000 fad6 	bl	80064ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2160      	movs	r1, #96	; 0x60
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 fb00 	bl	800654a <TIM_ITRx_SetConfig>
      break;
 8005f4a:	e019      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6818      	ldr	r0, [r3, #0]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	6859      	ldr	r1, [r3, #4]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	f000 fa97 	bl	800648c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2140      	movs	r1, #64	; 0x40
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 faf0 	bl	800654a <TIM_ITRx_SetConfig>
      break;
 8005f6a:	e009      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4619      	mov	r1, r3
 8005f76:	4610      	mov	r0, r2
 8005f78:	f000 fae7 	bl	800654a <TIM_ITRx_SetConfig>
      break;
 8005f7c:	e000      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
	...

08005fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a40      	ldr	r2, [pc, #256]	; (8006100 <TIM_Base_SetConfig+0x114>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d013      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600a:	d00f      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a3d      	ldr	r2, [pc, #244]	; (8006104 <TIM_Base_SetConfig+0x118>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00b      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a3c      	ldr	r2, [pc, #240]	; (8006108 <TIM_Base_SetConfig+0x11c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d007      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a3b      	ldr	r2, [pc, #236]	; (800610c <TIM_Base_SetConfig+0x120>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d003      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a3a      	ldr	r2, [pc, #232]	; (8006110 <TIM_Base_SetConfig+0x124>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d108      	bne.n	800603e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2f      	ldr	r2, [pc, #188]	; (8006100 <TIM_Base_SetConfig+0x114>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d02b      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604c:	d027      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2c      	ldr	r2, [pc, #176]	; (8006104 <TIM_Base_SetConfig+0x118>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d023      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a2b      	ldr	r2, [pc, #172]	; (8006108 <TIM_Base_SetConfig+0x11c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d01f      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a2a      	ldr	r2, [pc, #168]	; (800610c <TIM_Base_SetConfig+0x120>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d01b      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a29      	ldr	r2, [pc, #164]	; (8006110 <TIM_Base_SetConfig+0x124>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d017      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a28      	ldr	r2, [pc, #160]	; (8006114 <TIM_Base_SetConfig+0x128>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d013      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a27      	ldr	r2, [pc, #156]	; (8006118 <TIM_Base_SetConfig+0x12c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d00f      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a26      	ldr	r2, [pc, #152]	; (800611c <TIM_Base_SetConfig+0x130>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00b      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a25      	ldr	r2, [pc, #148]	; (8006120 <TIM_Base_SetConfig+0x134>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d007      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a24      	ldr	r2, [pc, #144]	; (8006124 <TIM_Base_SetConfig+0x138>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d003      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a23      	ldr	r2, [pc, #140]	; (8006128 <TIM_Base_SetConfig+0x13c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d108      	bne.n	80060b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a0a      	ldr	r2, [pc, #40]	; (8006100 <TIM_Base_SetConfig+0x114>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d003      	beq.n	80060e4 <TIM_Base_SetConfig+0xf8>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a0c      	ldr	r2, [pc, #48]	; (8006110 <TIM_Base_SetConfig+0x124>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d103      	bne.n	80060ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	691a      	ldr	r2, [r3, #16]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	615a      	str	r2, [r3, #20]
}
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	40010000 	.word	0x40010000
 8006104:	40000400 	.word	0x40000400
 8006108:	40000800 	.word	0x40000800
 800610c:	40000c00 	.word	0x40000c00
 8006110:	40010400 	.word	0x40010400
 8006114:	40014000 	.word	0x40014000
 8006118:	40014400 	.word	0x40014400
 800611c:	40014800 	.word	0x40014800
 8006120:	40001800 	.word	0x40001800
 8006124:	40001c00 	.word	0x40001c00
 8006128:	40002000 	.word	0x40002000

0800612c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f023 0201 	bic.w	r2, r3, #1
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 0303 	bic.w	r3, r3, #3
 8006162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f023 0302 	bic.w	r3, r3, #2
 8006174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a20      	ldr	r2, [pc, #128]	; (8006204 <TIM_OC1_SetConfig+0xd8>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_OC1_SetConfig+0x64>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a1f      	ldr	r2, [pc, #124]	; (8006208 <TIM_OC1_SetConfig+0xdc>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d10c      	bne.n	80061aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f023 0308 	bic.w	r3, r3, #8
 8006196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f023 0304 	bic.w	r3, r3, #4
 80061a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a15      	ldr	r2, [pc, #84]	; (8006204 <TIM_OC1_SetConfig+0xd8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d003      	beq.n	80061ba <TIM_OC1_SetConfig+0x8e>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a14      	ldr	r2, [pc, #80]	; (8006208 <TIM_OC1_SetConfig+0xdc>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d111      	bne.n	80061de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4313      	orrs	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	621a      	str	r2, [r3, #32]
}
 80061f8:	bf00      	nop
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	40010000 	.word	0x40010000
 8006208:	40010400 	.word	0x40010400

0800620c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	f023 0210 	bic.w	r2, r3, #16
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800623a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	021b      	lsls	r3, r3, #8
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f023 0320 	bic.w	r3, r3, #32
 8006256:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a22      	ldr	r2, [pc, #136]	; (80062f0 <TIM_OC2_SetConfig+0xe4>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d003      	beq.n	8006274 <TIM_OC2_SetConfig+0x68>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a21      	ldr	r2, [pc, #132]	; (80062f4 <TIM_OC2_SetConfig+0xe8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d10d      	bne.n	8006290 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800627a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	011b      	lsls	r3, r3, #4
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	4313      	orrs	r3, r2
 8006286:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800628e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a17      	ldr	r2, [pc, #92]	; (80062f0 <TIM_OC2_SetConfig+0xe4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d003      	beq.n	80062a0 <TIM_OC2_SetConfig+0x94>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a16      	ldr	r2, [pc, #88]	; (80062f4 <TIM_OC2_SetConfig+0xe8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d113      	bne.n	80062c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	621a      	str	r2, [r3, #32]
}
 80062e2:	bf00      	nop
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40010000 	.word	0x40010000
 80062f4:	40010400 	.word	0x40010400

080062f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0303 	bic.w	r3, r3, #3
 800632e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	021b      	lsls	r3, r3, #8
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a21      	ldr	r2, [pc, #132]	; (80063d8 <TIM_OC3_SetConfig+0xe0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d003      	beq.n	800635e <TIM_OC3_SetConfig+0x66>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a20      	ldr	r2, [pc, #128]	; (80063dc <TIM_OC3_SetConfig+0xe4>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d10d      	bne.n	800637a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	021b      	lsls	r3, r3, #8
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a16      	ldr	r2, [pc, #88]	; (80063d8 <TIM_OC3_SetConfig+0xe0>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d003      	beq.n	800638a <TIM_OC3_SetConfig+0x92>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a15      	ldr	r2, [pc, #84]	; (80063dc <TIM_OC3_SetConfig+0xe4>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d113      	bne.n	80063b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	621a      	str	r2, [r3, #32]
}
 80063cc:	bf00      	nop
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	40010000 	.word	0x40010000
 80063dc:	40010400 	.word	0x40010400

080063e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800640e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	021b      	lsls	r3, r3, #8
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	4313      	orrs	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800642a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	031b      	lsls	r3, r3, #12
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	4313      	orrs	r3, r2
 8006436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a12      	ldr	r2, [pc, #72]	; (8006484 <TIM_OC4_SetConfig+0xa4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d003      	beq.n	8006448 <TIM_OC4_SetConfig+0x68>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a11      	ldr	r2, [pc, #68]	; (8006488 <TIM_OC4_SetConfig+0xa8>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d109      	bne.n	800645c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800644e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	019b      	lsls	r3, r3, #6
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	621a      	str	r2, [r3, #32]
}
 8006476:	bf00      	nop
 8006478:	371c      	adds	r7, #28
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40010000 	.word	0x40010000
 8006488:	40010400 	.word	0x40010400

0800648c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f023 0201 	bic.w	r2, r3, #1
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f023 030a 	bic.w	r3, r3, #10
 80064c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	621a      	str	r2, [r3, #32]
}
 80064de:	bf00      	nop
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b087      	sub	sp, #28
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	f023 0210 	bic.w	r2, r3, #16
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006514:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	031b      	lsls	r3, r3, #12
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4313      	orrs	r3, r2
 800651e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006526:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4313      	orrs	r3, r2
 8006530:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	621a      	str	r2, [r3, #32]
}
 800653e:	bf00      	nop
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800654a:	b480      	push	{r7}
 800654c:	b085      	sub	sp, #20
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006560:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4313      	orrs	r3, r2
 8006568:	f043 0307 	orr.w	r3, r3, #7
 800656c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	609a      	str	r2, [r3, #8]
}
 8006574:	bf00      	nop
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800659a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	021a      	lsls	r2, r3, #8
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	431a      	orrs	r2, r3
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	609a      	str	r2, [r3, #8]
}
 80065b4:	bf00      	nop
 80065b6:	371c      	adds	r7, #28
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f003 031f 	and.w	r3, r3, #31
 80065d2:	2201      	movs	r2, #1
 80065d4:	fa02 f303 	lsl.w	r3, r2, r3
 80065d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a1a      	ldr	r2, [r3, #32]
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	43db      	mvns	r3, r3
 80065e2:	401a      	ands	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6a1a      	ldr	r2, [r3, #32]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f003 031f 	and.w	r3, r3, #31
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	fa01 f303 	lsl.w	r3, r1, r3
 80065f8:	431a      	orrs	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	621a      	str	r2, [r3, #32]
}
 80065fe:	bf00      	nop
 8006600:	371c      	adds	r7, #28
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
	...

0800660c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006620:	2302      	movs	r3, #2
 8006622:	e05a      	b.n	80066da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a21      	ldr	r2, [pc, #132]	; (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d022      	beq.n	80066ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006670:	d01d      	beq.n	80066ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a1d      	ldr	r2, [pc, #116]	; (80066ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d018      	beq.n	80066ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a1b      	ldr	r2, [pc, #108]	; (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d013      	beq.n	80066ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a1a      	ldr	r2, [pc, #104]	; (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00e      	beq.n	80066ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a18      	ldr	r2, [pc, #96]	; (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d009      	beq.n	80066ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a17      	ldr	r2, [pc, #92]	; (80066fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d004      	beq.n	80066ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a15      	ldr	r2, [pc, #84]	; (8006700 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d10c      	bne.n	80066c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	40010000 	.word	0x40010000
 80066ec:	40000400 	.word	0x40000400
 80066f0:	40000800 	.word	0x40000800
 80066f4:	40000c00 	.word	0x40000c00
 80066f8:	40010400 	.word	0x40010400
 80066fc:	40014000 	.word	0x40014000
 8006700:	40001800 	.word	0x40001800

08006704 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006718:	2b01      	cmp	r3, #1
 800671a:	d101      	bne.n	8006720 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800671c:	2302      	movs	r3, #2
 800671e:	e03d      	b.n	800679c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4313      	orrs	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	4313      	orrs	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e03f      	b.n	8006862 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7fc fa84 	bl	8002d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2224      	movs	r2, #36	; 0x24
 8006800:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f90b 	bl	8006a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	691a      	ldr	r2, [r3, #16]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	695a      	ldr	r2, [r3, #20]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2220      	movs	r2, #32
 8006854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2220      	movs	r2, #32
 800685c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b088      	sub	sp, #32
 800686e:	af02      	add	r7, sp, #8
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	603b      	str	r3, [r7, #0]
 8006876:	4613      	mov	r3, r2
 8006878:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b20      	cmp	r3, #32
 8006888:	f040 8083 	bne.w	8006992 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <HAL_UART_Transmit+0x2e>
 8006892:	88fb      	ldrh	r3, [r7, #6]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e07b      	b.n	8006994 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d101      	bne.n	80068aa <HAL_UART_Transmit+0x40>
 80068a6:	2302      	movs	r3, #2
 80068a8:	e074      	b.n	8006994 <HAL_UART_Transmit+0x12a>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2221      	movs	r2, #33	; 0x21
 80068bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80068c0:	f7fc fcb8 	bl	8003234 <HAL_GetTick>
 80068c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	88fa      	ldrh	r2, [r7, #6]
 80068ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	88fa      	ldrh	r2, [r7, #6]
 80068d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80068da:	e042      	b.n	8006962 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f2:	d122      	bne.n	800693a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2200      	movs	r2, #0
 80068fc:	2180      	movs	r1, #128	; 0x80
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 f84c 	bl	800699c <UART_WaitOnFlagUntilTimeout>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e042      	b.n	8006994 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006920:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d103      	bne.n	8006932 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	3302      	adds	r3, #2
 800692e:	60bb      	str	r3, [r7, #8]
 8006930:	e017      	b.n	8006962 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	3301      	adds	r3, #1
 8006936:	60bb      	str	r3, [r7, #8]
 8006938:	e013      	b.n	8006962 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2200      	movs	r2, #0
 8006942:	2180      	movs	r1, #128	; 0x80
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 f829 	bl	800699c <UART_WaitOnFlagUntilTimeout>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e01f      	b.n	8006994 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	60ba      	str	r2, [r7, #8]
 800695a:	781a      	ldrb	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006966:	b29b      	uxth	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1b7      	bne.n	80068dc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	2200      	movs	r2, #0
 8006974:	2140      	movs	r1, #64	; 0x40
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 f810 	bl	800699c <UART_WaitOnFlagUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e006      	b.n	8006994 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2220      	movs	r2, #32
 800698a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	e000      	b.n	8006994 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006992:	2302      	movs	r3, #2
  }
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	4613      	mov	r3, r2
 80069aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ac:	e02c      	b.n	8006a08 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b4:	d028      	beq.n	8006a08 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d007      	beq.n	80069cc <UART_WaitOnFlagUntilTimeout+0x30>
 80069bc:	f7fc fc3a 	bl	8003234 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d21d      	bcs.n	8006a08 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695a      	ldr	r2, [r3, #20]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 0201 	bic.w	r2, r2, #1
 80069ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e00f      	b.n	8006a28 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	4013      	ands	r3, r2
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	bf0c      	ite	eq
 8006a18:	2301      	moveq	r3, #1
 8006a1a:	2300      	movne	r3, #0
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	461a      	mov	r2, r3
 8006a20:	79fb      	ldrb	r3, [r7, #7]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d0c3      	beq.n	80069ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a34:	b085      	sub	sp, #20
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006a72:	f023 030c 	bic.w	r3, r3, #12
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	6812      	ldr	r2, [r2, #0]
 8006a7a:	68f9      	ldr	r1, [r7, #12]
 8006a7c:	430b      	orrs	r3, r1
 8006a7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a9e:	f040 818b 	bne.w	8006db8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4ac1      	ldr	r2, [pc, #772]	; (8006dac <UART_SetConfig+0x37c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d005      	beq.n	8006ab8 <UART_SetConfig+0x88>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4abf      	ldr	r2, [pc, #764]	; (8006db0 <UART_SetConfig+0x380>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	f040 80bd 	bne.w	8006c32 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ab8:	f7fe fe7e 	bl	80057b8 <HAL_RCC_GetPCLK2Freq>
 8006abc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	461d      	mov	r5, r3
 8006ac2:	f04f 0600 	mov.w	r6, #0
 8006ac6:	46a8      	mov	r8, r5
 8006ac8:	46b1      	mov	r9, r6
 8006aca:	eb18 0308 	adds.w	r3, r8, r8
 8006ace:	eb49 0409 	adc.w	r4, r9, r9
 8006ad2:	4698      	mov	r8, r3
 8006ad4:	46a1      	mov	r9, r4
 8006ad6:	eb18 0805 	adds.w	r8, r8, r5
 8006ada:	eb49 0906 	adc.w	r9, r9, r6
 8006ade:	f04f 0100 	mov.w	r1, #0
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006aea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006aee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006af2:	4688      	mov	r8, r1
 8006af4:	4691      	mov	r9, r2
 8006af6:	eb18 0005 	adds.w	r0, r8, r5
 8006afa:	eb49 0106 	adc.w	r1, r9, r6
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	461d      	mov	r5, r3
 8006b04:	f04f 0600 	mov.w	r6, #0
 8006b08:	196b      	adds	r3, r5, r5
 8006b0a:	eb46 0406 	adc.w	r4, r6, r6
 8006b0e:	461a      	mov	r2, r3
 8006b10:	4623      	mov	r3, r4
 8006b12:	f7fa f865 	bl	8000be0 <__aeabi_uldivmod>
 8006b16:	4603      	mov	r3, r0
 8006b18:	460c      	mov	r4, r1
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	4ba5      	ldr	r3, [pc, #660]	; (8006db4 <UART_SetConfig+0x384>)
 8006b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b22:	095b      	lsrs	r3, r3, #5
 8006b24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	461d      	mov	r5, r3
 8006b2c:	f04f 0600 	mov.w	r6, #0
 8006b30:	46a9      	mov	r9, r5
 8006b32:	46b2      	mov	sl, r6
 8006b34:	eb19 0309 	adds.w	r3, r9, r9
 8006b38:	eb4a 040a 	adc.w	r4, sl, sl
 8006b3c:	4699      	mov	r9, r3
 8006b3e:	46a2      	mov	sl, r4
 8006b40:	eb19 0905 	adds.w	r9, r9, r5
 8006b44:	eb4a 0a06 	adc.w	sl, sl, r6
 8006b48:	f04f 0100 	mov.w	r1, #0
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b5c:	4689      	mov	r9, r1
 8006b5e:	4692      	mov	sl, r2
 8006b60:	eb19 0005 	adds.w	r0, r9, r5
 8006b64:	eb4a 0106 	adc.w	r1, sl, r6
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	461d      	mov	r5, r3
 8006b6e:	f04f 0600 	mov.w	r6, #0
 8006b72:	196b      	adds	r3, r5, r5
 8006b74:	eb46 0406 	adc.w	r4, r6, r6
 8006b78:	461a      	mov	r2, r3
 8006b7a:	4623      	mov	r3, r4
 8006b7c:	f7fa f830 	bl	8000be0 <__aeabi_uldivmod>
 8006b80:	4603      	mov	r3, r0
 8006b82:	460c      	mov	r4, r1
 8006b84:	461a      	mov	r2, r3
 8006b86:	4b8b      	ldr	r3, [pc, #556]	; (8006db4 <UART_SetConfig+0x384>)
 8006b88:	fba3 1302 	umull	r1, r3, r3, r2
 8006b8c:	095b      	lsrs	r3, r3, #5
 8006b8e:	2164      	movs	r1, #100	; 0x64
 8006b90:	fb01 f303 	mul.w	r3, r1, r3
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	3332      	adds	r3, #50	; 0x32
 8006b9a:	4a86      	ldr	r2, [pc, #536]	; (8006db4 <UART_SetConfig+0x384>)
 8006b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba0:	095b      	lsrs	r3, r3, #5
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ba8:	4498      	add	r8, r3
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	461d      	mov	r5, r3
 8006bae:	f04f 0600 	mov.w	r6, #0
 8006bb2:	46a9      	mov	r9, r5
 8006bb4:	46b2      	mov	sl, r6
 8006bb6:	eb19 0309 	adds.w	r3, r9, r9
 8006bba:	eb4a 040a 	adc.w	r4, sl, sl
 8006bbe:	4699      	mov	r9, r3
 8006bc0:	46a2      	mov	sl, r4
 8006bc2:	eb19 0905 	adds.w	r9, r9, r5
 8006bc6:	eb4a 0a06 	adc.w	sl, sl, r6
 8006bca:	f04f 0100 	mov.w	r1, #0
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bde:	4689      	mov	r9, r1
 8006be0:	4692      	mov	sl, r2
 8006be2:	eb19 0005 	adds.w	r0, r9, r5
 8006be6:	eb4a 0106 	adc.w	r1, sl, r6
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	461d      	mov	r5, r3
 8006bf0:	f04f 0600 	mov.w	r6, #0
 8006bf4:	196b      	adds	r3, r5, r5
 8006bf6:	eb46 0406 	adc.w	r4, r6, r6
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	4623      	mov	r3, r4
 8006bfe:	f7f9 ffef 	bl	8000be0 <__aeabi_uldivmod>
 8006c02:	4603      	mov	r3, r0
 8006c04:	460c      	mov	r4, r1
 8006c06:	461a      	mov	r2, r3
 8006c08:	4b6a      	ldr	r3, [pc, #424]	; (8006db4 <UART_SetConfig+0x384>)
 8006c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8006c0e:	095b      	lsrs	r3, r3, #5
 8006c10:	2164      	movs	r1, #100	; 0x64
 8006c12:	fb01 f303 	mul.w	r3, r1, r3
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	3332      	adds	r3, #50	; 0x32
 8006c1c:	4a65      	ldr	r2, [pc, #404]	; (8006db4 <UART_SetConfig+0x384>)
 8006c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	f003 0207 	and.w	r2, r3, #7
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4442      	add	r2, r8
 8006c2e:	609a      	str	r2, [r3, #8]
 8006c30:	e26f      	b.n	8007112 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c32:	f7fe fdad 	bl	8005790 <HAL_RCC_GetPCLK1Freq>
 8006c36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	461d      	mov	r5, r3
 8006c3c:	f04f 0600 	mov.w	r6, #0
 8006c40:	46a8      	mov	r8, r5
 8006c42:	46b1      	mov	r9, r6
 8006c44:	eb18 0308 	adds.w	r3, r8, r8
 8006c48:	eb49 0409 	adc.w	r4, r9, r9
 8006c4c:	4698      	mov	r8, r3
 8006c4e:	46a1      	mov	r9, r4
 8006c50:	eb18 0805 	adds.w	r8, r8, r5
 8006c54:	eb49 0906 	adc.w	r9, r9, r6
 8006c58:	f04f 0100 	mov.w	r1, #0
 8006c5c:	f04f 0200 	mov.w	r2, #0
 8006c60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c6c:	4688      	mov	r8, r1
 8006c6e:	4691      	mov	r9, r2
 8006c70:	eb18 0005 	adds.w	r0, r8, r5
 8006c74:	eb49 0106 	adc.w	r1, r9, r6
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	461d      	mov	r5, r3
 8006c7e:	f04f 0600 	mov.w	r6, #0
 8006c82:	196b      	adds	r3, r5, r5
 8006c84:	eb46 0406 	adc.w	r4, r6, r6
 8006c88:	461a      	mov	r2, r3
 8006c8a:	4623      	mov	r3, r4
 8006c8c:	f7f9 ffa8 	bl	8000be0 <__aeabi_uldivmod>
 8006c90:	4603      	mov	r3, r0
 8006c92:	460c      	mov	r4, r1
 8006c94:	461a      	mov	r2, r3
 8006c96:	4b47      	ldr	r3, [pc, #284]	; (8006db4 <UART_SetConfig+0x384>)
 8006c98:	fba3 2302 	umull	r2, r3, r3, r2
 8006c9c:	095b      	lsrs	r3, r3, #5
 8006c9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	461d      	mov	r5, r3
 8006ca6:	f04f 0600 	mov.w	r6, #0
 8006caa:	46a9      	mov	r9, r5
 8006cac:	46b2      	mov	sl, r6
 8006cae:	eb19 0309 	adds.w	r3, r9, r9
 8006cb2:	eb4a 040a 	adc.w	r4, sl, sl
 8006cb6:	4699      	mov	r9, r3
 8006cb8:	46a2      	mov	sl, r4
 8006cba:	eb19 0905 	adds.w	r9, r9, r5
 8006cbe:	eb4a 0a06 	adc.w	sl, sl, r6
 8006cc2:	f04f 0100 	mov.w	r1, #0
 8006cc6:	f04f 0200 	mov.w	r2, #0
 8006cca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cd6:	4689      	mov	r9, r1
 8006cd8:	4692      	mov	sl, r2
 8006cda:	eb19 0005 	adds.w	r0, r9, r5
 8006cde:	eb4a 0106 	adc.w	r1, sl, r6
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	461d      	mov	r5, r3
 8006ce8:	f04f 0600 	mov.w	r6, #0
 8006cec:	196b      	adds	r3, r5, r5
 8006cee:	eb46 0406 	adc.w	r4, r6, r6
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	4623      	mov	r3, r4
 8006cf6:	f7f9 ff73 	bl	8000be0 <__aeabi_uldivmod>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	461a      	mov	r2, r3
 8006d00:	4b2c      	ldr	r3, [pc, #176]	; (8006db4 <UART_SetConfig+0x384>)
 8006d02:	fba3 1302 	umull	r1, r3, r3, r2
 8006d06:	095b      	lsrs	r3, r3, #5
 8006d08:	2164      	movs	r1, #100	; 0x64
 8006d0a:	fb01 f303 	mul.w	r3, r1, r3
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	3332      	adds	r3, #50	; 0x32
 8006d14:	4a27      	ldr	r2, [pc, #156]	; (8006db4 <UART_SetConfig+0x384>)
 8006d16:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1a:	095b      	lsrs	r3, r3, #5
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d22:	4498      	add	r8, r3
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	461d      	mov	r5, r3
 8006d28:	f04f 0600 	mov.w	r6, #0
 8006d2c:	46a9      	mov	r9, r5
 8006d2e:	46b2      	mov	sl, r6
 8006d30:	eb19 0309 	adds.w	r3, r9, r9
 8006d34:	eb4a 040a 	adc.w	r4, sl, sl
 8006d38:	4699      	mov	r9, r3
 8006d3a:	46a2      	mov	sl, r4
 8006d3c:	eb19 0905 	adds.w	r9, r9, r5
 8006d40:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d44:	f04f 0100 	mov.w	r1, #0
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d58:	4689      	mov	r9, r1
 8006d5a:	4692      	mov	sl, r2
 8006d5c:	eb19 0005 	adds.w	r0, r9, r5
 8006d60:	eb4a 0106 	adc.w	r1, sl, r6
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	461d      	mov	r5, r3
 8006d6a:	f04f 0600 	mov.w	r6, #0
 8006d6e:	196b      	adds	r3, r5, r5
 8006d70:	eb46 0406 	adc.w	r4, r6, r6
 8006d74:	461a      	mov	r2, r3
 8006d76:	4623      	mov	r3, r4
 8006d78:	f7f9 ff32 	bl	8000be0 <__aeabi_uldivmod>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	460c      	mov	r4, r1
 8006d80:	461a      	mov	r2, r3
 8006d82:	4b0c      	ldr	r3, [pc, #48]	; (8006db4 <UART_SetConfig+0x384>)
 8006d84:	fba3 1302 	umull	r1, r3, r3, r2
 8006d88:	095b      	lsrs	r3, r3, #5
 8006d8a:	2164      	movs	r1, #100	; 0x64
 8006d8c:	fb01 f303 	mul.w	r3, r1, r3
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	3332      	adds	r3, #50	; 0x32
 8006d96:	4a07      	ldr	r2, [pc, #28]	; (8006db4 <UART_SetConfig+0x384>)
 8006d98:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9c:	095b      	lsrs	r3, r3, #5
 8006d9e:	f003 0207 	and.w	r2, r3, #7
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4442      	add	r2, r8
 8006da8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006daa:	e1b2      	b.n	8007112 <UART_SetConfig+0x6e2>
 8006dac:	40011000 	.word	0x40011000
 8006db0:	40011400 	.word	0x40011400
 8006db4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4ad7      	ldr	r2, [pc, #860]	; (800711c <UART_SetConfig+0x6ec>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d005      	beq.n	8006dce <UART_SetConfig+0x39e>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4ad6      	ldr	r2, [pc, #856]	; (8007120 <UART_SetConfig+0x6f0>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	f040 80d1 	bne.w	8006f70 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006dce:	f7fe fcf3 	bl	80057b8 <HAL_RCC_GetPCLK2Freq>
 8006dd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	469a      	mov	sl, r3
 8006dd8:	f04f 0b00 	mov.w	fp, #0
 8006ddc:	46d0      	mov	r8, sl
 8006dde:	46d9      	mov	r9, fp
 8006de0:	eb18 0308 	adds.w	r3, r8, r8
 8006de4:	eb49 0409 	adc.w	r4, r9, r9
 8006de8:	4698      	mov	r8, r3
 8006dea:	46a1      	mov	r9, r4
 8006dec:	eb18 080a 	adds.w	r8, r8, sl
 8006df0:	eb49 090b 	adc.w	r9, r9, fp
 8006df4:	f04f 0100 	mov.w	r1, #0
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e08:	4688      	mov	r8, r1
 8006e0a:	4691      	mov	r9, r2
 8006e0c:	eb1a 0508 	adds.w	r5, sl, r8
 8006e10:	eb4b 0609 	adc.w	r6, fp, r9
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	4619      	mov	r1, r3
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	f04f 0300 	mov.w	r3, #0
 8006e22:	f04f 0400 	mov.w	r4, #0
 8006e26:	0094      	lsls	r4, r2, #2
 8006e28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e2c:	008b      	lsls	r3, r1, #2
 8006e2e:	461a      	mov	r2, r3
 8006e30:	4623      	mov	r3, r4
 8006e32:	4628      	mov	r0, r5
 8006e34:	4631      	mov	r1, r6
 8006e36:	f7f9 fed3 	bl	8000be0 <__aeabi_uldivmod>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	461a      	mov	r2, r3
 8006e40:	4bb8      	ldr	r3, [pc, #736]	; (8007124 <UART_SetConfig+0x6f4>)
 8006e42:	fba3 2302 	umull	r2, r3, r3, r2
 8006e46:	095b      	lsrs	r3, r3, #5
 8006e48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	469b      	mov	fp, r3
 8006e50:	f04f 0c00 	mov.w	ip, #0
 8006e54:	46d9      	mov	r9, fp
 8006e56:	46e2      	mov	sl, ip
 8006e58:	eb19 0309 	adds.w	r3, r9, r9
 8006e5c:	eb4a 040a 	adc.w	r4, sl, sl
 8006e60:	4699      	mov	r9, r3
 8006e62:	46a2      	mov	sl, r4
 8006e64:	eb19 090b 	adds.w	r9, r9, fp
 8006e68:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006e6c:	f04f 0100 	mov.w	r1, #0
 8006e70:	f04f 0200 	mov.w	r2, #0
 8006e74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e80:	4689      	mov	r9, r1
 8006e82:	4692      	mov	sl, r2
 8006e84:	eb1b 0509 	adds.w	r5, fp, r9
 8006e88:	eb4c 060a 	adc.w	r6, ip, sl
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	4619      	mov	r1, r3
 8006e92:	f04f 0200 	mov.w	r2, #0
 8006e96:	f04f 0300 	mov.w	r3, #0
 8006e9a:	f04f 0400 	mov.w	r4, #0
 8006e9e:	0094      	lsls	r4, r2, #2
 8006ea0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ea4:	008b      	lsls	r3, r1, #2
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	4623      	mov	r3, r4
 8006eaa:	4628      	mov	r0, r5
 8006eac:	4631      	mov	r1, r6
 8006eae:	f7f9 fe97 	bl	8000be0 <__aeabi_uldivmod>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	4b9a      	ldr	r3, [pc, #616]	; (8007124 <UART_SetConfig+0x6f4>)
 8006eba:	fba3 1302 	umull	r1, r3, r3, r2
 8006ebe:	095b      	lsrs	r3, r3, #5
 8006ec0:	2164      	movs	r1, #100	; 0x64
 8006ec2:	fb01 f303 	mul.w	r3, r1, r3
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	011b      	lsls	r3, r3, #4
 8006eca:	3332      	adds	r3, #50	; 0x32
 8006ecc:	4a95      	ldr	r2, [pc, #596]	; (8007124 <UART_SetConfig+0x6f4>)
 8006ece:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed2:	095b      	lsrs	r3, r3, #5
 8006ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ed8:	4498      	add	r8, r3
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	469b      	mov	fp, r3
 8006ede:	f04f 0c00 	mov.w	ip, #0
 8006ee2:	46d9      	mov	r9, fp
 8006ee4:	46e2      	mov	sl, ip
 8006ee6:	eb19 0309 	adds.w	r3, r9, r9
 8006eea:	eb4a 040a 	adc.w	r4, sl, sl
 8006eee:	4699      	mov	r9, r3
 8006ef0:	46a2      	mov	sl, r4
 8006ef2:	eb19 090b 	adds.w	r9, r9, fp
 8006ef6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006efa:	f04f 0100 	mov.w	r1, #0
 8006efe:	f04f 0200 	mov.w	r2, #0
 8006f02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f0e:	4689      	mov	r9, r1
 8006f10:	4692      	mov	sl, r2
 8006f12:	eb1b 0509 	adds.w	r5, fp, r9
 8006f16:	eb4c 060a 	adc.w	r6, ip, sl
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	f04f 0200 	mov.w	r2, #0
 8006f24:	f04f 0300 	mov.w	r3, #0
 8006f28:	f04f 0400 	mov.w	r4, #0
 8006f2c:	0094      	lsls	r4, r2, #2
 8006f2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f32:	008b      	lsls	r3, r1, #2
 8006f34:	461a      	mov	r2, r3
 8006f36:	4623      	mov	r3, r4
 8006f38:	4628      	mov	r0, r5
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	f7f9 fe50 	bl	8000be0 <__aeabi_uldivmod>
 8006f40:	4603      	mov	r3, r0
 8006f42:	460c      	mov	r4, r1
 8006f44:	461a      	mov	r2, r3
 8006f46:	4b77      	ldr	r3, [pc, #476]	; (8007124 <UART_SetConfig+0x6f4>)
 8006f48:	fba3 1302 	umull	r1, r3, r3, r2
 8006f4c:	095b      	lsrs	r3, r3, #5
 8006f4e:	2164      	movs	r1, #100	; 0x64
 8006f50:	fb01 f303 	mul.w	r3, r1, r3
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	011b      	lsls	r3, r3, #4
 8006f58:	3332      	adds	r3, #50	; 0x32
 8006f5a:	4a72      	ldr	r2, [pc, #456]	; (8007124 <UART_SetConfig+0x6f4>)
 8006f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f60:	095b      	lsrs	r3, r3, #5
 8006f62:	f003 020f 	and.w	r2, r3, #15
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4442      	add	r2, r8
 8006f6c:	609a      	str	r2, [r3, #8]
 8006f6e:	e0d0      	b.n	8007112 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f70:	f7fe fc0e 	bl	8005790 <HAL_RCC_GetPCLK1Freq>
 8006f74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	469a      	mov	sl, r3
 8006f7a:	f04f 0b00 	mov.w	fp, #0
 8006f7e:	46d0      	mov	r8, sl
 8006f80:	46d9      	mov	r9, fp
 8006f82:	eb18 0308 	adds.w	r3, r8, r8
 8006f86:	eb49 0409 	adc.w	r4, r9, r9
 8006f8a:	4698      	mov	r8, r3
 8006f8c:	46a1      	mov	r9, r4
 8006f8e:	eb18 080a 	adds.w	r8, r8, sl
 8006f92:	eb49 090b 	adc.w	r9, r9, fp
 8006f96:	f04f 0100 	mov.w	r1, #0
 8006f9a:	f04f 0200 	mov.w	r2, #0
 8006f9e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006fa2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006fa6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006faa:	4688      	mov	r8, r1
 8006fac:	4691      	mov	r9, r2
 8006fae:	eb1a 0508 	adds.w	r5, sl, r8
 8006fb2:	eb4b 0609 	adc.w	r6, fp, r9
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	f04f 0200 	mov.w	r2, #0
 8006fc0:	f04f 0300 	mov.w	r3, #0
 8006fc4:	f04f 0400 	mov.w	r4, #0
 8006fc8:	0094      	lsls	r4, r2, #2
 8006fca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fce:	008b      	lsls	r3, r1, #2
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4623      	mov	r3, r4
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	f7f9 fe02 	bl	8000be0 <__aeabi_uldivmod>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	460c      	mov	r4, r1
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	4b50      	ldr	r3, [pc, #320]	; (8007124 <UART_SetConfig+0x6f4>)
 8006fe4:	fba3 2302 	umull	r2, r3, r3, r2
 8006fe8:	095b      	lsrs	r3, r3, #5
 8006fea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	469b      	mov	fp, r3
 8006ff2:	f04f 0c00 	mov.w	ip, #0
 8006ff6:	46d9      	mov	r9, fp
 8006ff8:	46e2      	mov	sl, ip
 8006ffa:	eb19 0309 	adds.w	r3, r9, r9
 8006ffe:	eb4a 040a 	adc.w	r4, sl, sl
 8007002:	4699      	mov	r9, r3
 8007004:	46a2      	mov	sl, r4
 8007006:	eb19 090b 	adds.w	r9, r9, fp
 800700a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800700e:	f04f 0100 	mov.w	r1, #0
 8007012:	f04f 0200 	mov.w	r2, #0
 8007016:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800701a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800701e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007022:	4689      	mov	r9, r1
 8007024:	4692      	mov	sl, r2
 8007026:	eb1b 0509 	adds.w	r5, fp, r9
 800702a:	eb4c 060a 	adc.w	r6, ip, sl
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	4619      	mov	r1, r3
 8007034:	f04f 0200 	mov.w	r2, #0
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	f04f 0400 	mov.w	r4, #0
 8007040:	0094      	lsls	r4, r2, #2
 8007042:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007046:	008b      	lsls	r3, r1, #2
 8007048:	461a      	mov	r2, r3
 800704a:	4623      	mov	r3, r4
 800704c:	4628      	mov	r0, r5
 800704e:	4631      	mov	r1, r6
 8007050:	f7f9 fdc6 	bl	8000be0 <__aeabi_uldivmod>
 8007054:	4603      	mov	r3, r0
 8007056:	460c      	mov	r4, r1
 8007058:	461a      	mov	r2, r3
 800705a:	4b32      	ldr	r3, [pc, #200]	; (8007124 <UART_SetConfig+0x6f4>)
 800705c:	fba3 1302 	umull	r1, r3, r3, r2
 8007060:	095b      	lsrs	r3, r3, #5
 8007062:	2164      	movs	r1, #100	; 0x64
 8007064:	fb01 f303 	mul.w	r3, r1, r3
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	3332      	adds	r3, #50	; 0x32
 800706e:	4a2d      	ldr	r2, [pc, #180]	; (8007124 <UART_SetConfig+0x6f4>)
 8007070:	fba2 2303 	umull	r2, r3, r2, r3
 8007074:	095b      	lsrs	r3, r3, #5
 8007076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800707a:	4498      	add	r8, r3
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	469b      	mov	fp, r3
 8007080:	f04f 0c00 	mov.w	ip, #0
 8007084:	46d9      	mov	r9, fp
 8007086:	46e2      	mov	sl, ip
 8007088:	eb19 0309 	adds.w	r3, r9, r9
 800708c:	eb4a 040a 	adc.w	r4, sl, sl
 8007090:	4699      	mov	r9, r3
 8007092:	46a2      	mov	sl, r4
 8007094:	eb19 090b 	adds.w	r9, r9, fp
 8007098:	eb4a 0a0c 	adc.w	sl, sl, ip
 800709c:	f04f 0100 	mov.w	r1, #0
 80070a0:	f04f 0200 	mov.w	r2, #0
 80070a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070b0:	4689      	mov	r9, r1
 80070b2:	4692      	mov	sl, r2
 80070b4:	eb1b 0509 	adds.w	r5, fp, r9
 80070b8:	eb4c 060a 	adc.w	r6, ip, sl
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	4619      	mov	r1, r3
 80070c2:	f04f 0200 	mov.w	r2, #0
 80070c6:	f04f 0300 	mov.w	r3, #0
 80070ca:	f04f 0400 	mov.w	r4, #0
 80070ce:	0094      	lsls	r4, r2, #2
 80070d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070d4:	008b      	lsls	r3, r1, #2
 80070d6:	461a      	mov	r2, r3
 80070d8:	4623      	mov	r3, r4
 80070da:	4628      	mov	r0, r5
 80070dc:	4631      	mov	r1, r6
 80070de:	f7f9 fd7f 	bl	8000be0 <__aeabi_uldivmod>
 80070e2:	4603      	mov	r3, r0
 80070e4:	460c      	mov	r4, r1
 80070e6:	461a      	mov	r2, r3
 80070e8:	4b0e      	ldr	r3, [pc, #56]	; (8007124 <UART_SetConfig+0x6f4>)
 80070ea:	fba3 1302 	umull	r1, r3, r3, r2
 80070ee:	095b      	lsrs	r3, r3, #5
 80070f0:	2164      	movs	r1, #100	; 0x64
 80070f2:	fb01 f303 	mul.w	r3, r1, r3
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	011b      	lsls	r3, r3, #4
 80070fa:	3332      	adds	r3, #50	; 0x32
 80070fc:	4a09      	ldr	r2, [pc, #36]	; (8007124 <UART_SetConfig+0x6f4>)
 80070fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007102:	095b      	lsrs	r3, r3, #5
 8007104:	f003 020f 	and.w	r2, r3, #15
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4442      	add	r2, r8
 800710e:	609a      	str	r2, [r3, #8]
}
 8007110:	e7ff      	b.n	8007112 <UART_SetConfig+0x6e2>
 8007112:	bf00      	nop
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800711c:	40011000 	.word	0x40011000
 8007120:	40011400 	.word	0x40011400
 8007124:	51eb851f 	.word	0x51eb851f

08007128 <__errno>:
 8007128:	4b01      	ldr	r3, [pc, #4]	; (8007130 <__errno+0x8>)
 800712a:	6818      	ldr	r0, [r3, #0]
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	2000001c 	.word	0x2000001c

08007134 <__libc_init_array>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	4e0d      	ldr	r6, [pc, #52]	; (800716c <__libc_init_array+0x38>)
 8007138:	4c0d      	ldr	r4, [pc, #52]	; (8007170 <__libc_init_array+0x3c>)
 800713a:	1ba4      	subs	r4, r4, r6
 800713c:	10a4      	asrs	r4, r4, #2
 800713e:	2500      	movs	r5, #0
 8007140:	42a5      	cmp	r5, r4
 8007142:	d109      	bne.n	8007158 <__libc_init_array+0x24>
 8007144:	4e0b      	ldr	r6, [pc, #44]	; (8007174 <__libc_init_array+0x40>)
 8007146:	4c0c      	ldr	r4, [pc, #48]	; (8007178 <__libc_init_array+0x44>)
 8007148:	f000 f92c 	bl	80073a4 <_init>
 800714c:	1ba4      	subs	r4, r4, r6
 800714e:	10a4      	asrs	r4, r4, #2
 8007150:	2500      	movs	r5, #0
 8007152:	42a5      	cmp	r5, r4
 8007154:	d105      	bne.n	8007162 <__libc_init_array+0x2e>
 8007156:	bd70      	pop	{r4, r5, r6, pc}
 8007158:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800715c:	4798      	blx	r3
 800715e:	3501      	adds	r5, #1
 8007160:	e7ee      	b.n	8007140 <__libc_init_array+0xc>
 8007162:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007166:	4798      	blx	r3
 8007168:	3501      	adds	r5, #1
 800716a:	e7f2      	b.n	8007152 <__libc_init_array+0x1e>
 800716c:	08007460 	.word	0x08007460
 8007170:	08007460 	.word	0x08007460
 8007174:	08007460 	.word	0x08007460
 8007178:	08007464 	.word	0x08007464

0800717c <memset>:
 800717c:	4402      	add	r2, r0
 800717e:	4603      	mov	r3, r0
 8007180:	4293      	cmp	r3, r2
 8007182:	d100      	bne.n	8007186 <memset+0xa>
 8007184:	4770      	bx	lr
 8007186:	f803 1b01 	strb.w	r1, [r3], #1
 800718a:	e7f9      	b.n	8007180 <memset+0x4>

0800718c <sqrt>:
 800718c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007190:	ed2d 8b02 	vpush	{d8}
 8007194:	b08b      	sub	sp, #44	; 0x2c
 8007196:	ec55 4b10 	vmov	r4, r5, d0
 800719a:	f000 f851 	bl	8007240 <__ieee754_sqrt>
 800719e:	4b26      	ldr	r3, [pc, #152]	; (8007238 <sqrt+0xac>)
 80071a0:	eeb0 8a40 	vmov.f32	s16, s0
 80071a4:	eef0 8a60 	vmov.f32	s17, s1
 80071a8:	f993 6000 	ldrsb.w	r6, [r3]
 80071ac:	1c73      	adds	r3, r6, #1
 80071ae:	d02a      	beq.n	8007206 <sqrt+0x7a>
 80071b0:	4622      	mov	r2, r4
 80071b2:	462b      	mov	r3, r5
 80071b4:	4620      	mov	r0, r4
 80071b6:	4629      	mov	r1, r5
 80071b8:	f7f9 fc64 	bl	8000a84 <__aeabi_dcmpun>
 80071bc:	4607      	mov	r7, r0
 80071be:	bb10      	cbnz	r0, 8007206 <sqrt+0x7a>
 80071c0:	f04f 0800 	mov.w	r8, #0
 80071c4:	f04f 0900 	mov.w	r9, #0
 80071c8:	4642      	mov	r2, r8
 80071ca:	464b      	mov	r3, r9
 80071cc:	4620      	mov	r0, r4
 80071ce:	4629      	mov	r1, r5
 80071d0:	f7f9 fc30 	bl	8000a34 <__aeabi_dcmplt>
 80071d4:	b1b8      	cbz	r0, 8007206 <sqrt+0x7a>
 80071d6:	2301      	movs	r3, #1
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	4b18      	ldr	r3, [pc, #96]	; (800723c <sqrt+0xb0>)
 80071dc:	9301      	str	r3, [sp, #4]
 80071de:	9708      	str	r7, [sp, #32]
 80071e0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80071e4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80071e8:	b9b6      	cbnz	r6, 8007218 <sqrt+0x8c>
 80071ea:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80071ee:	4668      	mov	r0, sp
 80071f0:	f000 f8d6 	bl	80073a0 <matherr>
 80071f4:	b1d0      	cbz	r0, 800722c <sqrt+0xa0>
 80071f6:	9b08      	ldr	r3, [sp, #32]
 80071f8:	b11b      	cbz	r3, 8007202 <sqrt+0x76>
 80071fa:	f7ff ff95 	bl	8007128 <__errno>
 80071fe:	9b08      	ldr	r3, [sp, #32]
 8007200:	6003      	str	r3, [r0, #0]
 8007202:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007206:	eeb0 0a48 	vmov.f32	s0, s16
 800720a:	eef0 0a68 	vmov.f32	s1, s17
 800720e:	b00b      	add	sp, #44	; 0x2c
 8007210:	ecbd 8b02 	vpop	{d8}
 8007214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007218:	4642      	mov	r2, r8
 800721a:	464b      	mov	r3, r9
 800721c:	4640      	mov	r0, r8
 800721e:	4649      	mov	r1, r9
 8007220:	f7f9 fac0 	bl	80007a4 <__aeabi_ddiv>
 8007224:	2e02      	cmp	r6, #2
 8007226:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800722a:	d1e0      	bne.n	80071ee <sqrt+0x62>
 800722c:	f7ff ff7c 	bl	8007128 <__errno>
 8007230:	2321      	movs	r3, #33	; 0x21
 8007232:	6003      	str	r3, [r0, #0]
 8007234:	e7df      	b.n	80071f6 <sqrt+0x6a>
 8007236:	bf00      	nop
 8007238:	20000080 	.word	0x20000080
 800723c:	08007450 	.word	0x08007450

08007240 <__ieee754_sqrt>:
 8007240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007244:	4955      	ldr	r1, [pc, #340]	; (800739c <__ieee754_sqrt+0x15c>)
 8007246:	ec55 4b10 	vmov	r4, r5, d0
 800724a:	43a9      	bics	r1, r5
 800724c:	462b      	mov	r3, r5
 800724e:	462a      	mov	r2, r5
 8007250:	d112      	bne.n	8007278 <__ieee754_sqrt+0x38>
 8007252:	ee10 2a10 	vmov	r2, s0
 8007256:	ee10 0a10 	vmov	r0, s0
 800725a:	4629      	mov	r1, r5
 800725c:	f7f9 f978 	bl	8000550 <__aeabi_dmul>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4620      	mov	r0, r4
 8007266:	4629      	mov	r1, r5
 8007268:	f7f8 ffbc 	bl	80001e4 <__adddf3>
 800726c:	4604      	mov	r4, r0
 800726e:	460d      	mov	r5, r1
 8007270:	ec45 4b10 	vmov	d0, r4, r5
 8007274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007278:	2d00      	cmp	r5, #0
 800727a:	ee10 0a10 	vmov	r0, s0
 800727e:	4621      	mov	r1, r4
 8007280:	dc0f      	bgt.n	80072a2 <__ieee754_sqrt+0x62>
 8007282:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007286:	4330      	orrs	r0, r6
 8007288:	d0f2      	beq.n	8007270 <__ieee754_sqrt+0x30>
 800728a:	b155      	cbz	r5, 80072a2 <__ieee754_sqrt+0x62>
 800728c:	ee10 2a10 	vmov	r2, s0
 8007290:	4620      	mov	r0, r4
 8007292:	4629      	mov	r1, r5
 8007294:	f7f8 ffa4 	bl	80001e0 <__aeabi_dsub>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	f7f9 fa82 	bl	80007a4 <__aeabi_ddiv>
 80072a0:	e7e4      	b.n	800726c <__ieee754_sqrt+0x2c>
 80072a2:	151b      	asrs	r3, r3, #20
 80072a4:	d073      	beq.n	800738e <__ieee754_sqrt+0x14e>
 80072a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80072aa:	07dd      	lsls	r5, r3, #31
 80072ac:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80072b0:	bf48      	it	mi
 80072b2:	0fc8      	lsrmi	r0, r1, #31
 80072b4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80072b8:	bf44      	itt	mi
 80072ba:	0049      	lslmi	r1, r1, #1
 80072bc:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80072c0:	2500      	movs	r5, #0
 80072c2:	1058      	asrs	r0, r3, #1
 80072c4:	0fcb      	lsrs	r3, r1, #31
 80072c6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80072ca:	0049      	lsls	r1, r1, #1
 80072cc:	2316      	movs	r3, #22
 80072ce:	462c      	mov	r4, r5
 80072d0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80072d4:	19a7      	adds	r7, r4, r6
 80072d6:	4297      	cmp	r7, r2
 80072d8:	bfde      	ittt	le
 80072da:	19bc      	addle	r4, r7, r6
 80072dc:	1bd2      	suble	r2, r2, r7
 80072de:	19ad      	addle	r5, r5, r6
 80072e0:	0fcf      	lsrs	r7, r1, #31
 80072e2:	3b01      	subs	r3, #1
 80072e4:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80072e8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80072ec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80072f0:	d1f0      	bne.n	80072d4 <__ieee754_sqrt+0x94>
 80072f2:	f04f 0c20 	mov.w	ip, #32
 80072f6:	469e      	mov	lr, r3
 80072f8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80072fc:	42a2      	cmp	r2, r4
 80072fe:	eb06 070e 	add.w	r7, r6, lr
 8007302:	dc02      	bgt.n	800730a <__ieee754_sqrt+0xca>
 8007304:	d112      	bne.n	800732c <__ieee754_sqrt+0xec>
 8007306:	428f      	cmp	r7, r1
 8007308:	d810      	bhi.n	800732c <__ieee754_sqrt+0xec>
 800730a:	2f00      	cmp	r7, #0
 800730c:	eb07 0e06 	add.w	lr, r7, r6
 8007310:	da42      	bge.n	8007398 <__ieee754_sqrt+0x158>
 8007312:	f1be 0f00 	cmp.w	lr, #0
 8007316:	db3f      	blt.n	8007398 <__ieee754_sqrt+0x158>
 8007318:	f104 0801 	add.w	r8, r4, #1
 800731c:	1b12      	subs	r2, r2, r4
 800731e:	428f      	cmp	r7, r1
 8007320:	bf88      	it	hi
 8007322:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007326:	1bc9      	subs	r1, r1, r7
 8007328:	4433      	add	r3, r6
 800732a:	4644      	mov	r4, r8
 800732c:	0052      	lsls	r2, r2, #1
 800732e:	f1bc 0c01 	subs.w	ip, ip, #1
 8007332:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007336:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800733a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800733e:	d1dd      	bne.n	80072fc <__ieee754_sqrt+0xbc>
 8007340:	430a      	orrs	r2, r1
 8007342:	d006      	beq.n	8007352 <__ieee754_sqrt+0x112>
 8007344:	1c5c      	adds	r4, r3, #1
 8007346:	bf13      	iteet	ne
 8007348:	3301      	addne	r3, #1
 800734a:	3501      	addeq	r5, #1
 800734c:	4663      	moveq	r3, ip
 800734e:	f023 0301 	bicne.w	r3, r3, #1
 8007352:	106a      	asrs	r2, r5, #1
 8007354:	085b      	lsrs	r3, r3, #1
 8007356:	07e9      	lsls	r1, r5, #31
 8007358:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800735c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007360:	bf48      	it	mi
 8007362:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007366:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800736a:	461c      	mov	r4, r3
 800736c:	e780      	b.n	8007270 <__ieee754_sqrt+0x30>
 800736e:	0aca      	lsrs	r2, r1, #11
 8007370:	3815      	subs	r0, #21
 8007372:	0549      	lsls	r1, r1, #21
 8007374:	2a00      	cmp	r2, #0
 8007376:	d0fa      	beq.n	800736e <__ieee754_sqrt+0x12e>
 8007378:	02d6      	lsls	r6, r2, #11
 800737a:	d50a      	bpl.n	8007392 <__ieee754_sqrt+0x152>
 800737c:	f1c3 0420 	rsb	r4, r3, #32
 8007380:	fa21 f404 	lsr.w	r4, r1, r4
 8007384:	1e5d      	subs	r5, r3, #1
 8007386:	4099      	lsls	r1, r3
 8007388:	4322      	orrs	r2, r4
 800738a:	1b43      	subs	r3, r0, r5
 800738c:	e78b      	b.n	80072a6 <__ieee754_sqrt+0x66>
 800738e:	4618      	mov	r0, r3
 8007390:	e7f0      	b.n	8007374 <__ieee754_sqrt+0x134>
 8007392:	0052      	lsls	r2, r2, #1
 8007394:	3301      	adds	r3, #1
 8007396:	e7ef      	b.n	8007378 <__ieee754_sqrt+0x138>
 8007398:	46a0      	mov	r8, r4
 800739a:	e7bf      	b.n	800731c <__ieee754_sqrt+0xdc>
 800739c:	7ff00000 	.word	0x7ff00000

080073a0 <matherr>:
 80073a0:	2000      	movs	r0, #0
 80073a2:	4770      	bx	lr

080073a4 <_init>:
 80073a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a6:	bf00      	nop
 80073a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073aa:	bc08      	pop	{r3}
 80073ac:	469e      	mov	lr, r3
 80073ae:	4770      	bx	lr

080073b0 <_fini>:
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	bf00      	nop
 80073b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b6:	bc08      	pop	{r3}
 80073b8:	469e      	mov	lr, r3
 80073ba:	4770      	bx	lr
